<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 12.2.1 (20241206.2353)
 -->
<!-- Pages: 1 -->
<svg width="3548pt" height="2521pt"
 viewBox="0.00 0.00 3547.55 2520.80" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 2516.8)">
<polygon fill="white" stroke="none" points="-4,4 -4,-2516.8 3543.55,-2516.8 3543.55,4 -4,4"/>
<!-- longestPalindrome_root -->
<g id="node1" class="node">
<title>longestPalindrome_root</title>
<polygon fill="lightblue" stroke="black" points="2622.05,-2512.8 2420.75,-2512.8 2420.75,-2390.4 2622.05,-2390.4 2622.05,-2512.8"/>
<text text-anchor="middle" x="2521.4" y="-2496.1" font-family="Arial" font-size="10.00">longestPalindrome_root</text>
<text text-anchor="middle" x="2521.4" y="-2460.1" font-family="Arial" font-size="10.00">ROOT</text>
<text text-anchor="middle" x="2521.4" y="-2436.1" font-family="Arial" font-size="10.00">Problem analysis for longestPalindrome</text>
<text text-anchor="middle" x="2521.4" y="-2412.1" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2521.4" y="-2400.1" font-family="Arial" font-size="10.00"># Starting to solve longestPalindrome</text>
</g>
<!-- longestPalindrome_expand_around_center_step_1 -->
<g id="node2" class="node">
<title>longestPalindrome_expand_around_center_step_1</title>
<polygon fill="moccasin" stroke="black" points="1720.43,-2354.4 1308.38,-2354.4 1308.38,-2148 1720.43,-2148 1720.43,-2354.4"/>
<text text-anchor="middle" x="1514.4" y="-2337.7" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_1</text>
<text text-anchor="middle" x="1514.4" y="-2301.7" font-family="Arial" font-size="10.00">HEAD &#45; Step 1 (Expand Around Center)</text>
<text text-anchor="middle" x="1514.4" y="-2277.7" font-family="Arial" font-size="10.00">Initialize two pointers, left and right, to the</text>
<text text-anchor="middle" x="1514.4" y="-2265.7" font-family="Arial" font-size="10.00">center of the palindrome.</text>
<text text-anchor="middle" x="1514.4" y="-2241.7" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1514.4" y="-2229.7" font-family="Arial" font-size="10.00">```</text>
<text text-anchor="middle" x="1514.4" y="-2217.7" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1514.4" y="-2205.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1514.4" y="-2193.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="1514.4" y="-2181.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left = left &#160;# Initialize two pointers, left and right, to the center of the palindrome.</text>
<text text-anchor="middle" x="1514.4" y="-2169.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right = right</text>
<text text-anchor="middle" x="1514.4" y="-2157.7" font-family="Arial" font-size="10.00">```</text>
</g>
<!-- longestPalindrome_root&#45;&gt;longestPalindrome_expand_around_center_step_1 -->
<g id="edge10" class="edge">
<title>longestPalindrome_root&#45;&gt;longestPalindrome_expand_around_center_step_1</title>
<path fill="none" stroke="black" d="M2420.7,-2430.76C2260.72,-2399.24 1944.84,-2337.01 1731.59,-2294.99"/>
<polygon fill="black" stroke="black" points="1732.53,-2291.61 1722.04,-2293.11 1731.18,-2298.48 1732.53,-2291.61"/>
</g>
<!-- longestPalindrome_two_pointers_step_1 -->
<g id="node12" class="node">
<title>longestPalindrome_two_pointers_step_1</title>
<polygon fill="lightyellow" stroke="black" points="2489.93,-2336.4 2272.88,-2336.4 2272.88,-2166 2489.93,-2166 2489.93,-2336.4"/>
<text text-anchor="middle" x="2381.4" y="-2319.7" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_1</text>
<text text-anchor="middle" x="2381.4" y="-2283.7" font-family="Arial" font-size="10.00">HEAD &#45; Step 1 (Two Pointers)</text>
<text text-anchor="middle" x="2381.4" y="-2259.7" font-family="Arial" font-size="10.00">Initialize two pointers, `left` and `right`, to</text>
<text text-anchor="middle" x="2381.4" y="-2247.7" font-family="Arial" font-size="10.00">the middle of the string `s`.</text>
<text text-anchor="middle" x="2381.4" y="-2223.7" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2381.4" y="-2211.7" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2381.4" y="-2199.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2381.4" y="-2187.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;l = len(s) // 2</text>
<text text-anchor="middle" x="2381.4" y="-2175.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;r = l</text>
</g>
<!-- longestPalindrome_root&#45;&gt;longestPalindrome_two_pointers_step_1 -->
<g id="edge18" class="edge">
<title>longestPalindrome_root&#45;&gt;longestPalindrome_two_pointers_step_1</title>
<path fill="none" stroke="black" d="M2478.63,-2390C2468.78,-2376.03 2458.07,-2360.85 2447.48,-2345.85"/>
<polygon fill="black" stroke="black" points="2450.41,-2343.93 2441.78,-2337.77 2444.69,-2347.96 2450.41,-2343.93"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_1 -->
<g id="node20" class="node">
<title>longestPalindrome_dynamic_programming_step_1</title>
<polygon fill="lightyellow" stroke="black" points="2785.93,-2336.4 2538.88,-2336.4 2538.88,-2166 2785.93,-2166 2785.93,-2336.4"/>
<text text-anchor="middle" x="2662.4" y="-2319.7" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_1</text>
<text text-anchor="middle" x="2662.4" y="-2283.7" font-family="Arial" font-size="10.00">HEAD &#45; Step 1 (Dynamic Programming)</text>
<text text-anchor="middle" x="2662.4" y="-2259.7" font-family="Arial" font-size="10.00">Create a 2D table `dp` to store whether a</text>
<text text-anchor="middle" x="2662.4" y="-2247.7" font-family="Arial" font-size="10.00">substring is a palindrome or not.</text>
<text text-anchor="middle" x="2662.4" y="-2223.7" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2662.4" y="-2211.7" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2662.4" y="-2199.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2662.4" y="-2187.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="2662.4" y="-2175.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
</g>
<!-- longestPalindrome_root&#45;&gt;longestPalindrome_dynamic_programming_step_1 -->
<g id="edge32" class="edge">
<title>longestPalindrome_root&#45;&gt;longestPalindrome_dynamic_programming_step_1</title>
<path fill="none" stroke="black" d="M2564.47,-2390C2574.4,-2376.03 2585.18,-2360.85 2595.85,-2345.85"/>
<polygon fill="black" stroke="black" points="2598.65,-2347.95 2601.59,-2337.77 2592.94,-2343.89 2598.65,-2347.95"/>
</g>
<!-- longestPalindrome_expand_around_center_step_1_error_logic_error -->
<g id="node34" class="node">
<title>longestPalindrome_expand_around_center_step_1_error_logic_error</title>
<polygon fill="salmon" stroke="black" points="3126.43,-2348.4 2804.38,-2348.4 2804.38,-2154 3126.43,-2154 3126.43,-2348.4"/>
<text text-anchor="middle" x="2965.4" y="-2331.7" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_1_error_logic_error</text>
<text text-anchor="middle" x="2965.4" y="-2295.7" font-family="Arial" font-size="10.00">HEAD &#45; Step 1 (Expand Around Center)</text>
<text text-anchor="middle" x="2965.4" y="-2271.7" font-family="Arial" font-size="10.00">Not considering even length palindromes</text>
<text text-anchor="middle" x="2965.4" y="-2247.7" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2965.4" y="-2235.7" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2965.4" y="-2223.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2965.4" y="-2211.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="2965.4" y="-2199.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="2965.4" y="-2187.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1</text>
<text text-anchor="middle" x="2965.4" y="-2175.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="2965.4" y="-2163.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[left + 1:right]</text>
</g>
<!-- longestPalindrome_root&#45;&gt;longestPalindrome_expand_around_center_step_1_error_logic_error -->
<g id="edge33" class="edge">
<title>longestPalindrome_root&#45;&gt;longestPalindrome_expand_around_center_step_1_error_logic_error</title>
<path fill="none" stroke="black" d="M2622.27,-2420.63C2674.9,-2403.64 2739.74,-2380.57 2795.4,-2354.4 2795.89,-2354.17 2796.37,-2353.94 2796.86,-2353.71"/>
<polygon fill="black" stroke="black" points="2798.32,-2356.89 2805.79,-2349.38 2795.26,-2350.6 2798.32,-2356.89"/>
</g>
<!-- longestPalindrome_expand_around_center_step_2 -->
<g id="node3" class="node">
<title>longestPalindrome_expand_around_center_step_2</title>
<polygon fill="moccasin" stroke="black" points="1099.8,-2112 291,-2112 291,-1881.6 1099.8,-1881.6 1099.8,-2112"/>
<text text-anchor="middle" x="695.4" y="-2095.3" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_2</text>
<text text-anchor="middle" x="695.4" y="-2059.3" font-family="Arial" font-size="10.00">Step 2</text>
<text text-anchor="middle" x="695.4" y="-2035.3" font-family="Arial" font-size="10.00">Expand the pointers outward, checking if the</text>
<text text-anchor="middle" x="695.4" y="-2023.3" font-family="Arial" font-size="10.00">characters at the pointers are the same and update</text>
<text text-anchor="middle" x="695.4" y="-2011.3" font-family="Arial" font-size="10.00">the maximum length and the longest palindromic</text>
<text text-anchor="middle" x="695.4" y="-1999.3" font-family="Arial" font-size="10.00">substring.</text>
<text text-anchor="middle" x="695.4" y="-1975.3" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="695.4" y="-1963.3" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="695.4" y="-1951.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="695.4" y="-1939.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="695.4" y="-1927.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = &quot;&quot; &#160;# Expand the pointers outward, checking if the characters at the pointers are the same and update the maximum length and the longest palindromic substring.</text>
<text text-anchor="middle" x="695.4" y="-1915.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="695.4" y="-1903.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = s[left:right]</text>
<text text-anchor="middle" x="695.4" y="-1891.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest</text>
</g>
<!-- longestPalindrome_expand_around_center_step_1&#45;&gt;longestPalindrome_expand_around_center_step_2 -->
<g id="edge4" class="edge">
<title>longestPalindrome_expand_around_center_step_1&#45;&gt;longestPalindrome_expand_around_center_step_2</title>
<path fill="none" stroke="black" d="M1308,-2186.59C1237.93,-2165 1157.24,-2140.13 1077.91,-2115.68"/>
<polygon fill="black" stroke="black" points="1079.27,-2112.44 1068.68,-2112.84 1077.21,-2119.13 1079.27,-2112.44"/>
</g>
<!-- longestPalindrome_expand_around_center_step_2_error_logic_error -->
<g id="node7" class="node">
<title>longestPalindrome_expand_around_center_step_2_error_logic_error</title>
<polygon fill="salmon" stroke="black" points="1484.55,-2088 1118.25,-2088 1118.25,-1905.6 1484.55,-1905.6 1484.55,-2088"/>
<text text-anchor="middle" x="1301.4" y="-2071.3" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_2_error_logic_error</text>
<text text-anchor="middle" x="1301.4" y="-2035.3" font-family="Arial" font-size="10.00">ERROR (Step 2)</text>
<text text-anchor="middle" x="1301.4" y="-2011.3" font-family="Arial" font-size="10.00">Not updating the maximum length correctly</text>
<text text-anchor="middle" x="1301.4" y="-1987.3" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1301.4" y="-1975.3" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1301.4" y="-1963.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1301.4" y="-1951.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="1301.4" y="-1939.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = &quot;&quot; &#160;</text>
<text text-anchor="middle" x="1301.4" y="-1927.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="1301.4" y="-1915.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = s[left:right] &#160;# not updating the maximum length correctly</text>
</g>
<!-- longestPalindrome_expand_around_center_step_1&#45;&gt;longestPalindrome_expand_around_center_step_2_error_logic_error -->
<g id="edge5" class="edge">
<title>longestPalindrome_expand_around_center_step_1&#45;&gt;longestPalindrome_expand_around_center_step_2_error_logic_error</title>
<path fill="none" stroke="black" d="M1427.76,-2147.54C1413.64,-2130.8 1399.03,-2113.49 1384.99,-2096.85"/>
<polygon fill="black" stroke="black" points="1387.8,-2094.75 1378.67,-2089.37 1382.45,-2099.27 1387.8,-2094.75"/>
</g>
<!-- longestPalindrome_expand_around_center_step_2_variation_1_step_2 -->
<g id="node8" class="node">
<title>longestPalindrome_expand_around_center_step_2_variation_1_step_2</title>
<polygon fill="lightyellow" stroke="black" points="1950.05,-2088 1502.75,-2088 1502.75,-1905.6 1950.05,-1905.6 1950.05,-2088"/>
<text text-anchor="middle" x="1726.4" y="-2071.3" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_2_variation_1_step_2</text>
<text text-anchor="middle" x="1726.4" y="-2035.3" font-family="Arial" font-size="10.00">Step 2</text>
<text text-anchor="middle" x="1726.4" y="-2011.3" font-family="Arial" font-size="10.00">Expand the palindrome while the characters at the</text>
<text text-anchor="middle" x="1726.4" y="-1999.3" font-family="Arial" font-size="10.00">left and right pointers are the same.</text>
<text text-anchor="middle" x="1726.4" y="-1975.3" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1726.4" y="-1963.3" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1726.4" y="-1951.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1726.4" y="-1939.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="1726.4" y="-1927.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left = left</text>
<text text-anchor="middle" x="1726.4" y="-1915.3" font-family="Arial" font-size="10.00"># Step 1: Expand the palindrome while the characters at the left and right pointers are the same.</text>
</g>
<!-- longestPalindrome_expand_around_center_step_1&#45;&gt;longestPalindrome_expand_around_center_step_2_variation_1_step_2 -->
<g id="edge9" class="edge">
<title>longestPalindrome_expand_around_center_step_1&#45;&gt;longestPalindrome_expand_around_center_step_2_variation_1_step_2</title>
<path fill="none" stroke="black" d="M1600.63,-2147.54C1614.69,-2130.8 1629.22,-2113.49 1643.21,-2096.85"/>
<polygon fill="black" stroke="black" points="1645.74,-2099.28 1649.49,-2089.37 1640.38,-2094.77 1645.74,-2099.28"/>
</g>
<!-- longestPalindrome_expand_around_center_step_3 -->
<g id="node4" class="node">
<title>longestPalindrome_expand_around_center_step_3</title>
<polygon fill="lightyellow" stroke="black" points="808.8,-1827.6 0,-1827.6 0,-1585.2 808.8,-1585.2 808.8,-1827.6"/>
<text text-anchor="middle" x="404.4" y="-1810.9" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_3</text>
<text text-anchor="middle" x="404.4" y="-1774.9" font-family="Arial" font-size="10.00">Step 3</text>
<text text-anchor="middle" x="404.4" y="-1750.9" font-family="Arial" font-size="10.00">Repeat step 2 until the characters at the pointers</text>
<text text-anchor="middle" x="404.4" y="-1738.9" font-family="Arial" font-size="10.00">are not the same or the pointers are out of the</text>
<text text-anchor="middle" x="404.4" y="-1726.9" font-family="Arial" font-size="10.00">string bounds.</text>
<text text-anchor="middle" x="404.4" y="-1702.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="404.4" y="-1690.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="404.4" y="-1678.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="404.4" y="-1666.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="404.4" y="-1654.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = &quot;&quot; &#160;# Expand the pointers outward, checking if the characters at the pointers are the same and update the maximum length and the longest palindromic substring.</text>
<text text-anchor="middle" x="404.4" y="-1642.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="404.4" y="-1630.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = s[left+1:right] &#160;# Update the longest palindrome found so far.</text>
<text text-anchor="middle" x="404.4" y="-1618.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1 &#160;# Move the pointers outward.</text>
<text text-anchor="middle" x="404.4" y="-1606.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="404.4" y="-1594.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest</text>
</g>
<!-- longestPalindrome_expand_around_center_step_2&#45;&gt;longestPalindrome_expand_around_center_step_3 -->
<g id="edge2" class="edge">
<title>longestPalindrome_expand_around_center_step_2&#45;&gt;longestPalindrome_expand_around_center_step_3</title>
<path fill="none" stroke="black" d="M579.97,-1881.4C564.84,-1866.4 549.25,-1850.95 533.9,-1835.74"/>
<polygon fill="black" stroke="black" points="536.54,-1833.43 526.98,-1828.88 531.61,-1838.41 536.54,-1833.43"/>
</g>
<!-- longestPalindrome_expand_around_center_step_3_error_logic_error -->
<g id="node6" class="node">
<title>longestPalindrome_expand_around_center_step_3_error_logic_error</title>
<polygon fill="salmon" stroke="black" points="1148.43,-1821.6 826.38,-1821.6 826.38,-1591.2 1148.43,-1591.2 1148.43,-1821.6"/>
<text text-anchor="middle" x="987.4" y="-1804.9" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_3_error_logic_error</text>
<text text-anchor="middle" x="987.4" y="-1768.9" font-family="Arial" font-size="10.00">ERROR (Step 3)</text>
<text text-anchor="middle" x="987.4" y="-1744.9" font-family="Arial" font-size="10.00">Not iterating over all possible centers of</text>
<text text-anchor="middle" x="987.4" y="-1732.9" font-family="Arial" font-size="10.00">palindrome</text>
<text text-anchor="middle" x="987.4" y="-1708.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="987.4" y="-1696.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="987.4" y="-1684.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="987.4" y="-1672.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="987.4" y="-1660.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = &quot;&quot; &#160;</text>
<text text-anchor="middle" x="987.4" y="-1648.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0] and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="987.4" y="-1636.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = s[left+1:right] &#160;</text>
<text text-anchor="middle" x="987.4" y="-1624.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1 &#160;</text>
<text text-anchor="middle" x="987.4" y="-1612.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="987.4" y="-1600.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return expand_around_center(s, 0, 0)</text>
</g>
<!-- longestPalindrome_expand_around_center_step_2&#45;&gt;longestPalindrome_expand_around_center_step_3_error_logic_error -->
<g id="edge3" class="edge">
<title>longestPalindrome_expand_around_center_step_2&#45;&gt;longestPalindrome_expand_around_center_step_3_error_logic_error</title>
<path fill="none" stroke="black" d="M811.23,-1881.4C828.49,-1864.36 846.33,-1846.73 863.75,-1829.53"/>
<polygon fill="black" stroke="black" points="865.98,-1832.24 870.64,-1822.72 861.06,-1827.26 865.98,-1832.24"/>
</g>
<!-- longestPalindrome_expand_around_center_step_4 -->
<g id="node5" class="node">
<title>longestPalindrome_expand_around_center_step_4</title>
<polygon fill="palegreen" stroke="black" points="572.93,-1531.2 235.88,-1531.2 235.88,-1108.8 572.93,-1108.8 572.93,-1531.2"/>
<text text-anchor="middle" x="404.4" y="-1514.5" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_4</text>
<text text-anchor="middle" x="404.4" y="-1478.5" font-family="Arial" font-size="10.00">TERMINAL (Step 4)</text>
<text text-anchor="middle" x="404.4" y="-1454.5" font-family="Arial" font-size="10.00">Repeat steps 1&#45;3 for all possible centers of</text>
<text text-anchor="middle" x="404.4" y="-1442.5" font-family="Arial" font-size="10.00">palindrome in the string.</text>
<text text-anchor="middle" x="404.4" y="-1418.5" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="404.4" y="-1406.5" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="404.4" y="-1394.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="404.4" y="-1382.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="404.4" y="-1370.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="404.4" y="-1358.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1</text>
<text text-anchor="middle" x="404.4" y="-1346.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="404.4" y="-1334.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[left + 1:right]</text>
<text text-anchor="middle" x="404.4" y="-1322.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="404.4" y="-1310.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = &quot;&quot;</text>
<text text-anchor="middle" x="404.4" y="-1298.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(len(s)):</text>
<text text-anchor="middle" x="404.4" y="-1286.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;palindrome1 = expand_around_center(s, i, i) &#160;# odd length</text>
<text text-anchor="middle" x="404.4" y="-1274.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;palindrome2 = expand_around_center(s, i, i + 1) &#160;# even length</text>
<text text-anchor="middle" x="404.4" y="-1262.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(palindrome1) &gt; len(longest):</text>
<text text-anchor="middle" x="404.4" y="-1250.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = palindrome1</text>
<text text-anchor="middle" x="404.4" y="-1238.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(palindrome2) &gt; len(longest):</text>
<text text-anchor="middle" x="404.4" y="-1226.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = palindrome2</text>
<text text-anchor="middle" x="404.4" y="-1214.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest</text>
<text text-anchor="middle" x="404.4" y="-1190.5" font-family="Arial" font-size="10.00">Time: O(n)</text>
<text text-anchor="middle" x="404.4" y="-1178.5" font-family="Arial" font-size="10.00">Space: O(1)</text>
<text text-anchor="middle" x="404.4" y="-1166.5" font-family="Arial" font-size="10.00">Data structures: string</text>
<text text-anchor="middle" x="404.4" y="-1154.5" font-family="Arial" font-size="10.00">Concepts: iteration, loops, conditional logic,</text>
<text text-anchor="middle" x="404.4" y="-1142.5" font-family="Arial" font-size="10.00">helper functions, return values,</text>
<text text-anchor="middle" x="404.4" y="-1130.5" font-family="Arial" font-size="10.00">comparison, compound assignment,</text>
<text text-anchor="middle" x="404.4" y="-1118.5" font-family="Arial" font-size="10.00">slicing, object&#45;oriented programming</text>
</g>
<!-- longestPalindrome_expand_around_center_step_3&#45;&gt;longestPalindrome_expand_around_center_step_4 -->
<g id="edge1" class="edge">
<title>longestPalindrome_expand_around_center_step_3&#45;&gt;longestPalindrome_expand_around_center_step_4</title>
<path fill="none" stroke="black" d="M404.4,-1584.83C404.4,-1571.36 404.4,-1557.35 404.4,-1543.12"/>
<polygon fill="black" stroke="black" points="407.9,-1543.17 404.4,-1533.17 400.9,-1543.17 407.9,-1543.17"/>
</g>
<!-- longestPalindrome_expand_around_center_step_2_variation_1_step_3 -->
<g id="node9" class="node">
<title>longestPalindrome_expand_around_center_step_2_variation_1_step_3</title>
<polygon fill="lightyellow" stroke="black" points="1919.43,-1827.6 1519.38,-1827.6 1519.38,-1585.2 1919.43,-1585.2 1919.43,-1827.6"/>
<text text-anchor="middle" x="1719.4" y="-1810.9" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_2_variation_1_step_3</text>
<text text-anchor="middle" x="1719.4" y="-1774.9" font-family="Arial" font-size="10.00">Step 3</text>
<text text-anchor="middle" x="1719.4" y="-1750.9" font-family="Arial" font-size="10.00">Update the longest palindromic substring if the</text>
<text text-anchor="middle" x="1719.4" y="-1738.9" font-family="Arial" font-size="10.00">current palindrome is longer.</text>
<text text-anchor="middle" x="1719.4" y="-1714.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1719.4" y="-1702.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1719.4" y="-1690.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1719.4" y="-1678.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="1719.4" y="-1666.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left = left</text>
<text text-anchor="middle" x="1719.4" y="-1654.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right = right</text>
<text text-anchor="middle" x="1719.4" y="-1642.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="1719.4" y="-1630.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1</text>
<text text-anchor="middle" x="1719.4" y="-1618.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="1719.4" y="-1606.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[left + 1:right]</text>
<text text-anchor="middle" x="1719.4" y="-1594.9" font-family="Arial" font-size="10.00"># Step 2: Update the longest palindromic substring if the current palindrome is longer.</text>
</g>
<!-- longestPalindrome_expand_around_center_step_2_variation_1_step_2&#45;&gt;longestPalindrome_expand_around_center_step_2_variation_1_step_3 -->
<g id="edge8" class="edge">
<title>longestPalindrome_expand_around_center_step_2_variation_1_step_2&#45;&gt;longestPalindrome_expand_around_center_step_2_variation_1_step_3</title>
<path fill="none" stroke="black" d="M1724.2,-1905.34C1723.7,-1884.35 1723.14,-1861.6 1722.6,-1839.24"/>
<polygon fill="black" stroke="black" points="1726.1,-1839.38 1722.36,-1829.46 1719.11,-1839.55 1726.1,-1839.38"/>
</g>
<!-- longestPalindrome_expand_around_center_step_2_variation_1_step_4 -->
<g id="node10" class="node">
<title>longestPalindrome_expand_around_center_step_2_variation_1_step_4</title>
<polygon fill="lightyellow" stroke="black" points="1948.43,-1471.2 1476.38,-1471.2 1476.38,-1168.8 1948.43,-1168.8 1948.43,-1471.2"/>
<text text-anchor="middle" x="1712.4" y="-1454.5" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_2_variation_1_step_4</text>
<text text-anchor="middle" x="1712.4" y="-1418.5" font-family="Arial" font-size="10.00">Step 4</text>
<text text-anchor="middle" x="1712.4" y="-1394.5" font-family="Arial" font-size="10.00">Iterate through the string to consider every</text>
<text text-anchor="middle" x="1712.4" y="-1382.5" font-family="Arial" font-size="10.00">character as the center of a potential palindrome.</text>
<text text-anchor="middle" x="1712.4" y="-1358.5" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1712.4" y="-1346.5" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1712.4" y="-1334.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1712.4" y="-1322.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="1712.4" y="-1310.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left = left</text>
<text text-anchor="middle" x="1712.4" y="-1298.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right = right</text>
<text text-anchor="middle" x="1712.4" y="-1286.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="1712.4" y="-1274.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1</text>
<text text-anchor="middle" x="1712.4" y="-1262.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="1712.4" y="-1250.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[left + 1:right]</text>
<text text-anchor="middle" x="1712.4" y="-1238.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="1712.4" y="-1226.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest_palindrome = &quot;&quot;</text>
<text text-anchor="middle" x="1712.4" y="-1214.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(len(s)):</text>
<text text-anchor="middle" x="1712.4" y="-1202.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;palindrome1 = expand_around_center(s, i, i) &#160;# odd length palindrome</text>
<text text-anchor="middle" x="1712.4" y="-1190.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;palindrome2 = expand_around_center(s, i, i + 1) &#160;# even length palindrome</text>
<text text-anchor="middle" x="1712.4" y="-1178.5" font-family="Arial" font-size="10.00"># Step 3: Iterate through the string to consider every character as the center of a potential palindrome.</text>
</g>
<!-- longestPalindrome_expand_around_center_step_2_variation_1_step_3&#45;&gt;longestPalindrome_expand_around_center_step_2_variation_1_step_4 -->
<g id="edge7" class="edge">
<title>longestPalindrome_expand_around_center_step_2_variation_1_step_3&#45;&gt;longestPalindrome_expand_around_center_step_2_variation_1_step_4</title>
<path fill="none" stroke="black" d="M1717.2,-1584.83C1716.62,-1552.58 1715.97,-1517.2 1715.35,-1483.11"/>
<polygon fill="black" stroke="black" points="1718.85,-1483.06 1715.17,-1473.12 1711.85,-1483.18 1718.85,-1483.06"/>
</g>
<!-- longestPalindrome_expand_around_center_step_2_variation_1_step_5 -->
<g id="node11" class="node">
<title>longestPalindrome_expand_around_center_step_2_variation_1_step_5</title>
<polygon fill="palegreen" stroke="black" points="1906.05,-1048.8 1518.75,-1048.8 1518.75,-614.4 1906.05,-614.4 1906.05,-1048.8"/>
<text text-anchor="middle" x="1712.4" y="-1032.1" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_2_variation_1_step_5</text>
<text text-anchor="middle" x="1712.4" y="-996.1" font-family="Arial" font-size="10.00">TERMINAL (Step 5)</text>
<text text-anchor="middle" x="1712.4" y="-972.1" font-family="Arial" font-size="10.00">Return the longest palindromic substring found.</text>
<text text-anchor="middle" x="1712.4" y="-948.1" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1712.4" y="-936.1" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1712.4" y="-924.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1712.4" y="-912.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="1712.4" y="-900.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left = left</text>
<text text-anchor="middle" x="1712.4" y="-888.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right = right</text>
<text text-anchor="middle" x="1712.4" y="-876.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="1712.4" y="-864.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1</text>
<text text-anchor="middle" x="1712.4" y="-852.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="1712.4" y="-840.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[left + 1:right]</text>
<text text-anchor="middle" x="1712.4" y="-828.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="1712.4" y="-816.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest_palindrome = &quot;&quot;</text>
<text text-anchor="middle" x="1712.4" y="-804.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(len(s)):</text>
<text text-anchor="middle" x="1712.4" y="-792.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;palindrome1 = expand_around_center(s, i, i) &#160;# odd length palindrome</text>
<text text-anchor="middle" x="1712.4" y="-780.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;palindrome2 = expand_around_center(s, i, i + 1) &#160;# even length palindrome</text>
<text text-anchor="middle" x="1712.4" y="-768.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(palindrome1) &gt; len(longest_palindrome):</text>
<text text-anchor="middle" x="1712.4" y="-756.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest_palindrome = palindrome1</text>
<text text-anchor="middle" x="1712.4" y="-744.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(palindrome2) &gt; len(longest_palindrome):</text>
<text text-anchor="middle" x="1712.4" y="-732.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest_palindrome = palindrome2</text>
<text text-anchor="middle" x="1712.4" y="-720.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest_palindrome</text>
<text text-anchor="middle" x="1712.4" y="-696.1" font-family="Arial" font-size="10.00">Time: O(n)</text>
<text text-anchor="middle" x="1712.4" y="-684.1" font-family="Arial" font-size="10.00">Space: O(1)</text>
<text text-anchor="middle" x="1712.4" y="-672.1" font-family="Arial" font-size="10.00">Data structures: string</text>
<text text-anchor="middle" x="1712.4" y="-660.1" font-family="Arial" font-size="10.00">Concepts: iteration, loops, conditional logic,</text>
<text text-anchor="middle" x="1712.4" y="-648.1" font-family="Arial" font-size="10.00">helper functions, return values,</text>
<text text-anchor="middle" x="1712.4" y="-636.1" font-family="Arial" font-size="10.00">comparison, compound assignment,</text>
<text text-anchor="middle" x="1712.4" y="-624.1" font-family="Arial" font-size="10.00">slicing, object&#45;oriented programming</text>
</g>
<!-- longestPalindrome_expand_around_center_step_2_variation_1_step_4&#45;&gt;longestPalindrome_expand_around_center_step_2_variation_1_step_5 -->
<g id="edge6" class="edge">
<title>longestPalindrome_expand_around_center_step_2_variation_1_step_4&#45;&gt;longestPalindrome_expand_around_center_step_2_variation_1_step_5</title>
<path fill="none" stroke="black" d="M1712.4,-1168.43C1712.4,-1134.17 1712.4,-1097.03 1712.4,-1060.35"/>
<polygon fill="black" stroke="black" points="1715.9,-1060.5 1712.4,-1050.5 1708.9,-1060.5 1715.9,-1060.5"/>
</g>
<!-- longestPalindrome_two_pointers_step_2 -->
<g id="node13" class="node">
<title>longestPalindrome_two_pointers_step_2</title>
<polygon fill="moccasin" stroke="black" points="2223.68,-2106 1981.12,-2106 1981.12,-1887.6 2223.68,-1887.6 2223.68,-2106"/>
<text text-anchor="middle" x="2102.4" y="-2089.3" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_2</text>
<text text-anchor="middle" x="2102.4" y="-2053.3" font-family="Arial" font-size="10.00">Step 2</text>
<text text-anchor="middle" x="2102.4" y="-2029.3" font-family="Arial" font-size="10.00">Expand the `left` and `right` pointers outwards to</text>
<text text-anchor="middle" x="2102.4" y="-2017.3" font-family="Arial" font-size="10.00">find the longest palindromic substring centered at</text>
<text text-anchor="middle" x="2102.4" y="-2005.3" font-family="Arial" font-size="10.00">the current position.</text>
<text text-anchor="middle" x="2102.4" y="-1981.3" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2102.4" y="-1969.3" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2102.4" y="-1957.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2102.4" y="-1945.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;l = len(s) // 2</text>
<text text-anchor="middle" x="2102.4" y="-1933.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;r = l</text>
<text text-anchor="middle" x="2102.4" y="-1921.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:</text>
<text text-anchor="middle" x="2102.4" y="-1909.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l &#45;= 1</text>
<text text-anchor="middle" x="2102.4" y="-1897.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r += 1</text>
</g>
<!-- longestPalindrome_two_pointers_step_1&#45;&gt;longestPalindrome_two_pointers_step_2 -->
<g id="edge16" class="edge">
<title>longestPalindrome_two_pointers_step_1&#45;&gt;longestPalindrome_two_pointers_step_2</title>
<path fill="none" stroke="black" d="M2288.11,-2165.8C2269.76,-2149.2 2250.2,-2131.51 2230.93,-2114.07"/>
<polygon fill="black" stroke="black" points="2233.28,-2111.48 2223.51,-2107.37 2228.58,-2116.67 2233.28,-2111.48"/>
</g>
<!-- longestPalindrome_two_pointers_step_2_error_logic_error -->
<g id="node19" class="node">
<title>longestPalindrome_two_pointers_step_2_error_logic_error</title>
<polygon fill="salmon" stroke="black" points="2521.05,-2112 2241.75,-2112 2241.75,-1881.6 2521.05,-1881.6 2521.05,-2112"/>
<text text-anchor="middle" x="2381.4" y="-2095.3" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_2_error_logic_error</text>
<text text-anchor="middle" x="2381.4" y="-2059.3" font-family="Arial" font-size="10.00">ERROR (Step 2)</text>
<text text-anchor="middle" x="2381.4" y="-2035.3" font-family="Arial" font-size="10.00">Failing to check for even length</text>
<text text-anchor="middle" x="2381.4" y="-2023.3" font-family="Arial" font-size="10.00">palindromes</text>
<text text-anchor="middle" x="2381.4" y="-2011.3" font-family="Arial" font-size="10.00">(e.g., &#39;abba&#39;) by only considering</text>
<text text-anchor="middle" x="2381.4" y="-1999.3" font-family="Arial" font-size="10.00">odd length palindromes.</text>
<text text-anchor="middle" x="2381.4" y="-1975.3" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2381.4" y="-1963.3" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2381.4" y="-1951.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2381.4" y="-1939.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;l = len(s) // 2</text>
<text text-anchor="middle" x="2381.4" y="-1927.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;r = l + 1</text>
<text text-anchor="middle" x="2381.4" y="-1915.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:</text>
<text text-anchor="middle" x="2381.4" y="-1903.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l &#45;= 1</text>
<text text-anchor="middle" x="2381.4" y="-1891.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r += 1</text>
</g>
<!-- longestPalindrome_two_pointers_step_1&#45;&gt;longestPalindrome_two_pointers_step_2_error_logic_error -->
<g id="edge17" class="edge">
<title>longestPalindrome_two_pointers_step_1&#45;&gt;longestPalindrome_two_pointers_step_2_error_logic_error</title>
<path fill="none" stroke="black" d="M2381.4,-2165.8C2381.4,-2152.23 2381.4,-2137.94 2381.4,-2123.65"/>
<polygon fill="black" stroke="black" points="2384.9,-2123.71 2381.4,-2113.71 2377.9,-2123.71 2384.9,-2123.71"/>
</g>
<!-- longestPalindrome_two_pointers_step_3 -->
<g id="node14" class="node">
<title>longestPalindrome_two_pointers_step_3</title>
<polygon fill="moccasin" stroke="black" points="2209.8,-1827.6 1971,-1827.6 1971,-1585.2 2209.8,-1585.2 2209.8,-1827.6"/>
<text text-anchor="middle" x="2090.4" y="-1810.9" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_3</text>
<text text-anchor="middle" x="2090.4" y="-1774.9" font-family="Arial" font-size="10.00">Step 3</text>
<text text-anchor="middle" x="2090.4" y="-1750.9" font-family="Arial" font-size="10.00">Store the longest palindromic substring found so</text>
<text text-anchor="middle" x="2090.4" y="-1738.9" font-family="Arial" font-size="10.00">far in the `res` variable.</text>
<text text-anchor="middle" x="2090.4" y="-1714.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2090.4" y="-1702.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2090.4" y="-1690.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2090.4" y="-1678.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = &quot;&quot;</text>
<text text-anchor="middle" x="2090.4" y="-1666.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;l = len(s) // 2</text>
<text text-anchor="middle" x="2090.4" y="-1654.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;r = l</text>
<text text-anchor="middle" x="2090.4" y="-1642.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:</text>
<text text-anchor="middle" x="2090.4" y="-1630.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l &#45;= 1</text>
<text text-anchor="middle" x="2090.4" y="-1618.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r += 1</text>
<text text-anchor="middle" x="2090.4" y="-1606.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = s[l+1:r]</text>
<text text-anchor="middle" x="2090.4" y="-1594.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return res</text>
</g>
<!-- longestPalindrome_two_pointers_step_2&#45;&gt;longestPalindrome_two_pointers_step_3 -->
<g id="edge14" class="edge">
<title>longestPalindrome_two_pointers_step_2&#45;&gt;longestPalindrome_two_pointers_step_3</title>
<path fill="none" stroke="black" d="M2097.88,-1887.18C2097.23,-1871.48 2096.55,-1855.18 2095.88,-1839.09"/>
<polygon fill="black" stroke="black" points="2099.39,-1839.36 2095.48,-1829.51 2092.4,-1839.65 2099.39,-1839.36"/>
</g>
<!-- longestPalindrome_two_pointers_step_3_error_update_error -->
<g id="node18" class="node">
<title>longestPalindrome_two_pointers_step_3_error_update_error</title>
<polygon fill="salmon" stroke="black" points="2521.18,-1839.6 2227.62,-1839.6 2227.62,-1573.2 2521.18,-1573.2 2521.18,-1839.6"/>
<text text-anchor="middle" x="2374.4" y="-1822.9" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_3_error_update_error</text>
<text text-anchor="middle" x="2374.4" y="-1786.9" font-family="Arial" font-size="10.00">ERROR (Step 3)</text>
<text text-anchor="middle" x="2374.4" y="-1762.9" font-family="Arial" font-size="10.00">Not updating the &#39;res&#39; variable correctly</text>
<text text-anchor="middle" x="2374.4" y="-1750.9" font-family="Arial" font-size="10.00">when a</text>
<text text-anchor="middle" x="2374.4" y="-1738.9" font-family="Arial" font-size="10.00">longer palindromic substring is found.</text>
<text text-anchor="middle" x="2374.4" y="-1714.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2374.4" y="-1702.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2374.4" y="-1690.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2374.4" y="-1678.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = &quot;&quot;</text>
<text text-anchor="middle" x="2374.4" y="-1666.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;l = len(s) // 2</text>
<text text-anchor="middle" x="2374.4" y="-1654.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;r = l</text>
<text text-anchor="middle" x="2374.4" y="-1642.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:</text>
<text text-anchor="middle" x="2374.4" y="-1630.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l &#45;= 1</text>
<text text-anchor="middle" x="2374.4" y="-1618.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r += 1</text>
<text text-anchor="middle" x="2374.4" y="-1606.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = &quot;&quot; &#160;# error: not updating the &#39;res&#39; variable correctly</text>
<text text-anchor="middle" x="2374.4" y="-1594.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = s[l+1:r]</text>
<text text-anchor="middle" x="2374.4" y="-1582.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return res</text>
</g>
<!-- longestPalindrome_two_pointers_step_2&#45;&gt;longestPalindrome_two_pointers_step_3_error_update_error -->
<g id="edge15" class="edge">
<title>longestPalindrome_two_pointers_step_2&#45;&gt;longestPalindrome_two_pointers_step_3_error_update_error</title>
<path fill="none" stroke="black" d="M2204.84,-1887.18C2216.94,-1874.35 2229.42,-1861.13 2241.85,-1847.94"/>
<polygon fill="black" stroke="black" points="2244.23,-1850.52 2248.55,-1840.84 2239.14,-1845.71 2244.23,-1850.52"/>
</g>
<!-- longestPalindrome_two_pointers_step_4 -->
<g id="node15" class="node">
<title>longestPalindrome_two_pointers_step_4</title>
<polygon fill="moccasin" stroke="black" points="2213.93,-1453.2 1966.88,-1453.2 1966.88,-1186.8 2213.93,-1186.8 2213.93,-1453.2"/>
<text text-anchor="middle" x="2090.4" y="-1436.5" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_4</text>
<text text-anchor="middle" x="2090.4" y="-1400.5" font-family="Arial" font-size="10.00">Step 4</text>
<text text-anchor="middle" x="2090.4" y="-1376.5" font-family="Arial" font-size="10.00">Move the `left` and `right` pointers to the next</text>
<text text-anchor="middle" x="2090.4" y="-1364.5" font-family="Arial" font-size="10.00">position in the string `s`.</text>
<text text-anchor="middle" x="2090.4" y="-1340.5" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2090.4" y="-1328.5" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2090.4" y="-1316.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2090.4" y="-1304.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = &quot;&quot;</text>
<text text-anchor="middle" x="2090.4" y="-1292.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(len(s)):</text>
<text text-anchor="middle" x="2090.4" y="-1280.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l = i</text>
<text text-anchor="middle" x="2090.4" y="-1268.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r = i</text>
<text text-anchor="middle" x="2090.4" y="-1256.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:</text>
<text text-anchor="middle" x="2090.4" y="-1244.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l &#45;= 1</text>
<text text-anchor="middle" x="2090.4" y="-1232.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r += 1</text>
<text text-anchor="middle" x="2090.4" y="-1220.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tmp = s[l+1:r]</text>
<text text-anchor="middle" x="2090.4" y="-1208.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(tmp) &gt; len(res):</text>
<text text-anchor="middle" x="2090.4" y="-1196.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res = tmp</text>
</g>
<!-- longestPalindrome_two_pointers_step_3&#45;&gt;longestPalindrome_two_pointers_step_4 -->
<g id="edge12" class="edge">
<title>longestPalindrome_two_pointers_step_3&#45;&gt;longestPalindrome_two_pointers_step_4</title>
<path fill="none" stroke="black" d="M2090.4,-1584.83C2090.4,-1546.77 2090.4,-1504.34 2090.4,-1464.83"/>
<polygon fill="black" stroke="black" points="2093.9,-1465.01 2090.4,-1455.01 2086.9,-1465.01 2093.9,-1465.01"/>
</g>
<!-- longestPalindrome_two_pointers_step_4_error_loop_error -->
<g id="node17" class="node">
<title>longestPalindrome_two_pointers_step_4_error_loop_error</title>
<polygon fill="salmon" stroke="black" points="2508.93,-1465.2 2231.88,-1465.2 2231.88,-1174.8 2508.93,-1174.8 2508.93,-1465.2"/>
<text text-anchor="middle" x="2370.4" y="-1448.5" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_4_error_loop_error</text>
<text text-anchor="middle" x="2370.4" y="-1412.5" font-family="Arial" font-size="10.00">ERROR (Step 4)</text>
<text text-anchor="middle" x="2370.4" y="-1388.5" font-family="Arial" font-size="10.00">Not incrementing the &#39;i&#39; variable</text>
<text text-anchor="middle" x="2370.4" y="-1376.5" font-family="Arial" font-size="10.00">correctly</text>
<text text-anchor="middle" x="2370.4" y="-1364.5" font-family="Arial" font-size="10.00">causing an infinite loop.</text>
<text text-anchor="middle" x="2370.4" y="-1340.5" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2370.4" y="-1328.5" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2370.4" y="-1316.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2370.4" y="-1304.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = &quot;&quot;</text>
<text text-anchor="middle" x="2370.4" y="-1292.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;i = 0</text>
<text text-anchor="middle" x="2370.4" y="-1280.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;while i &lt; len(s):</text>
<text text-anchor="middle" x="2370.4" y="-1268.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l = i</text>
<text text-anchor="middle" x="2370.4" y="-1256.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r = i</text>
<text text-anchor="middle" x="2370.4" y="-1244.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:</text>
<text text-anchor="middle" x="2370.4" y="-1232.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l &#45;= 1</text>
<text text-anchor="middle" x="2370.4" y="-1220.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r += 1</text>
<text text-anchor="middle" x="2370.4" y="-1208.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tmp = s[l+1:r]</text>
<text text-anchor="middle" x="2370.4" y="-1196.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(tmp) &gt; len(res):</text>
<text text-anchor="middle" x="2370.4" y="-1184.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res = tmp</text>
</g>
<!-- longestPalindrome_two_pointers_step_3&#45;&gt;longestPalindrome_two_pointers_step_4_error_loop_error -->
<g id="edge13" class="edge">
<title>longestPalindrome_two_pointers_step_3&#45;&gt;longestPalindrome_two_pointers_step_4_error_loop_error</title>
<path fill="none" stroke="black" d="M2183.35,-1585C2196.91,-1567.06 2210.6,-1548.71 2223.4,-1531.2 2236.67,-1513.05 2250.42,-1493.88 2263.95,-1474.8"/>
<polygon fill="black" stroke="black" points="2266.77,-1476.87 2269.69,-1466.69 2261.06,-1472.83 2266.77,-1476.87"/>
</g>
<!-- longestPalindrome_two_pointers_step_5 -->
<g id="node16" class="node">
<title>longestPalindrome_two_pointers_step_5</title>
<polygon fill="palegreen" stroke="black" points="2223.68,-1042.8 1957.12,-1042.8 1957.12,-620.4 2223.68,-620.4 2223.68,-1042.8"/>
<text text-anchor="middle" x="2090.4" y="-1026.1" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_5</text>
<text text-anchor="middle" x="2090.4" y="-990.1" font-family="Arial" font-size="10.00">TERMINAL (Step 5)</text>
<text text-anchor="middle" x="2090.4" y="-966.1" font-family="Arial" font-size="10.00">Repeat steps 2&#45;4 until the entire string `s` has</text>
<text text-anchor="middle" x="2090.4" y="-954.1" font-family="Arial" font-size="10.00">been processed.</text>
<text text-anchor="middle" x="2090.4" y="-930.1" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2090.4" y="-918.1" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2090.4" y="-906.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2090.4" y="-894.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = &quot;&quot;</text>
<text text-anchor="middle" x="2090.4" y="-882.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(len(s)):</text>
<text text-anchor="middle" x="2090.4" y="-870.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tmp = self.helper(s, i, i)</text>
<text text-anchor="middle" x="2090.4" y="-858.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(tmp) &gt; len(res):</text>
<text text-anchor="middle" x="2090.4" y="-846.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res = tmp</text>
<text text-anchor="middle" x="2090.4" y="-834.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tmp = self.helper(s, i, i+1)</text>
<text text-anchor="middle" x="2090.4" y="-822.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(tmp) &gt; len(res):</text>
<text text-anchor="middle" x="2090.4" y="-810.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res = tmp</text>
<text text-anchor="middle" x="2090.4" y="-798.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return res</text>
<text text-anchor="middle" x="2090.4" y="-774.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def helper(self, s, l, right):</text>
<text text-anchor="middle" x="2090.4" y="-762.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;while l &gt;= 0 and right &lt; len(s) and s[l] == s[right]:</text>
<text text-anchor="middle" x="2090.4" y="-750.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l &#45;= 1</text>
<text text-anchor="middle" x="2090.4" y="-738.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="2090.4" y="-726.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[l+1:right]</text>
<text text-anchor="middle" x="2090.4" y="-702.1" font-family="Arial" font-size="10.00">Time: O(n)</text>
<text text-anchor="middle" x="2090.4" y="-690.1" font-family="Arial" font-size="10.00">Space: O(1)</text>
<text text-anchor="middle" x="2090.4" y="-678.1" font-family="Arial" font-size="10.00">Data structures: string</text>
<text text-anchor="middle" x="2090.4" y="-666.1" font-family="Arial" font-size="10.00">Concepts: iteration, loops, conditional logic,</text>
<text text-anchor="middle" x="2090.4" y="-654.1" font-family="Arial" font-size="10.00">helper functions, return values,</text>
<text text-anchor="middle" x="2090.4" y="-642.1" font-family="Arial" font-size="10.00">comparison, compound assignment,</text>
<text text-anchor="middle" x="2090.4" y="-630.1" font-family="Arial" font-size="10.00">slicing, object&#45;oriented programming</text>
</g>
<!-- longestPalindrome_two_pointers_step_4&#45;&gt;longestPalindrome_two_pointers_step_5 -->
<g id="edge11" class="edge">
<title>longestPalindrome_two_pointers_step_4&#45;&gt;longestPalindrome_two_pointers_step_5</title>
<path fill="none" stroke="black" d="M2090.4,-1186.41C2090.4,-1145.57 2090.4,-1099.44 2090.4,-1054.3"/>
<polygon fill="black" stroke="black" points="2093.9,-1054.36 2090.4,-1044.36 2086.9,-1054.36 2093.9,-1054.36"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_2 -->
<g id="node21" class="node">
<title>longestPalindrome_dynamic_programming_step_2</title>
<polygon fill="moccasin" stroke="black" points="2785.93,-2100 2538.88,-2100 2538.88,-1893.6 2785.93,-1893.6 2785.93,-2100"/>
<text text-anchor="middle" x="2662.4" y="-2083.3" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_2</text>
<text text-anchor="middle" x="2662.4" y="-2047.3" font-family="Arial" font-size="10.00">Step 2</text>
<text text-anchor="middle" x="2662.4" y="-2023.3" font-family="Arial" font-size="10.00">Initialize the table `dp` with False, and set the</text>
<text text-anchor="middle" x="2662.4" y="-2011.3" font-family="Arial" font-size="10.00">diagonal elements to True since a single character</text>
<text text-anchor="middle" x="2662.4" y="-1999.3" font-family="Arial" font-size="10.00">is a palindrome.</text>
<text text-anchor="middle" x="2662.4" y="-1975.3" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2662.4" y="-1963.3" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2662.4" y="-1951.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2662.4" y="-1939.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="2662.4" y="-1927.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="2662.4" y="-1915.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="2662.4" y="-1903.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_1&#45;&gt;longestPalindrome_dynamic_programming_step_2 -->
<g id="edge25" class="edge">
<title>longestPalindrome_dynamic_programming_step_1&#45;&gt;longestPalindrome_dynamic_programming_step_2</title>
<path fill="none" stroke="black" d="M2662.4,-2165.8C2662.4,-2148.36 2662.4,-2129.71 2662.4,-2111.42"/>
<polygon fill="black" stroke="black" points="2665.9,-2111.6 2662.4,-2101.6 2658.9,-2111.6 2665.9,-2111.6"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_2_error_initialization_error -->
<g id="node28" class="node">
<title>longestPalindrome_dynamic_programming_step_2_error_initialization_error</title>
<polygon fill="salmon" stroke="black" points="3156.8,-2088 2804,-2088 2804,-1905.6 3156.8,-1905.6 3156.8,-2088"/>
<text text-anchor="middle" x="2980.4" y="-2071.3" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_2_error_initialization_error</text>
<text text-anchor="middle" x="2980.4" y="-2035.3" font-family="Arial" font-size="10.00">ERROR (Step 2)</text>
<text text-anchor="middle" x="2980.4" y="-2011.3" font-family="Arial" font-size="10.00">Initializing the diagonal elements with False</text>
<text text-anchor="middle" x="2980.4" y="-1987.3" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2980.4" y="-1975.3" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2980.4" y="-1963.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2980.4" y="-1951.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="2980.4" y="-1939.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="2980.4" y="-1927.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="2980.4" y="-1915.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = False</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_1&#45;&gt;longestPalindrome_dynamic_programming_step_2_error_initialization_error -->
<g id="edge26" class="edge">
<title>longestPalindrome_dynamic_programming_step_1&#45;&gt;longestPalindrome_dynamic_programming_step_2_error_initialization_error</title>
<path fill="none" stroke="black" d="M2768.73,-2165.8C2797.12,-2143.27 2828.04,-2118.73 2857.25,-2095.55"/>
<polygon fill="black" stroke="black" points="2859.41,-2098.3 2865.07,-2089.34 2855.06,-2092.81 2859.41,-2098.3"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_2_variation_1_step_2 -->
<g id="node29" class="node">
<title>longestPalindrome_dynamic_programming_step_2_variation_1_step_2</title>
<polygon fill="lightyellow" stroke="black" points="3508.43,-2100 3174.38,-2100 3174.38,-1893.6 3508.43,-1893.6 3508.43,-2100"/>
<text text-anchor="middle" x="3341.4" y="-2083.3" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_2_variation_1_step_2</text>
<text text-anchor="middle" x="3341.4" y="-2047.3" font-family="Arial" font-size="10.00">Step 2</text>
<text text-anchor="middle" x="3341.4" y="-2023.3" font-family="Arial" font-size="10.00">Initialize all substrings with one character as</text>
<text text-anchor="middle" x="3341.4" y="-2011.3" font-family="Arial" font-size="10.00">palindromes.</text>
<text text-anchor="middle" x="3341.4" y="-1987.3" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="3341.4" y="-1975.3" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="3341.4" y="-1963.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="3341.4" y="-1951.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="3341.4" y="-1939.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="3341.4" y="-1927.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="3341.4" y="-1915.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;# Initialize all substrings with one character as palindromes</text>
<text text-anchor="middle" x="3341.4" y="-1903.3" font-family="Arial" font-size="10.00"># Step 1: Initialize all substrings with one character as palindromes.</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_1&#45;&gt;longestPalindrome_dynamic_programming_step_2_variation_1_step_2 -->
<g id="edge31" class="edge">
<title>longestPalindrome_dynamic_programming_step_1&#45;&gt;longestPalindrome_dynamic_programming_step_2_variation_1_step_2</title>
<path fill="none" stroke="black" d="M2760.45,-2165.7C2771.73,-2158.81 2783.48,-2152.71 2795.4,-2148 2949.07,-2087.32 3009.43,-2166.52 3165.4,-2112 3171.46,-2109.88 3177.51,-2107.52 3183.54,-2104.94"/>
<polygon fill="black" stroke="black" points="3184.57,-2108.32 3192.27,-2101.05 3181.72,-2101.93 3184.57,-2108.32"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_3 -->
<g id="node22" class="node">
<title>longestPalindrome_dynamic_programming_step_3</title>
<polygon fill="moccasin" stroke="black" points="2785.93,-1839.6 2538.88,-1839.6 2538.88,-1573.2 2785.93,-1573.2 2785.93,-1839.6"/>
<text text-anchor="middle" x="2662.4" y="-1822.9" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_3</text>
<text text-anchor="middle" x="2662.4" y="-1786.9" font-family="Arial" font-size="10.00">Step 3</text>
<text text-anchor="middle" x="2662.4" y="-1762.9" font-family="Arial" font-size="10.00">Fill the table `dp` in a bottom&#45;up manner,</text>
<text text-anchor="middle" x="2662.4" y="-1750.9" font-family="Arial" font-size="10.00">checking for substrings of length 2 and then 3,</text>
<text text-anchor="middle" x="2662.4" y="-1738.9" font-family="Arial" font-size="10.00">and so on.</text>
<text text-anchor="middle" x="2662.4" y="-1714.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2662.4" y="-1702.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2662.4" y="-1690.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2662.4" y="-1678.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="2662.4" y="-1666.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="2662.4" y="-1654.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = &quot;&quot;, 1</text>
<text text-anchor="middle" x="2662.4" y="-1642.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="2662.4" y="-1630.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="2662.4" y="-1618.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i], 1</text>
<text text-anchor="middle" x="2662.4" y="-1606.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; 1)[::&#45;1]:</text>
<text text-anchor="middle" x="2662.4" y="-1594.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[i + 1]:</text>
<text text-anchor="middle" x="2662.4" y="-1582.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i + 1] = True</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_2&#45;&gt;longestPalindrome_dynamic_programming_step_3 -->
<g id="edge23" class="edge">
<title>longestPalindrome_dynamic_programming_step_2&#45;&gt;longestPalindrome_dynamic_programming_step_3</title>
<path fill="none" stroke="black" d="M2662.4,-1893.31C2662.4,-1879.7 2662.4,-1865.56 2662.4,-1851.41"/>
<polygon fill="black" stroke="black" points="2665.9,-1851.59 2662.4,-1841.59 2658.9,-1851.59 2665.9,-1851.59"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_3_error_logic_error -->
<g id="node27" class="node">
<title>longestPalindrome_dynamic_programming_step_3_error_logic_error</title>
<polygon fill="salmon" stroke="black" points="3126.43,-1827.6 2804.38,-1827.6 2804.38,-1585.2 3126.43,-1585.2 3126.43,-1827.6"/>
<text text-anchor="middle" x="2965.4" y="-1810.9" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_3_error_logic_error</text>
<text text-anchor="middle" x="2965.4" y="-1774.9" font-family="Arial" font-size="10.00">ERROR (Step 3)</text>
<text text-anchor="middle" x="2965.4" y="-1750.9" font-family="Arial" font-size="10.00">Not checking the case when length equals 2</text>
<text text-anchor="middle" x="2965.4" y="-1726.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2965.4" y="-1714.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2965.4" y="-1702.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2965.4" y="-1690.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="2965.4" y="-1678.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="2965.4" y="-1666.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = &quot;&quot;, 1</text>
<text text-anchor="middle" x="2965.4" y="-1654.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="2965.4" y="-1642.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="2965.4" y="-1630.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i], 1</text>
<text text-anchor="middle" x="2965.4" y="-1618.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; 2)[::&#45;1]:</text>
<text text-anchor="middle" x="2965.4" y="-1606.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[i + 1]:</text>
<text text-anchor="middle" x="2965.4" y="-1594.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i + 1] = True</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_2&#45;&gt;longestPalindrome_dynamic_programming_step_3_error_logic_error -->
<g id="edge24" class="edge">
<title>longestPalindrome_dynamic_programming_step_2&#45;&gt;longestPalindrome_dynamic_programming_step_3_error_logic_error</title>
<path fill="none" stroke="black" d="M2770.08,-1893.31C2789.59,-1874.74 2810.16,-1855.16 2830.34,-1835.95"/>
<polygon fill="black" stroke="black" points="2832.72,-1838.51 2837.55,-1829.08 2827.9,-1833.44 2832.72,-1838.51"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_4 -->
<g id="node23" class="node">
<title>longestPalindrome_dynamic_programming_step_4</title>
<polygon fill="moccasin" stroke="black" points="2779.93,-1453.2 2532.88,-1453.2 2532.88,-1186.8 2779.93,-1186.8 2779.93,-1453.2"/>
<text text-anchor="middle" x="2656.4" y="-1436.5" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_4</text>
<text text-anchor="middle" x="2656.4" y="-1400.5" font-family="Arial" font-size="10.00">Step 4</text>
<text text-anchor="middle" x="2656.4" y="-1376.5" font-family="Arial" font-size="10.00">For each substring, check if it&#39;s equal to its</text>
<text text-anchor="middle" x="2656.4" y="-1364.5" font-family="Arial" font-size="10.00">reverse, and update the table `dp` accordingly.</text>
<text text-anchor="middle" x="2656.4" y="-1340.5" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2656.4" y="-1328.5" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2656.4" y="-1316.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2656.4" y="-1304.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="2656.4" y="-1292.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="2656.4" y="-1280.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = &quot;&quot;, 1</text>
<text text-anchor="middle" x="2656.4" y="-1268.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="2656.4" y="-1256.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="2656.4" y="-1244.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i], 1</text>
<text text-anchor="middle" x="2656.4" y="-1232.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; 1)[::&#45;1]:</text>
<text text-anchor="middle" x="2656.4" y="-1220.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[i + 1]:</text>
<text text-anchor="middle" x="2656.4" y="-1208.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i + 1] = True</text>
<text text-anchor="middle" x="2656.4" y="-1196.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i:i + 2], 2</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_3&#45;&gt;longestPalindrome_dynamic_programming_step_4 -->
<g id="edge21" class="edge">
<title>longestPalindrome_dynamic_programming_step_3&#45;&gt;longestPalindrome_dynamic_programming_step_4</title>
<path fill="none" stroke="black" d="M2660.33,-1572.84C2659.79,-1538.07 2659.2,-1500.41 2658.65,-1465.07"/>
<polygon fill="black" stroke="black" points="2662.15,-1465.14 2658.49,-1455.2 2655.15,-1465.25 2662.15,-1465.14"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_4_error_logic_error -->
<g id="node26" class="node">
<title>longestPalindrome_dynamic_programming_step_4_error_logic_error</title>
<polygon fill="salmon" stroke="black" points="3120.43,-1471.2 2798.38,-1471.2 2798.38,-1168.8 3120.43,-1168.8 3120.43,-1471.2"/>
<text text-anchor="middle" x="2959.4" y="-1454.5" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_4_error_logic_error</text>
<text text-anchor="middle" x="2959.4" y="-1418.5" font-family="Arial" font-size="10.00">ERROR (Step 4)</text>
<text text-anchor="middle" x="2959.4" y="-1394.5" font-family="Arial" font-size="10.00">Updating longest and l variables only when</text>
<text text-anchor="middle" x="2959.4" y="-1382.5" font-family="Arial" font-size="10.00">dp[i][j] is True</text>
<text text-anchor="middle" x="2959.4" y="-1358.5" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2959.4" y="-1346.5" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2959.4" y="-1334.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2959.4" y="-1322.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="2959.4" y="-1310.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="2959.4" y="-1298.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = &quot;&quot;, 1</text>
<text text-anchor="middle" x="2959.4" y="-1286.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="2959.4" y="-1274.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="2959.4" y="-1262.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="2959.4" y="-1250.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if dp[i][i]:</text>
<text text-anchor="middle" x="2959.4" y="-1238.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i], 1</text>
<text text-anchor="middle" x="2959.4" y="-1226.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; 1)[::&#45;1]:</text>
<text text-anchor="middle" x="2959.4" y="-1214.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[i + 1]:</text>
<text text-anchor="middle" x="2959.4" y="-1202.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i + 1] = True</text>
<text text-anchor="middle" x="2959.4" y="-1190.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if dp[i][i + 1]:</text>
<text text-anchor="middle" x="2959.4" y="-1178.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i:i + 2], 2</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_3&#45;&gt;longestPalindrome_dynamic_programming_step_4_error_logic_error -->
<g id="edge22" class="edge">
<title>longestPalindrome_dynamic_programming_step_3&#45;&gt;longestPalindrome_dynamic_programming_step_4_error_logic_error</title>
<path fill="none" stroke="black" d="M2764.82,-1572.84C2787.79,-1543.11 2812.4,-1511.25 2836.13,-1480.55"/>
<polygon fill="black" stroke="black" points="2838.86,-1482.74 2842.2,-1472.69 2833.32,-1478.46 2838.86,-1482.74"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_5 -->
<g id="node24" class="node">
<title>longestPalindrome_dynamic_programming_step_5</title>
<polygon fill="palegreen" stroke="black" points="2631.93,-1072.8 2384.88,-1072.8 2384.88,-590.4 2631.93,-590.4 2631.93,-1072.8"/>
<text text-anchor="middle" x="2508.4" y="-1056.1" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_5</text>
<text text-anchor="middle" x="2508.4" y="-1020.1" font-family="Arial" font-size="10.00">TERMINAL (Step 5)</text>
<text text-anchor="middle" x="2508.4" y="-996.1" font-family="Arial" font-size="10.00">Use the table `dp` to find the longest palindromic</text>
<text text-anchor="middle" x="2508.4" y="-984.1" font-family="Arial" font-size="10.00">substring.</text>
<text text-anchor="middle" x="2508.4" y="-960.1" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2508.4" y="-948.1" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2508.4" y="-936.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2508.4" y="-924.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="2508.4" y="-912.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="2508.4" y="-900.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = &quot;&quot;, 0</text>
<text text-anchor="middle" x="2508.4" y="-888.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="2508.4" y="-876.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="2508.4" y="-864.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="2508.4" y="-852.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i], 1</text>
<text text-anchor="middle" x="2508.4" y="-840.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="2508.4" y="-828.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; 1)[::&#45;1]:</text>
<text text-anchor="middle" x="2508.4" y="-816.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[i + 1]:</text>
<text text-anchor="middle" x="2508.4" y="-804.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i + 1] = True</text>
<text text-anchor="middle" x="2508.4" y="-792.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i:i + 2], 2</text>
<text text-anchor="middle" x="2508.4" y="-780.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="2508.4" y="-768.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for length in range(3, n + 1):</text>
<text text-anchor="middle" x="2508.4" y="-756.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; length + 1)[::&#45;1]:</text>
<text text-anchor="middle" x="2508.4" y="-744.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;j = i + length &#45; 1</text>
<text text-anchor="middle" x="2508.4" y="-732.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[j] and dp[i + 1][j &#45; 1]:</text>
<text text-anchor="middle" x="2508.4" y="-720.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][j] = True</text>
<text text-anchor="middle" x="2508.4" y="-708.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i:j + 1], length</text>
<text text-anchor="middle" x="2508.4" y="-696.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="2508.4" y="-684.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest</text>
<text text-anchor="middle" x="2508.4" y="-660.1" font-family="Arial" font-size="10.00">Time: O(n²)</text>
<text text-anchor="middle" x="2508.4" y="-648.1" font-family="Arial" font-size="10.00">Space: O(1)</text>
<text text-anchor="middle" x="2508.4" y="-636.1" font-family="Arial" font-size="10.00">Data structures: string</text>
<text text-anchor="middle" x="2508.4" y="-624.1" font-family="Arial" font-size="10.00">Concepts: iteration, conditional logic, return</text>
<text text-anchor="middle" x="2508.4" y="-612.1" font-family="Arial" font-size="10.00">values, comparison, slicing, object&#45;</text>
<text text-anchor="middle" x="2508.4" y="-600.1" font-family="Arial" font-size="10.00">oriented programming</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_4&#45;&gt;longestPalindrome_dynamic_programming_step_5 -->
<g id="edge19" class="edge">
<title>longestPalindrome_dynamic_programming_step_4&#45;&gt;longestPalindrome_dynamic_programming_step_5</title>
<path fill="none" stroke="black" d="M2616.06,-1186.41C2606.36,-1154.54 2595.68,-1119.46 2584.94,-1084.14"/>
<polygon fill="black" stroke="black" points="2588.3,-1083.17 2582.04,-1074.62 2581.6,-1085.21 2588.3,-1083.17"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_5_error_off&#45;by&#45;one -->
<g id="node25" class="node">
<title>longestPalindrome_dynamic_programming_step_5_error_off&#45;by&#45;one</title>
<polygon fill="salmon" stroke="black" points="2969.3,-1030.8 2649.5,-1030.8 2649.5,-632.4 2969.3,-632.4 2969.3,-1030.8"/>
<text text-anchor="middle" x="2809.4" y="-1014.1" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_5_error_off&#45;by&#45;one</text>
<text text-anchor="middle" x="2809.4" y="-978.1" font-family="Arial" font-size="10.00">ERROR (Step 5)</text>
<text text-anchor="middle" x="2809.4" y="-954.1" font-family="Arial" font-size="10.00">Not considering all possible substrings while</text>
<text text-anchor="middle" x="2809.4" y="-942.1" font-family="Arial" font-size="10.00">finding the longest palindromic substring</text>
<text text-anchor="middle" x="2809.4" y="-918.1" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2809.4" y="-906.1" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2809.4" y="-894.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2809.4" y="-882.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="2809.4" y="-870.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="2809.4" y="-858.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = &quot;&quot;, 0</text>
<text text-anchor="middle" x="2809.4" y="-846.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="2809.4" y="-834.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="2809.4" y="-822.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="2809.4" y="-810.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i], 1</text>
<text text-anchor="middle" x="2809.4" y="-798.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="2809.4" y="-786.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; 1)[::&#45;1]:</text>
<text text-anchor="middle" x="2809.4" y="-774.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[i + 1]:</text>
<text text-anchor="middle" x="2809.4" y="-762.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i + 1] = True</text>
<text text-anchor="middle" x="2809.4" y="-750.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i:i + 2], 2</text>
<text text-anchor="middle" x="2809.4" y="-738.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="2809.4" y="-726.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for length in range(3, n):</text>
<text text-anchor="middle" x="2809.4" y="-714.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; length + 1)[::&#45;1]:</text>
<text text-anchor="middle" x="2809.4" y="-702.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;j = i + length &#45; 1</text>
<text text-anchor="middle" x="2809.4" y="-690.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[j] and dp[i + 1][j &#45; 1]:</text>
<text text-anchor="middle" x="2809.4" y="-678.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][j] = True</text>
<text text-anchor="middle" x="2809.4" y="-666.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i:j + 1], length</text>
<text text-anchor="middle" x="2809.4" y="-654.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="2809.4" y="-642.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_4&#45;&gt;longestPalindrome_dynamic_programming_step_5_error_off&#45;by&#45;one -->
<g id="edge20" class="edge">
<title>longestPalindrome_dynamic_programming_step_4&#45;&gt;longestPalindrome_dynamic_programming_step_5_error_off&#45;by&#45;one</title>
<path fill="none" stroke="black" d="M2698.11,-1186.41C2712.12,-1141.86 2728.11,-1091.01 2743.52,-1042.03"/>
<polygon fill="black" stroke="black" points="2746.79,-1043.32 2746.45,-1032.73 2740.11,-1041.22 2746.79,-1043.32"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_2_variation_1_step_3 -->
<g id="node30" class="node">
<title>longestPalindrome_dynamic_programming_step_2_variation_1_step_3</title>
<polygon fill="lightyellow" stroke="black" points="3518.93,-1845.6 3163.88,-1845.6 3163.88,-1567.2 3518.93,-1567.2 3518.93,-1845.6"/>
<text text-anchor="middle" x="3341.4" y="-1828.9" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_2_variation_1_step_3</text>
<text text-anchor="middle" x="3341.4" y="-1792.9" font-family="Arial" font-size="10.00">Step 3</text>
<text text-anchor="middle" x="3341.4" y="-1768.9" font-family="Arial" font-size="10.00">Fill the 2D table `dp` by checking if the</text>
<text text-anchor="middle" x="3341.4" y="-1756.9" font-family="Arial" font-size="10.00">substring is a palindrome.</text>
<text text-anchor="middle" x="3341.4" y="-1732.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="3341.4" y="-1720.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="3341.4" y="-1708.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="3341.4" y="-1696.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="3341.4" y="-1684.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="3341.4" y="-1672.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="3341.4" y="-1660.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;# Initialize all substrings with one character as palindromes</text>
<text text-anchor="middle" x="3341.4" y="-1648.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;max_length = 1</text>
<text text-anchor="middle" x="3341.4" y="-1636.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;start = 0</text>
<text text-anchor="middle" x="3341.4" y="-1624.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="3341.4" y="-1612.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="3341.4" y="-1600.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="3341.4" y="-1588.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;# Fill the 2D table dp by checking if the substring is a palindrome</text>
<text text-anchor="middle" x="3341.4" y="-1576.9" font-family="Arial" font-size="10.00"># Step 2: Fill the 2D table `dp` by checking if the substring is a palindrome.</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_2_variation_1_step_2&#45;&gt;longestPalindrome_dynamic_programming_step_2_variation_1_step_3 -->
<g id="edge30" class="edge">
<title>longestPalindrome_dynamic_programming_step_2_variation_1_step_2&#45;&gt;longestPalindrome_dynamic_programming_step_2_variation_1_step_3</title>
<path fill="none" stroke="black" d="M3341.4,-1893.31C3341.4,-1881.53 3341.4,-1869.35 3341.4,-1857.12"/>
<polygon fill="black" stroke="black" points="3344.9,-1857.39 3341.4,-1847.39 3337.9,-1857.39 3344.9,-1857.39"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_2_variation_1_step_4 -->
<g id="node31" class="node">
<title>longestPalindrome_dynamic_programming_step_2_variation_1_step_4</title>
<polygon fill="lightyellow" stroke="black" points="3539.55,-1495.2 3143.25,-1495.2 3143.25,-1144.8 3539.55,-1144.8 3539.55,-1495.2"/>
<text text-anchor="middle" x="3341.4" y="-1478.5" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_2_variation_1_step_4</text>
<text text-anchor="middle" x="3341.4" y="-1442.5" font-family="Arial" font-size="10.00">Step 4</text>
<text text-anchor="middle" x="3341.4" y="-1418.5" font-family="Arial" font-size="10.00">Initialize variables to store the longest</text>
<text text-anchor="middle" x="3341.4" y="-1406.5" font-family="Arial" font-size="10.00">palindromic substring and its length.</text>
<text text-anchor="middle" x="3341.4" y="-1382.5" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="3341.4" y="-1370.5" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="3341.4" y="-1358.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="3341.4" y="-1346.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="3341.4" y="-1334.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="3341.4" y="-1322.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="3341.4" y="-1310.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;# Initialize all substrings with one character as palindromes</text>
<text text-anchor="middle" x="3341.4" y="-1298.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;max_length = 1</text>
<text text-anchor="middle" x="3341.4" y="-1286.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;start = 0</text>
<text text-anchor="middle" x="3341.4" y="-1274.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="3341.4" y="-1262.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="3341.4" y="-1250.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="3341.4" y="-1238.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;# Fill the 2D table dp by checking if the substring is a palindrome</text>
<text text-anchor="middle" x="3341.4" y="-1226.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; 1):</text>
<text text-anchor="middle" x="3341.4" y="-1214.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[i + 1]:</text>
<text text-anchor="middle" x="3341.4" y="-1202.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i + 1] = True</text>
<text text-anchor="middle" x="3341.4" y="-1190.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;start = i</text>
<text text-anchor="middle" x="3341.4" y="-1178.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_length = 2</text>
<text text-anchor="middle" x="3341.4" y="-1166.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="3341.4" y="-1154.5" font-family="Arial" font-size="10.00"># Step 3: Initialize variables to store the longest palindromic substring and its length.</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_2_variation_1_step_3&#45;&gt;longestPalindrome_dynamic_programming_step_2_variation_1_step_4 -->
<g id="edge29" class="edge">
<title>longestPalindrome_dynamic_programming_step_2_variation_1_step_3&#45;&gt;longestPalindrome_dynamic_programming_step_2_variation_1_step_4</title>
<path fill="none" stroke="black" d="M3341.4,-1566.89C3341.4,-1547.47 3341.4,-1527.25 3341.4,-1507.12"/>
<polygon fill="black" stroke="black" points="3344.9,-1507.13 3341.4,-1497.13 3337.9,-1507.13 3344.9,-1507.13"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_2_variation_1_step_5 -->
<g id="node32" class="node">
<title>longestPalindrome_dynamic_programming_step_2_variation_1_step_5</title>
<polygon fill="lightyellow" stroke="black" points="3523.43,-1042.8 3159.38,-1042.8 3159.38,-620.4 3523.43,-620.4 3523.43,-1042.8"/>
<text text-anchor="middle" x="3341.4" y="-1026.1" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_2_variation_1_step_5</text>
<text text-anchor="middle" x="3341.4" y="-990.1" font-family="Arial" font-size="10.00">Step 5</text>
<text text-anchor="middle" x="3341.4" y="-966.1" font-family="Arial" font-size="10.00">Traverse the 2D table `dp` to find the longest</text>
<text text-anchor="middle" x="3341.4" y="-954.1" font-family="Arial" font-size="10.00">palindromic substring.</text>
<text text-anchor="middle" x="3341.4" y="-930.1" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="3341.4" y="-918.1" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="3341.4" y="-906.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="3341.4" y="-894.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="3341.4" y="-882.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="3341.4" y="-870.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="3341.4" y="-858.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;# Initialize all substrings with one character as palindromes</text>
<text text-anchor="middle" x="3341.4" y="-846.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;max_length = 1</text>
<text text-anchor="middle" x="3341.4" y="-834.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;start = 0</text>
<text text-anchor="middle" x="3341.4" y="-822.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="3341.4" y="-810.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="3341.4" y="-798.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="3341.4" y="-786.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;# Fill the 2D table dp by checking if the substring is a palindrome</text>
<text text-anchor="middle" x="3341.4" y="-774.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; 1):</text>
<text text-anchor="middle" x="3341.4" y="-762.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[i + 1]:</text>
<text text-anchor="middle" x="3341.4" y="-750.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i + 1] = True</text>
<text text-anchor="middle" x="3341.4" y="-738.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;start = i</text>
<text text-anchor="middle" x="3341.4" y="-726.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_length = 2</text>
<text text-anchor="middle" x="3341.4" y="-714.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="3341.4" y="-702.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;# Fill the 2D table dp by checking if the substring is a palindrome</text>
<text text-anchor="middle" x="3341.4" y="-690.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for length in range(3, n + 1):</text>
<text text-anchor="middle" x="3341.4" y="-678.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; length + 1):</text>
<text text-anchor="middle" x="3341.4" y="-666.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;j = i + length &#45; 1</text>
<text text-anchor="middle" x="3341.4" y="-654.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[j] and dp[i + 1][j &#45; 1]:</text>
<text text-anchor="middle" x="3341.4" y="-642.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][j] = True</text>
<text text-anchor="middle" x="3341.4" y="-630.1" font-family="Arial" font-size="10.00"># Step 4: Traverse the 2D table `dp` to find the longest palindromic substring.</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_2_variation_1_step_4&#45;&gt;longestPalindrome_dynamic_programming_step_2_variation_1_step_5 -->
<g id="edge28" class="edge">
<title>longestPalindrome_dynamic_programming_step_2_variation_1_step_4&#45;&gt;longestPalindrome_dynamic_programming_step_2_variation_1_step_5</title>
<path fill="none" stroke="black" d="M3341.4,-1144.43C3341.4,-1115.19 3341.4,-1084.5 3341.4,-1054.27"/>
<polygon fill="black" stroke="black" points="3344.9,-1054.66 3341.4,-1044.66 3337.9,-1054.66 3344.9,-1054.66"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_2_variation_1_step_6 -->
<g id="node33" class="node">
<title>longestPalindrome_dynamic_programming_step_2_variation_1_step_6</title>
<polygon fill="palegreen" stroke="black" points="3509.18,-554.4 3173.62,-554.4 3173.62,0 3509.18,0 3509.18,-554.4"/>
<text text-anchor="middle" x="3341.4" y="-537.7" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_2_variation_1_step_6</text>
<text text-anchor="middle" x="3341.4" y="-501.7" font-family="Arial" font-size="10.00">TERMINAL (Step 6)</text>
<text text-anchor="middle" x="3341.4" y="-477.7" font-family="Arial" font-size="10.00">Return the longest palindromic substring.</text>
<text text-anchor="middle" x="3341.4" y="-453.7" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="3341.4" y="-441.7" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="3341.4" y="-429.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="3341.4" y="-417.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="3341.4" y="-405.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="3341.4" y="-393.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="3341.4" y="-381.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;# Initialize all substrings with one character as palindromes</text>
<text text-anchor="middle" x="3341.4" y="-369.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;max_length = 1</text>
<text text-anchor="middle" x="3341.4" y="-357.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;start = 0</text>
<text text-anchor="middle" x="3341.4" y="-345.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="3341.4" y="-333.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="3341.4" y="-321.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="3341.4" y="-309.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;# Fill the 2D table dp by checking if the substring is a palindrome</text>
<text text-anchor="middle" x="3341.4" y="-297.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; 1):</text>
<text text-anchor="middle" x="3341.4" y="-285.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[i + 1]:</text>
<text text-anchor="middle" x="3341.4" y="-273.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i + 1] = True</text>
<text text-anchor="middle" x="3341.4" y="-261.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;start = i</text>
<text text-anchor="middle" x="3341.4" y="-249.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_length = 2</text>
<text text-anchor="middle" x="3341.4" y="-237.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="3341.4" y="-225.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;# Fill the 2D table dp by checking if the substring is a palindrome</text>
<text text-anchor="middle" x="3341.4" y="-213.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for length in range(3, n + 1):</text>
<text text-anchor="middle" x="3341.4" y="-201.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; length + 1):</text>
<text text-anchor="middle" x="3341.4" y="-189.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;j = i + length &#45; 1</text>
<text text-anchor="middle" x="3341.4" y="-177.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[j] and dp[i + 1][j &#45; 1]:</text>
<text text-anchor="middle" x="3341.4" y="-165.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][j] = True</text>
<text text-anchor="middle" x="3341.4" y="-153.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if length &gt; max_length:</text>
<text text-anchor="middle" x="3341.4" y="-141.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;start = i</text>
<text text-anchor="middle" x="3341.4" y="-129.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_length = length</text>
<text text-anchor="middle" x="3341.4" y="-117.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="3341.4" y="-105.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;# Return the longest palindromic substring</text>
<text text-anchor="middle" x="3341.4" y="-93.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[start:start + max_length]</text>
<text text-anchor="middle" x="3341.4" y="-69.7" font-family="Arial" font-size="10.00">Time: O(n²)</text>
<text text-anchor="middle" x="3341.4" y="-57.7" font-family="Arial" font-size="10.00">Space: O(1)</text>
<text text-anchor="middle" x="3341.4" y="-45.7" font-family="Arial" font-size="10.00">Data structures: string</text>
<text text-anchor="middle" x="3341.4" y="-33.7" font-family="Arial" font-size="10.00">Concepts: iteration, conditional logic, return</text>
<text text-anchor="middle" x="3341.4" y="-21.7" font-family="Arial" font-size="10.00">values, comparison, slicing, object&#45;</text>
<text text-anchor="middle" x="3341.4" y="-9.7" font-family="Arial" font-size="10.00">oriented programming</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_2_variation_1_step_5&#45;&gt;longestPalindrome_dynamic_programming_step_2_variation_1_step_6 -->
<g id="edge27" class="edge">
<title>longestPalindrome_dynamic_programming_step_2_variation_1_step_5&#45;&gt;longestPalindrome_dynamic_programming_step_2_variation_1_step_6</title>
<path fill="none" stroke="black" d="M3341.4,-620.19C3341.4,-602.38 3341.4,-584.2 3341.4,-565.94"/>
<polygon fill="black" stroke="black" points="3344.9,-566.08 3341.4,-556.08 3337.9,-566.08 3344.9,-566.08"/>
</g>
</g>
</svg>
