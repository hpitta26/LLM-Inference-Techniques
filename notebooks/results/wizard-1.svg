<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 12.2.1 (20241206.2353)
 -->
<!-- Pages: 1 -->
<svg width="2580pt" height="1918pt"
 viewBox="0.00 0.00 2579.80 1918.40" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 1914.4)">
<polygon fill="white" stroke="none" points="-4,4 -4,-1914.4 2575.8,-1914.4 2575.8,4 -4,4"/>
<!-- longestPalindrome_root -->
<g id="node1" class="node">
<title>longestPalindrome_root</title>
<polygon fill="lightblue" stroke="black" points="2022.05,-1910.4 1820.75,-1910.4 1820.75,-1788 2022.05,-1788 2022.05,-1910.4"/>
<text text-anchor="middle" x="1921.4" y="-1893.7" font-family="Arial" font-size="10.00">longestPalindrome_root</text>
<text text-anchor="middle" x="1921.4" y="-1857.7" font-family="Arial" font-size="10.00">ROOT</text>
<text text-anchor="middle" x="1921.4" y="-1833.7" font-family="Arial" font-size="10.00">Problem analysis for longestPalindrome</text>
<text text-anchor="middle" x="1921.4" y="-1809.7" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1921.4" y="-1797.7" font-family="Arial" font-size="10.00"># Starting to solve longestPalindrome</text>
</g>
<!-- longestPalindrome_expand_around_center_step_1 -->
<g id="node2" class="node">
<title>longestPalindrome_expand_around_center_step_1</title>
<polygon fill="moccasin" stroke="black" points="1333.43,-1752 921.38,-1752 921.38,-1545.6 1333.43,-1545.6 1333.43,-1752"/>
<text text-anchor="middle" x="1127.4" y="-1735.3" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_1</text>
<text text-anchor="middle" x="1127.4" y="-1699.3" font-family="Arial" font-size="10.00">HEAD &#45; Step 1 (Expand Around Center)</text>
<text text-anchor="middle" x="1127.4" y="-1675.3" font-family="Arial" font-size="10.00">Initialize two pointers, left and right, to the</text>
<text text-anchor="middle" x="1127.4" y="-1663.3" font-family="Arial" font-size="10.00">center of the palindrome.</text>
<text text-anchor="middle" x="1127.4" y="-1639.3" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1127.4" y="-1627.3" font-family="Arial" font-size="10.00">```</text>
<text text-anchor="middle" x="1127.4" y="-1615.3" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1127.4" y="-1603.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1127.4" y="-1591.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="1127.4" y="-1579.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left = left &#160;# Initialize two pointers, left and right, to the center of the palindrome.</text>
<text text-anchor="middle" x="1127.4" y="-1567.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right = right</text>
<text text-anchor="middle" x="1127.4" y="-1555.3" font-family="Arial" font-size="10.00">```</text>
</g>
<!-- longestPalindrome_root&#45;&gt;longestPalindrome_expand_around_center_step_1 -->
<g id="edge6" class="edge">
<title>longestPalindrome_root&#45;&gt;longestPalindrome_expand_around_center_step_1</title>
<path fill="none" stroke="black" d="M1820.44,-1822.97C1701.33,-1793.21 1499.92,-1742.88 1344.84,-1704.13"/>
<polygon fill="black" stroke="black" points="1345.77,-1700.76 1335.22,-1701.73 1344.07,-1707.55 1345.77,-1700.76"/>
</g>
<!-- longestPalindrome_two_pointers_step_1 -->
<g id="node8" class="node">
<title>longestPalindrome_two_pointers_step_1</title>
<polygon fill="lightyellow" stroke="black" points="1904.93,-1734 1687.88,-1734 1687.88,-1563.6 1904.93,-1563.6 1904.93,-1734"/>
<text text-anchor="middle" x="1796.4" y="-1717.3" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_1</text>
<text text-anchor="middle" x="1796.4" y="-1681.3" font-family="Arial" font-size="10.00">HEAD &#45; Step 1 (Two Pointers)</text>
<text text-anchor="middle" x="1796.4" y="-1657.3" font-family="Arial" font-size="10.00">Initialize two pointers, `left` and `right`, to</text>
<text text-anchor="middle" x="1796.4" y="-1645.3" font-family="Arial" font-size="10.00">the middle of the string `s`.</text>
<text text-anchor="middle" x="1796.4" y="-1621.3" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1796.4" y="-1609.3" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1796.4" y="-1597.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1796.4" y="-1585.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;l = len(s) // 2</text>
<text text-anchor="middle" x="1796.4" y="-1573.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;r = l</text>
</g>
<!-- longestPalindrome_root&#45;&gt;longestPalindrome_two_pointers_step_1 -->
<g id="edge14" class="edge">
<title>longestPalindrome_root&#45;&gt;longestPalindrome_two_pointers_step_1</title>
<path fill="none" stroke="black" d="M1883.22,-1787.6C1874.5,-1773.76 1865.04,-1758.74 1855.67,-1743.87"/>
<polygon fill="black" stroke="black" points="1858.63,-1742.01 1850.34,-1735.42 1852.71,-1745.74 1858.63,-1742.01"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_1 -->
<g id="node16" class="node">
<title>longestPalindrome_dynamic_programming_step_1</title>
<polygon fill="lightyellow" stroke="black" points="2184.93,-1734 1937.88,-1734 1937.88,-1563.6 2184.93,-1563.6 2184.93,-1734"/>
<text text-anchor="middle" x="2061.4" y="-1717.3" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_1</text>
<text text-anchor="middle" x="2061.4" y="-1681.3" font-family="Arial" font-size="10.00">HEAD &#45; Step 1 (Dynamic Programming)</text>
<text text-anchor="middle" x="2061.4" y="-1657.3" font-family="Arial" font-size="10.00">Create a 2D table `dp` to store whether a</text>
<text text-anchor="middle" x="2061.4" y="-1645.3" font-family="Arial" font-size="10.00">substring is a palindrome or not.</text>
<text text-anchor="middle" x="2061.4" y="-1621.3" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2061.4" y="-1609.3" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2061.4" y="-1597.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2061.4" y="-1585.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="2061.4" y="-1573.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
</g>
<!-- longestPalindrome_root&#45;&gt;longestPalindrome_dynamic_programming_step_1 -->
<g id="edge23" class="edge">
<title>longestPalindrome_root&#45;&gt;longestPalindrome_dynamic_programming_step_1</title>
<path fill="none" stroke="black" d="M1964.17,-1787.6C1974.02,-1773.63 1984.73,-1758.45 1995.32,-1743.45"/>
<polygon fill="black" stroke="black" points="1998.11,-1745.56 2001.02,-1735.37 1992.39,-1741.53 1998.11,-1745.56"/>
</g>
<!-- longestPalindrome_expand_around_center_step_1_error_logic_error -->
<g id="node25" class="node">
<title>longestPalindrome_expand_around_center_step_1_error_logic_error</title>
<polygon fill="salmon" stroke="black" points="2525.43,-1746 2203.38,-1746 2203.38,-1551.6 2525.43,-1551.6 2525.43,-1746"/>
<text text-anchor="middle" x="2364.4" y="-1729.3" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_1_error_logic_error</text>
<text text-anchor="middle" x="2364.4" y="-1693.3" font-family="Arial" font-size="10.00">HEAD &#45; Step 1 (Expand Around Center)</text>
<text text-anchor="middle" x="2364.4" y="-1669.3" font-family="Arial" font-size="10.00">Not considering even length palindromes</text>
<text text-anchor="middle" x="2364.4" y="-1645.3" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2364.4" y="-1633.3" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2364.4" y="-1621.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2364.4" y="-1609.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="2364.4" y="-1597.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="2364.4" y="-1585.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1</text>
<text text-anchor="middle" x="2364.4" y="-1573.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="2364.4" y="-1561.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[left + 1:right]</text>
</g>
<!-- longestPalindrome_root&#45;&gt;longestPalindrome_expand_around_center_step_1_error_logic_error -->
<g id="edge24" class="edge">
<title>longestPalindrome_root&#45;&gt;longestPalindrome_expand_around_center_step_1_error_logic_error</title>
<path fill="none" stroke="black" d="M2022.54,-1817.98C2074.86,-1801 2139.16,-1778.01 2194.4,-1752 2194.89,-1751.77 2195.37,-1751.54 2195.86,-1751.31"/>
<polygon fill="black" stroke="black" points="2197.32,-1754.49 2204.79,-1746.98 2194.26,-1748.2 2197.32,-1754.49"/>
</g>
<!-- longestPalindrome_expand_around_center_step_2 -->
<g id="node3" class="node">
<title>longestPalindrome_expand_around_center_step_2</title>
<polygon fill="moccasin" stroke="black" points="858.8,-1509.6 50,-1509.6 50,-1279.2 858.8,-1279.2 858.8,-1509.6"/>
<text text-anchor="middle" x="454.4" y="-1492.9" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_2</text>
<text text-anchor="middle" x="454.4" y="-1456.9" font-family="Arial" font-size="10.00">Step 2</text>
<text text-anchor="middle" x="454.4" y="-1432.9" font-family="Arial" font-size="10.00">Expand the pointers outward, checking if the</text>
<text text-anchor="middle" x="454.4" y="-1420.9" font-family="Arial" font-size="10.00">characters at the pointers are the same and update</text>
<text text-anchor="middle" x="454.4" y="-1408.9" font-family="Arial" font-size="10.00">the maximum length and the longest palindromic</text>
<text text-anchor="middle" x="454.4" y="-1396.9" font-family="Arial" font-size="10.00">substring.</text>
<text text-anchor="middle" x="454.4" y="-1372.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="454.4" y="-1360.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="454.4" y="-1348.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="454.4" y="-1336.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="454.4" y="-1324.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = &quot;&quot; &#160;# Expand the pointers outward, checking if the characters at the pointers are the same and update the maximum length and the longest palindromic substring.</text>
<text text-anchor="middle" x="454.4" y="-1312.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="454.4" y="-1300.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = s[left:right]</text>
<text text-anchor="middle" x="454.4" y="-1288.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest</text>
</g>
<!-- longestPalindrome_expand_around_center_step_1&#45;&gt;longestPalindrome_expand_around_center_step_2 -->
<g id="edge4" class="edge">
<title>longestPalindrome_expand_around_center_step_1&#45;&gt;longestPalindrome_expand_around_center_step_2</title>
<path fill="none" stroke="black" d="M920.9,-1570.36C873.37,-1552.53 821.74,-1533.17 770.74,-1514.04"/>
<polygon fill="black" stroke="black" points="772.22,-1510.85 761.62,-1510.62 769.76,-1517.41 772.22,-1510.85"/>
</g>
<!-- longestPalindrome_expand_around_center_step_2_error_logic_error -->
<g id="node7" class="node">
<title>longestPalindrome_expand_around_center_step_2_error_logic_error</title>
<polygon fill="salmon" stroke="black" points="1378.43,-1491.6 876.38,-1491.6 876.38,-1297.2 1378.43,-1297.2 1378.43,-1491.6"/>
<text text-anchor="middle" x="1127.4" y="-1474.9" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_2_error_logic_error</text>
<text text-anchor="middle" x="1127.4" y="-1438.9" font-family="Arial" font-size="10.00">ERROR (Step 2)</text>
<text text-anchor="middle" x="1127.4" y="-1414.9" font-family="Arial" font-size="10.00">Not updating the maximum length correctly</text>
<text text-anchor="middle" x="1127.4" y="-1390.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1127.4" y="-1378.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1127.4" y="-1366.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1127.4" y="-1354.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="1127.4" y="-1342.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = &quot;&quot; &#160;</text>
<text text-anchor="middle" x="1127.4" y="-1330.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="1127.4" y="-1318.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = s[left:right] &#160;# This line should update the longest palindrome found so far, but it doesn&#39;t.</text>
<text text-anchor="middle" x="1127.4" y="-1306.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest</text>
</g>
<!-- longestPalindrome_expand_around_center_step_1&#45;&gt;longestPalindrome_expand_around_center_step_2_error_logic_error -->
<g id="edge5" class="edge">
<title>longestPalindrome_expand_around_center_step_1&#45;&gt;longestPalindrome_expand_around_center_step_2_error_logic_error</title>
<path fill="none" stroke="black" d="M1127.4,-1545.14C1127.4,-1531.25 1127.4,-1516.96 1127.4,-1502.98"/>
<polygon fill="black" stroke="black" points="1130.9,-1503.37 1127.4,-1493.37 1123.9,-1503.37 1130.9,-1503.37"/>
</g>
<!-- longestPalindrome_expand_around_center_step_3 -->
<g id="node4" class="node">
<title>longestPalindrome_expand_around_center_step_3</title>
<polygon fill="lightyellow" stroke="black" points="808.8,-1231.2 0,-1231.2 0,-988.8 808.8,-988.8 808.8,-1231.2"/>
<text text-anchor="middle" x="404.4" y="-1214.5" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_3</text>
<text text-anchor="middle" x="404.4" y="-1178.5" font-family="Arial" font-size="10.00">Step 3</text>
<text text-anchor="middle" x="404.4" y="-1154.5" font-family="Arial" font-size="10.00">Repeat step 2 until the characters at the pointers</text>
<text text-anchor="middle" x="404.4" y="-1142.5" font-family="Arial" font-size="10.00">are not the same or the pointers are out of the</text>
<text text-anchor="middle" x="404.4" y="-1130.5" font-family="Arial" font-size="10.00">string bounds.</text>
<text text-anchor="middle" x="404.4" y="-1106.5" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="404.4" y="-1094.5" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="404.4" y="-1082.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="404.4" y="-1070.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="404.4" y="-1058.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = &quot;&quot; &#160;# Expand the pointers outward, checking if the characters at the pointers are the same and update the maximum length and the longest palindromic substring.</text>
<text text-anchor="middle" x="404.4" y="-1046.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="404.4" y="-1034.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = s[left+1:right] &#160;# Update the longest palindrome found so far.</text>
<text text-anchor="middle" x="404.4" y="-1022.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1 &#160;# Move the pointers outward.</text>
<text text-anchor="middle" x="404.4" y="-1010.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="404.4" y="-998.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest</text>
</g>
<!-- longestPalindrome_expand_around_center_step_2&#45;&gt;longestPalindrome_expand_around_center_step_3 -->
<g id="edge2" class="edge">
<title>longestPalindrome_expand_around_center_step_2&#45;&gt;longestPalindrome_expand_around_center_step_3</title>
<path fill="none" stroke="black" d="M434.14,-1278.94C432.02,-1267 429.86,-1254.8 427.72,-1242.69"/>
<polygon fill="black" stroke="black" points="431.21,-1242.33 426.02,-1233.09 424.31,-1243.55 431.21,-1242.33"/>
</g>
<!-- longestPalindrome_expand_around_center_step_3_error_logic_error -->
<g id="node6" class="node">
<title>longestPalindrome_expand_around_center_step_3_error_logic_error</title>
<polygon fill="salmon" stroke="black" points="1148.42,-1225.2 826.38,-1225.2 826.38,-994.8 1148.42,-994.8 1148.42,-1225.2"/>
<text text-anchor="middle" x="987.4" y="-1208.5" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_3_error_logic_error</text>
<text text-anchor="middle" x="987.4" y="-1172.5" font-family="Arial" font-size="10.00">ERROR (Step 3)</text>
<text text-anchor="middle" x="987.4" y="-1148.5" font-family="Arial" font-size="10.00">Not iterating over all possible centers of</text>
<text text-anchor="middle" x="987.4" y="-1136.5" font-family="Arial" font-size="10.00">palindrome</text>
<text text-anchor="middle" x="987.4" y="-1112.5" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="987.4" y="-1100.5" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="987.4" y="-1088.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="987.4" y="-1076.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="987.4" y="-1064.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = &quot;&quot; &#160;</text>
<text text-anchor="middle" x="987.4" y="-1052.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0] and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="987.4" y="-1040.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = s[left+1:right] &#160;</text>
<text text-anchor="middle" x="987.4" y="-1028.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1 &#160;</text>
<text text-anchor="middle" x="987.4" y="-1016.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="987.4" y="-1004.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return expand_around_center(s, 0, 0)</text>
</g>
<!-- longestPalindrome_expand_around_center_step_2&#45;&gt;longestPalindrome_expand_around_center_step_3_error_logic_error -->
<g id="edge3" class="edge">
<title>longestPalindrome_expand_around_center_step_2&#45;&gt;longestPalindrome_expand_around_center_step_3_error_logic_error</title>
<path fill="none" stroke="black" d="M750.38,-1278.85C773.43,-1267.55 796.03,-1255.63 817.4,-1243.2 823.7,-1239.54 830.02,-1235.67 836.33,-1231.64"/>
<polygon fill="black" stroke="black" points="837.82,-1234.85 844.29,-1226.47 834,-1228.98 837.82,-1234.85"/>
</g>
<!-- longestPalindrome_expand_around_center_step_4 -->
<g id="node5" class="node">
<title>longestPalindrome_expand_around_center_step_4</title>
<polygon fill="palegreen" stroke="black" points="572.92,-940.8 235.87,-940.8 235.87,-518.4 572.92,-518.4 572.92,-940.8"/>
<text text-anchor="middle" x="404.4" y="-924.1" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_4</text>
<text text-anchor="middle" x="404.4" y="-888.1" font-family="Arial" font-size="10.00">TERMINAL (Step 4)</text>
<text text-anchor="middle" x="404.4" y="-864.1" font-family="Arial" font-size="10.00">Repeat steps 1&#45;3 for all possible centers of</text>
<text text-anchor="middle" x="404.4" y="-852.1" font-family="Arial" font-size="10.00">palindrome in the string.</text>
<text text-anchor="middle" x="404.4" y="-828.1" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="404.4" y="-816.1" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="404.4" y="-804.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="404.4" y="-792.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="404.4" y="-780.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="404.4" y="-768.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1</text>
<text text-anchor="middle" x="404.4" y="-756.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="404.4" y="-744.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[left + 1:right]</text>
<text text-anchor="middle" x="404.4" y="-732.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="404.4" y="-720.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = &quot;&quot;</text>
<text text-anchor="middle" x="404.4" y="-708.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(len(s)):</text>
<text text-anchor="middle" x="404.4" y="-696.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;palindrome1 = expand_around_center(s, i, i) &#160;# odd length</text>
<text text-anchor="middle" x="404.4" y="-684.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;palindrome2 = expand_around_center(s, i, i + 1) &#160;# even length</text>
<text text-anchor="middle" x="404.4" y="-672.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(palindrome1) &gt; len(longest):</text>
<text text-anchor="middle" x="404.4" y="-660.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = palindrome1</text>
<text text-anchor="middle" x="404.4" y="-648.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(palindrome2) &gt; len(longest):</text>
<text text-anchor="middle" x="404.4" y="-636.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = palindrome2</text>
<text text-anchor="middle" x="404.4" y="-624.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest</text>
<text text-anchor="middle" x="404.4" y="-600.1" font-family="Arial" font-size="10.00">Time: O(n)</text>
<text text-anchor="middle" x="404.4" y="-588.1" font-family="Arial" font-size="10.00">Space: O(1)</text>
<text text-anchor="middle" x="404.4" y="-576.1" font-family="Arial" font-size="10.00">Data structures: string</text>
<text text-anchor="middle" x="404.4" y="-564.1" font-family="Arial" font-size="10.00">Concepts: iteration, loops, conditional logic,</text>
<text text-anchor="middle" x="404.4" y="-552.1" font-family="Arial" font-size="10.00">helper functions, return values,</text>
<text text-anchor="middle" x="404.4" y="-540.1" font-family="Arial" font-size="10.00">comparison, compound assignment,</text>
<text text-anchor="middle" x="404.4" y="-528.1" font-family="Arial" font-size="10.00">slicing, object&#45;oriented programming</text>
</g>
<!-- longestPalindrome_expand_around_center_step_3&#45;&gt;longestPalindrome_expand_around_center_step_4 -->
<g id="edge1" class="edge">
<title>longestPalindrome_expand_around_center_step_3&#45;&gt;longestPalindrome_expand_around_center_step_4</title>
<path fill="none" stroke="black" d="M404.4,-988.49C404.4,-976.81 404.4,-964.73 404.4,-952.46"/>
<polygon fill="black" stroke="black" points="407.9,-952.66 404.4,-942.66 400.9,-952.66 407.9,-952.66"/>
</g>
<!-- longestPalindrome_two_pointers_step_2 -->
<g id="node9" class="node">
<title>longestPalindrome_two_pointers_step_2</title>
<polygon fill="moccasin" stroke="black" points="1638.68,-1503.6 1396.12,-1503.6 1396.12,-1285.2 1638.68,-1285.2 1638.68,-1503.6"/>
<text text-anchor="middle" x="1517.4" y="-1486.9" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_2</text>
<text text-anchor="middle" x="1517.4" y="-1450.9" font-family="Arial" font-size="10.00">Step 2</text>
<text text-anchor="middle" x="1517.4" y="-1426.9" font-family="Arial" font-size="10.00">Expand the `left` and `right` pointers outwards to</text>
<text text-anchor="middle" x="1517.4" y="-1414.9" font-family="Arial" font-size="10.00">find the longest palindromic substring centered at</text>
<text text-anchor="middle" x="1517.4" y="-1402.9" font-family="Arial" font-size="10.00">the current position.</text>
<text text-anchor="middle" x="1517.4" y="-1378.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1517.4" y="-1366.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1517.4" y="-1354.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1517.4" y="-1342.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;l = len(s) // 2</text>
<text text-anchor="middle" x="1517.4" y="-1330.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;r = l</text>
<text text-anchor="middle" x="1517.4" y="-1318.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:</text>
<text text-anchor="middle" x="1517.4" y="-1306.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l &#45;= 1</text>
<text text-anchor="middle" x="1517.4" y="-1294.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r += 1</text>
</g>
<!-- longestPalindrome_two_pointers_step_1&#45;&gt;longestPalindrome_two_pointers_step_2 -->
<g id="edge12" class="edge">
<title>longestPalindrome_two_pointers_step_1&#45;&gt;longestPalindrome_two_pointers_step_2</title>
<path fill="none" stroke="black" d="M1703.11,-1563.4C1684.76,-1546.8 1665.2,-1529.11 1645.93,-1511.67"/>
<polygon fill="black" stroke="black" points="1648.28,-1509.08 1638.51,-1504.97 1643.58,-1514.27 1648.28,-1509.08"/>
</g>
<!-- longestPalindrome_two_pointers_step_2_error_logic_error -->
<g id="node15" class="node">
<title>longestPalindrome_two_pointers_step_2_error_logic_error</title>
<polygon fill="salmon" stroke="black" points="1936.05,-1509.6 1656.75,-1509.6 1656.75,-1279.2 1936.05,-1279.2 1936.05,-1509.6"/>
<text text-anchor="middle" x="1796.4" y="-1492.9" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_2_error_logic_error</text>
<text text-anchor="middle" x="1796.4" y="-1456.9" font-family="Arial" font-size="10.00">ERROR (Step 2)</text>
<text text-anchor="middle" x="1796.4" y="-1432.9" font-family="Arial" font-size="10.00">Failing to check for even length</text>
<text text-anchor="middle" x="1796.4" y="-1420.9" font-family="Arial" font-size="10.00">palindromes</text>
<text text-anchor="middle" x="1796.4" y="-1408.9" font-family="Arial" font-size="10.00">(e.g., &#39;abba&#39;) by only considering</text>
<text text-anchor="middle" x="1796.4" y="-1396.9" font-family="Arial" font-size="10.00">odd length palindromes.</text>
<text text-anchor="middle" x="1796.4" y="-1372.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1796.4" y="-1360.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1796.4" y="-1348.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1796.4" y="-1336.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;l = len(s) // 2</text>
<text text-anchor="middle" x="1796.4" y="-1324.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;r = l + 1</text>
<text text-anchor="middle" x="1796.4" y="-1312.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:</text>
<text text-anchor="middle" x="1796.4" y="-1300.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l &#45;= 1</text>
<text text-anchor="middle" x="1796.4" y="-1288.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r += 1</text>
</g>
<!-- longestPalindrome_two_pointers_step_1&#45;&gt;longestPalindrome_two_pointers_step_2_error_logic_error -->
<g id="edge13" class="edge">
<title>longestPalindrome_two_pointers_step_1&#45;&gt;longestPalindrome_two_pointers_step_2_error_logic_error</title>
<path fill="none" stroke="black" d="M1796.4,-1563.4C1796.4,-1549.83 1796.4,-1535.54 1796.4,-1521.25"/>
<polygon fill="black" stroke="black" points="1799.9,-1521.31 1796.4,-1511.31 1792.9,-1521.31 1799.9,-1521.31"/>
</g>
<!-- longestPalindrome_two_pointers_step_3 -->
<g id="node10" class="node">
<title>longestPalindrome_two_pointers_step_3</title>
<polygon fill="moccasin" stroke="black" points="1465.8,-1231.2 1227,-1231.2 1227,-988.8 1465.8,-988.8 1465.8,-1231.2"/>
<text text-anchor="middle" x="1346.4" y="-1214.5" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_3</text>
<text text-anchor="middle" x="1346.4" y="-1178.5" font-family="Arial" font-size="10.00">Step 3</text>
<text text-anchor="middle" x="1346.4" y="-1154.5" font-family="Arial" font-size="10.00">Store the longest palindromic substring found so</text>
<text text-anchor="middle" x="1346.4" y="-1142.5" font-family="Arial" font-size="10.00">far in the `res` variable.</text>
<text text-anchor="middle" x="1346.4" y="-1118.5" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1346.4" y="-1106.5" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1346.4" y="-1094.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1346.4" y="-1082.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = &quot;&quot;</text>
<text text-anchor="middle" x="1346.4" y="-1070.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;l = len(s) // 2</text>
<text text-anchor="middle" x="1346.4" y="-1058.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;r = l</text>
<text text-anchor="middle" x="1346.4" y="-1046.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:</text>
<text text-anchor="middle" x="1346.4" y="-1034.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l &#45;= 1</text>
<text text-anchor="middle" x="1346.4" y="-1022.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r += 1</text>
<text text-anchor="middle" x="1346.4" y="-1010.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = s[l+1:r]</text>
<text text-anchor="middle" x="1346.4" y="-998.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return res</text>
</g>
<!-- longestPalindrome_two_pointers_step_2&#45;&gt;longestPalindrome_two_pointers_step_3 -->
<g id="edge10" class="edge">
<title>longestPalindrome_two_pointers_step_2&#45;&gt;longestPalindrome_two_pointers_step_3</title>
<path fill="none" stroke="black" d="M1451.78,-1285.02C1443.05,-1270.61 1434.02,-1255.7 1425.1,-1240.97"/>
<polygon fill="black" stroke="black" points="1428.21,-1239.35 1420.04,-1232.61 1422.22,-1242.97 1428.21,-1239.35"/>
</g>
<!-- longestPalindrome_two_pointers_step_3_error_update_error -->
<g id="node14" class="node">
<title>longestPalindrome_two_pointers_step_3_error_update_error</title>
<polygon fill="salmon" stroke="black" points="1772.55,-1237.2 1484.25,-1237.2 1484.25,-982.8 1772.55,-982.8 1772.55,-1237.2"/>
<text text-anchor="middle" x="1628.4" y="-1220.5" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_3_error_update_error</text>
<text text-anchor="middle" x="1628.4" y="-1184.5" font-family="Arial" font-size="10.00">ERROR (Step 3)</text>
<text text-anchor="middle" x="1628.4" y="-1160.5" font-family="Arial" font-size="10.00">Not updating the &#39;res&#39; variable correctly</text>
<text text-anchor="middle" x="1628.4" y="-1148.5" font-family="Arial" font-size="10.00">when a</text>
<text text-anchor="middle" x="1628.4" y="-1136.5" font-family="Arial" font-size="10.00">longer palindromic substring is found.</text>
<text text-anchor="middle" x="1628.4" y="-1112.5" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1628.4" y="-1100.5" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1628.4" y="-1088.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1628.4" y="-1076.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = &quot;&quot;</text>
<text text-anchor="middle" x="1628.4" y="-1064.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;l = len(s) // 2</text>
<text text-anchor="middle" x="1628.4" y="-1052.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;r = l</text>
<text text-anchor="middle" x="1628.4" y="-1040.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:</text>
<text text-anchor="middle" x="1628.4" y="-1028.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l &#45;= 1</text>
<text text-anchor="middle" x="1628.4" y="-1016.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r += 1</text>
<text text-anchor="middle" x="1628.4" y="-1004.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = &quot;&quot; &#160;# error: not updating res correctly</text>
<text text-anchor="middle" x="1628.4" y="-992.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[l+1:r]</text>
</g>
<!-- longestPalindrome_two_pointers_step_2&#45;&gt;longestPalindrome_two_pointers_step_3_error_update_error -->
<g id="edge11" class="edge">
<title>longestPalindrome_two_pointers_step_2&#45;&gt;longestPalindrome_two_pointers_step_3_error_update_error</title>
<path fill="none" stroke="black" d="M1560,-1285.02C1564.77,-1272.87 1569.69,-1260.38 1574.58,-1247.93"/>
<polygon fill="black" stroke="black" points="1577.73,-1249.48 1578.13,-1238.9 1571.21,-1246.92 1577.73,-1249.48"/>
</g>
<!-- longestPalindrome_two_pointers_step_4 -->
<g id="node11" class="node">
<title>longestPalindrome_two_pointers_step_4</title>
<polygon fill="moccasin" stroke="black" points="1241.93,-862.8 994.88,-862.8 994.88,-596.4 1241.93,-596.4 1241.93,-862.8"/>
<text text-anchor="middle" x="1118.4" y="-846.1" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_4</text>
<text text-anchor="middle" x="1118.4" y="-810.1" font-family="Arial" font-size="10.00">Step 4</text>
<text text-anchor="middle" x="1118.4" y="-786.1" font-family="Arial" font-size="10.00">Move the `left` and `right` pointers to the next</text>
<text text-anchor="middle" x="1118.4" y="-774.1" font-family="Arial" font-size="10.00">position in the string `s`.</text>
<text text-anchor="middle" x="1118.4" y="-750.1" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1118.4" y="-738.1" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1118.4" y="-726.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1118.4" y="-714.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = &quot;&quot;</text>
<text text-anchor="middle" x="1118.4" y="-702.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(len(s)):</text>
<text text-anchor="middle" x="1118.4" y="-690.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l = i</text>
<text text-anchor="middle" x="1118.4" y="-678.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r = i</text>
<text text-anchor="middle" x="1118.4" y="-666.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:</text>
<text text-anchor="middle" x="1118.4" y="-654.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l &#45;= 1</text>
<text text-anchor="middle" x="1118.4" y="-642.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r += 1</text>
<text text-anchor="middle" x="1118.4" y="-630.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tmp = s[l+1:r]</text>
<text text-anchor="middle" x="1118.4" y="-618.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(tmp) &gt; len(res):</text>
<text text-anchor="middle" x="1118.4" y="-606.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res = tmp</text>
</g>
<!-- longestPalindrome_two_pointers_step_3&#45;&gt;longestPalindrome_two_pointers_step_4 -->
<g id="edge8" class="edge">
<title>longestPalindrome_two_pointers_step_3&#45;&gt;longestPalindrome_two_pointers_step_4</title>
<path fill="none" stroke="black" d="M1273.79,-988.49C1251.62,-951.69 1227.03,-910.88 1204.07,-872.79"/>
<polygon fill="black" stroke="black" points="1207.22,-871.22 1199.06,-864.46 1201.22,-874.83 1207.22,-871.22"/>
</g>
<!-- longestPalindrome_two_pointers_step_4_error_loop_error -->
<g id="node13" class="node">
<title>longestPalindrome_two_pointers_step_4_error_loop_error</title>
<polygon fill="salmon" stroke="black" points="1536.93,-874.8 1259.88,-874.8 1259.88,-584.4 1536.93,-584.4 1536.93,-874.8"/>
<text text-anchor="middle" x="1398.4" y="-858.1" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_4_error_loop_error</text>
<text text-anchor="middle" x="1398.4" y="-822.1" font-family="Arial" font-size="10.00">ERROR (Step 4)</text>
<text text-anchor="middle" x="1398.4" y="-798.1" font-family="Arial" font-size="10.00">Not incrementing the &#39;i&#39; variable</text>
<text text-anchor="middle" x="1398.4" y="-786.1" font-family="Arial" font-size="10.00">correctly</text>
<text text-anchor="middle" x="1398.4" y="-774.1" font-family="Arial" font-size="10.00">causing an infinite loop.</text>
<text text-anchor="middle" x="1398.4" y="-750.1" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1398.4" y="-738.1" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1398.4" y="-726.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1398.4" y="-714.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = &quot;&quot;</text>
<text text-anchor="middle" x="1398.4" y="-702.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;i = 0</text>
<text text-anchor="middle" x="1398.4" y="-690.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;while i &lt; len(s):</text>
<text text-anchor="middle" x="1398.4" y="-678.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l = i</text>
<text text-anchor="middle" x="1398.4" y="-666.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r = i</text>
<text text-anchor="middle" x="1398.4" y="-654.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:</text>
<text text-anchor="middle" x="1398.4" y="-642.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l &#45;= 1</text>
<text text-anchor="middle" x="1398.4" y="-630.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r += 1</text>
<text text-anchor="middle" x="1398.4" y="-618.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tmp = s[l+1:r]</text>
<text text-anchor="middle" x="1398.4" y="-606.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(tmp) &gt; len(res):</text>
<text text-anchor="middle" x="1398.4" y="-594.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res = tmp</text>
</g>
<!-- longestPalindrome_two_pointers_step_3&#45;&gt;longestPalindrome_two_pointers_step_4_error_loop_error -->
<g id="edge9" class="edge">
<title>longestPalindrome_two_pointers_step_3&#45;&gt;longestPalindrome_two_pointers_step_4_error_loop_error</title>
<path fill="none" stroke="black" d="M1362.96,-988.49C1367.43,-955.99 1372.32,-920.35 1377.01,-886.22"/>
<polygon fill="black" stroke="black" points="1380.43,-887.09 1378.32,-876.7 1373.49,-886.13 1380.43,-887.09"/>
</g>
<!-- longestPalindrome_two_pointers_step_5 -->
<g id="node12" class="node">
<title>longestPalindrome_two_pointers_step_5</title>
<polygon fill="palegreen" stroke="black" points="1251.68,-452.4 985.13,-452.4 985.13,-30 1251.68,-30 1251.68,-452.4"/>
<text text-anchor="middle" x="1118.4" y="-435.7" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_5</text>
<text text-anchor="middle" x="1118.4" y="-399.7" font-family="Arial" font-size="10.00">TERMINAL (Step 5)</text>
<text text-anchor="middle" x="1118.4" y="-375.7" font-family="Arial" font-size="10.00">Repeat steps 2&#45;4 until the entire string `s` has</text>
<text text-anchor="middle" x="1118.4" y="-363.7" font-family="Arial" font-size="10.00">been processed.</text>
<text text-anchor="middle" x="1118.4" y="-339.7" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1118.4" y="-327.7" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1118.4" y="-315.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1118.4" y="-303.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = &quot;&quot;</text>
<text text-anchor="middle" x="1118.4" y="-291.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(len(s)):</text>
<text text-anchor="middle" x="1118.4" y="-279.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tmp = self.helper(s, i, i)</text>
<text text-anchor="middle" x="1118.4" y="-267.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(tmp) &gt; len(res):</text>
<text text-anchor="middle" x="1118.4" y="-255.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res = tmp</text>
<text text-anchor="middle" x="1118.4" y="-243.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tmp = self.helper(s, i, i+1)</text>
<text text-anchor="middle" x="1118.4" y="-231.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(tmp) &gt; len(res):</text>
<text text-anchor="middle" x="1118.4" y="-219.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res = tmp</text>
<text text-anchor="middle" x="1118.4" y="-207.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return res</text>
<text text-anchor="middle" x="1118.4" y="-183.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def helper(self, s, l, right):</text>
<text text-anchor="middle" x="1118.4" y="-171.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;while l &gt;= 0 and right &lt; len(s) and s[l] == s[right]:</text>
<text text-anchor="middle" x="1118.4" y="-159.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l &#45;= 1</text>
<text text-anchor="middle" x="1118.4" y="-147.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="1118.4" y="-135.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[l+1:right]</text>
<text text-anchor="middle" x="1118.4" y="-111.7" font-family="Arial" font-size="10.00">Time: O(n)</text>
<text text-anchor="middle" x="1118.4" y="-99.7" font-family="Arial" font-size="10.00">Space: O(1)</text>
<text text-anchor="middle" x="1118.4" y="-87.7" font-family="Arial" font-size="10.00">Data structures: string</text>
<text text-anchor="middle" x="1118.4" y="-75.7" font-family="Arial" font-size="10.00">Concepts: iteration, loops, conditional logic,</text>
<text text-anchor="middle" x="1118.4" y="-63.7" font-family="Arial" font-size="10.00">helper functions, return values,</text>
<text text-anchor="middle" x="1118.4" y="-51.7" font-family="Arial" font-size="10.00">comparison, compound assignment,</text>
<text text-anchor="middle" x="1118.4" y="-39.7" font-family="Arial" font-size="10.00">slicing, object&#45;oriented programming</text>
</g>
<!-- longestPalindrome_two_pointers_step_4&#45;&gt;longestPalindrome_two_pointers_step_5 -->
<g id="edge7" class="edge">
<title>longestPalindrome_two_pointers_step_4&#45;&gt;longestPalindrome_two_pointers_step_5</title>
<path fill="none" stroke="black" d="M1118.4,-596.01C1118.4,-555.17 1118.4,-509.04 1118.4,-463.9"/>
<polygon fill="black" stroke="black" points="1121.9,-463.96 1118.4,-453.96 1114.9,-463.96 1121.9,-463.96"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_2 -->
<g id="node17" class="node">
<title>longestPalindrome_dynamic_programming_step_2</title>
<polygon fill="moccasin" stroke="black" points="2200.93,-1497.6 1953.88,-1497.6 1953.88,-1291.2 2200.93,-1291.2 2200.93,-1497.6"/>
<text text-anchor="middle" x="2077.4" y="-1480.9" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_2</text>
<text text-anchor="middle" x="2077.4" y="-1444.9" font-family="Arial" font-size="10.00">Step 2</text>
<text text-anchor="middle" x="2077.4" y="-1420.9" font-family="Arial" font-size="10.00">Initialize the table `dp` with False, and set the</text>
<text text-anchor="middle" x="2077.4" y="-1408.9" font-family="Arial" font-size="10.00">diagonal elements to True since a single character</text>
<text text-anchor="middle" x="2077.4" y="-1396.9" font-family="Arial" font-size="10.00">is a palindrome.</text>
<text text-anchor="middle" x="2077.4" y="-1372.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2077.4" y="-1360.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2077.4" y="-1348.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2077.4" y="-1336.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="2077.4" y="-1324.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="2077.4" y="-1312.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="2077.4" y="-1300.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_1&#45;&gt;longestPalindrome_dynamic_programming_step_2 -->
<g id="edge21" class="edge">
<title>longestPalindrome_dynamic_programming_step_1&#45;&gt;longestPalindrome_dynamic_programming_step_2</title>
<path fill="none" stroke="black" d="M2066.75,-1563.4C2067.86,-1545.96 2069.04,-1527.31 2070.2,-1509.02"/>
<polygon fill="black" stroke="black" points="2073.68,-1509.4 2070.82,-1499.2 2066.69,-1508.96 2073.68,-1509.4"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_2_error_initialization_error -->
<g id="node24" class="node">
<title>longestPalindrome_dynamic_programming_step_2_error_initialization_error</title>
<polygon fill="salmon" stroke="black" points="2571.8,-1485.6 2219,-1485.6 2219,-1303.2 2571.8,-1303.2 2571.8,-1485.6"/>
<text text-anchor="middle" x="2395.4" y="-1468.9" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_2_error_initialization_error</text>
<text text-anchor="middle" x="2395.4" y="-1432.9" font-family="Arial" font-size="10.00">ERROR (Step 2)</text>
<text text-anchor="middle" x="2395.4" y="-1408.9" font-family="Arial" font-size="10.00">Initializing the diagonal elements with False</text>
<text text-anchor="middle" x="2395.4" y="-1384.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2395.4" y="-1372.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2395.4" y="-1360.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2395.4" y="-1348.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="2395.4" y="-1336.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="2395.4" y="-1324.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="2395.4" y="-1312.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = False</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_1&#45;&gt;longestPalindrome_dynamic_programming_step_2_error_initialization_error -->
<g id="edge22" class="edge">
<title>longestPalindrome_dynamic_programming_step_1&#45;&gt;longestPalindrome_dynamic_programming_step_2_error_initialization_error</title>
<path fill="none" stroke="black" d="M2171.27,-1563.19C2179.09,-1557.23 2186.86,-1551.32 2194.4,-1545.6 2217.03,-1528.45 2241.16,-1510.3 2264.57,-1492.77"/>
<polygon fill="black" stroke="black" points="2266.38,-1495.78 2272.29,-1486.99 2262.19,-1490.18 2266.38,-1495.78"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_3 -->
<g id="node18" class="node">
<title>longestPalindrome_dynamic_programming_step_3</title>
<polygon fill="moccasin" stroke="black" points="2093.93,-1243.2 1846.88,-1243.2 1846.88,-976.8 2093.93,-976.8 2093.93,-1243.2"/>
<text text-anchor="middle" x="1970.4" y="-1226.5" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_3</text>
<text text-anchor="middle" x="1970.4" y="-1190.5" font-family="Arial" font-size="10.00">Step 3</text>
<text text-anchor="middle" x="1970.4" y="-1166.5" font-family="Arial" font-size="10.00">Fill the table `dp` in a bottom&#45;up manner,</text>
<text text-anchor="middle" x="1970.4" y="-1154.5" font-family="Arial" font-size="10.00">checking for substrings of length 2 and then 3,</text>
<text text-anchor="middle" x="1970.4" y="-1142.5" font-family="Arial" font-size="10.00">and so on.</text>
<text text-anchor="middle" x="1970.4" y="-1118.5" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1970.4" y="-1106.5" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1970.4" y="-1094.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1970.4" y="-1082.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="1970.4" y="-1070.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="1970.4" y="-1058.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = &quot;&quot;, 1</text>
<text text-anchor="middle" x="1970.4" y="-1046.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="1970.4" y="-1034.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="1970.4" y="-1022.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i], 1</text>
<text text-anchor="middle" x="1970.4" y="-1010.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; 1)[::&#45;1]:</text>
<text text-anchor="middle" x="1970.4" y="-998.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[i + 1]:</text>
<text text-anchor="middle" x="1970.4" y="-986.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i + 1] = True</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_2&#45;&gt;longestPalindrome_dynamic_programming_step_3 -->
<g id="edge19" class="edge">
<title>longestPalindrome_dynamic_programming_step_2&#45;&gt;longestPalindrome_dynamic_programming_step_3</title>
<path fill="none" stroke="black" d="M2038.62,-1291.05C2034.04,-1278.96 2029.31,-1266.47 2024.56,-1253.95"/>
<polygon fill="black" stroke="black" points="2027.93,-1252.97 2021.12,-1244.86 2021.39,-1255.45 2027.93,-1252.97"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_3_error_logic_error -->
<g id="node23" class="node">
<title>longestPalindrome_dynamic_programming_step_3_error_logic_error</title>
<polygon fill="salmon" stroke="black" points="2434.43,-1231.2 2112.38,-1231.2 2112.38,-988.8 2434.43,-988.8 2434.43,-1231.2"/>
<text text-anchor="middle" x="2273.4" y="-1214.5" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_3_error_logic_error</text>
<text text-anchor="middle" x="2273.4" y="-1178.5" font-family="Arial" font-size="10.00">ERROR (Step 3)</text>
<text text-anchor="middle" x="2273.4" y="-1154.5" font-family="Arial" font-size="10.00">Not checking the case when length equals 2</text>
<text text-anchor="middle" x="2273.4" y="-1130.5" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2273.4" y="-1118.5" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2273.4" y="-1106.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2273.4" y="-1094.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="2273.4" y="-1082.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="2273.4" y="-1070.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = &quot;&quot;, 1</text>
<text text-anchor="middle" x="2273.4" y="-1058.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="2273.4" y="-1046.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="2273.4" y="-1034.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i], 1</text>
<text text-anchor="middle" x="2273.4" y="-1022.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; 2)[::&#45;1]:</text>
<text text-anchor="middle" x="2273.4" y="-1010.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[i + 1]:</text>
<text text-anchor="middle" x="2273.4" y="-998.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i + 1] = True</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_2&#45;&gt;longestPalindrome_dynamic_programming_step_3_error_logic_error -->
<g id="edge20" class="edge">
<title>longestPalindrome_dynamic_programming_step_2&#45;&gt;longestPalindrome_dynamic_programming_step_3_error_logic_error</title>
<path fill="none" stroke="black" d="M2148.44,-1291.05C2159.81,-1274.67 2171.7,-1257.53 2183.44,-1240.61"/>
<polygon fill="black" stroke="black" points="2186.25,-1242.7 2189.08,-1232.49 2180.5,-1238.71 2186.25,-1242.7"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_4 -->
<g id="node19" class="node">
<title>longestPalindrome_dynamic_programming_step_4</title>
<polygon fill="moccasin" stroke="black" points="1845.93,-862.8 1598.88,-862.8 1598.88,-596.4 1845.93,-596.4 1845.93,-862.8"/>
<text text-anchor="middle" x="1722.4" y="-846.1" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_4</text>
<text text-anchor="middle" x="1722.4" y="-810.1" font-family="Arial" font-size="10.00">Step 4</text>
<text text-anchor="middle" x="1722.4" y="-786.1" font-family="Arial" font-size="10.00">For each substring, check if it&#39;s equal to its</text>
<text text-anchor="middle" x="1722.4" y="-774.1" font-family="Arial" font-size="10.00">reverse, and update the table `dp` accordingly.</text>
<text text-anchor="middle" x="1722.4" y="-750.1" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1722.4" y="-738.1" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1722.4" y="-726.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1722.4" y="-714.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="1722.4" y="-702.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="1722.4" y="-690.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = &quot;&quot;, 1</text>
<text text-anchor="middle" x="1722.4" y="-678.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="1722.4" y="-666.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="1722.4" y="-654.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i], 1</text>
<text text-anchor="middle" x="1722.4" y="-642.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; 1)[::&#45;1]:</text>
<text text-anchor="middle" x="1722.4" y="-630.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[i + 1]:</text>
<text text-anchor="middle" x="1722.4" y="-618.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i + 1] = True</text>
<text text-anchor="middle" x="1722.4" y="-606.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i:i + 2], 2</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_3&#45;&gt;longestPalindrome_dynamic_programming_step_4 -->
<g id="edge17" class="edge">
<title>longestPalindrome_dynamic_programming_step_3&#45;&gt;longestPalindrome_dynamic_programming_step_4</title>
<path fill="none" stroke="black" d="M1879.25,-976.62C1871.13,-964.55 1863.08,-952.47 1855.4,-940.8 1840.95,-918.84 1825.86,-895.44 1811.24,-872.53"/>
<polygon fill="black" stroke="black" points="1814.37,-870.92 1806.04,-864.37 1808.46,-874.68 1814.37,-870.92"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_4_error_logic_error -->
<g id="node22" class="node">
<title>longestPalindrome_dynamic_programming_step_4_error_logic_error</title>
<polygon fill="salmon" stroke="black" points="2186.43,-880.8 1864.38,-880.8 1864.38,-578.4 2186.43,-578.4 2186.43,-880.8"/>
<text text-anchor="middle" x="2025.4" y="-864.1" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_4_error_logic_error</text>
<text text-anchor="middle" x="2025.4" y="-828.1" font-family="Arial" font-size="10.00">ERROR (Step 4)</text>
<text text-anchor="middle" x="2025.4" y="-804.1" font-family="Arial" font-size="10.00">Updating longest and l variables only when</text>
<text text-anchor="middle" x="2025.4" y="-792.1" font-family="Arial" font-size="10.00">dp[i][j] is True</text>
<text text-anchor="middle" x="2025.4" y="-768.1" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2025.4" y="-756.1" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2025.4" y="-744.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2025.4" y="-732.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="2025.4" y="-720.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="2025.4" y="-708.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = &quot;&quot;, 1</text>
<text text-anchor="middle" x="2025.4" y="-696.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="2025.4" y="-684.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="2025.4" y="-672.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="2025.4" y="-660.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if dp[i][i]:</text>
<text text-anchor="middle" x="2025.4" y="-648.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i], 1</text>
<text text-anchor="middle" x="2025.4" y="-636.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; 1)[::&#45;1]:</text>
<text text-anchor="middle" x="2025.4" y="-624.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[i + 1]:</text>
<text text-anchor="middle" x="2025.4" y="-612.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i + 1] = True</text>
<text text-anchor="middle" x="2025.4" y="-600.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if dp[i][i + 1]:</text>
<text text-anchor="middle" x="2025.4" y="-588.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i:i + 2], 2</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_3&#45;&gt;longestPalindrome_dynamic_programming_step_4_error_logic_error -->
<g id="edge18" class="edge">
<title>longestPalindrome_dynamic_programming_step_3&#45;&gt;longestPalindrome_dynamic_programming_step_4_error_logic_error</title>
<path fill="none" stroke="black" d="M1989.67,-976.39C1993.63,-949.21 1997.82,-920.32 2001.9,-892.25"/>
<polygon fill="black" stroke="black" points="2005.33,-893.02 2003.3,-882.62 1998.4,-892.02 2005.33,-893.02"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_5 -->
<g id="node20" class="node">
<title>longestPalindrome_dynamic_programming_step_5</title>
<polygon fill="palegreen" stroke="black" points="1587.93,-482.4 1340.88,-482.4 1340.88,0 1587.93,0 1587.93,-482.4"/>
<text text-anchor="middle" x="1464.4" y="-465.7" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_5</text>
<text text-anchor="middle" x="1464.4" y="-429.7" font-family="Arial" font-size="10.00">TERMINAL (Step 5)</text>
<text text-anchor="middle" x="1464.4" y="-405.7" font-family="Arial" font-size="10.00">Use the table `dp` to find the longest palindromic</text>
<text text-anchor="middle" x="1464.4" y="-393.7" font-family="Arial" font-size="10.00">substring.</text>
<text text-anchor="middle" x="1464.4" y="-369.7" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1464.4" y="-357.7" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1464.4" y="-345.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1464.4" y="-333.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="1464.4" y="-321.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="1464.4" y="-309.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = &quot;&quot;, 0</text>
<text text-anchor="middle" x="1464.4" y="-297.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="1464.4" y="-285.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="1464.4" y="-273.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="1464.4" y="-261.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i], 1</text>
<text text-anchor="middle" x="1464.4" y="-249.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="1464.4" y="-237.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; 1)[::&#45;1]:</text>
<text text-anchor="middle" x="1464.4" y="-225.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[i + 1]:</text>
<text text-anchor="middle" x="1464.4" y="-213.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i + 1] = True</text>
<text text-anchor="middle" x="1464.4" y="-201.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i:i + 2], 2</text>
<text text-anchor="middle" x="1464.4" y="-189.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="1464.4" y="-177.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for length in range(3, n + 1):</text>
<text text-anchor="middle" x="1464.4" y="-165.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; length + 1)[::&#45;1]:</text>
<text text-anchor="middle" x="1464.4" y="-153.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;j = i + length &#45; 1</text>
<text text-anchor="middle" x="1464.4" y="-141.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[j] and dp[i + 1][j &#45; 1]:</text>
<text text-anchor="middle" x="1464.4" y="-129.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][j] = True</text>
<text text-anchor="middle" x="1464.4" y="-117.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i:j + 1], length</text>
<text text-anchor="middle" x="1464.4" y="-105.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="1464.4" y="-93.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest</text>
<text text-anchor="middle" x="1464.4" y="-69.7" font-family="Arial" font-size="10.00">Time: O(n²)</text>
<text text-anchor="middle" x="1464.4" y="-57.7" font-family="Arial" font-size="10.00">Space: O(1)</text>
<text text-anchor="middle" x="1464.4" y="-45.7" font-family="Arial" font-size="10.00">Data structures: string</text>
<text text-anchor="middle" x="1464.4" y="-33.7" font-family="Arial" font-size="10.00">Concepts: iteration, conditional logic, return</text>
<text text-anchor="middle" x="1464.4" y="-21.7" font-family="Arial" font-size="10.00">values, comparison, slicing, object&#45;</text>
<text text-anchor="middle" x="1464.4" y="-9.7" font-family="Arial" font-size="10.00">oriented programming</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_4&#45;&gt;longestPalindrome_dynamic_programming_step_5 -->
<g id="edge15" class="edge">
<title>longestPalindrome_dynamic_programming_step_4&#45;&gt;longestPalindrome_dynamic_programming_step_5</title>
<path fill="none" stroke="black" d="M1652.07,-596.01C1633.92,-561.8 1613.81,-523.87 1593.68,-485.93"/>
<polygon fill="black" stroke="black" points="1596.77,-484.29 1588.99,-477.1 1590.59,-487.57 1596.77,-484.29"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_5_error_off&#45;by&#45;one -->
<g id="node21" class="node">
<title>longestPalindrome_dynamic_programming_step_5_error_off&#45;by&#45;one</title>
<polygon fill="salmon" stroke="black" points="1925.3,-440.4 1605.5,-440.4 1605.5,-42 1925.3,-42 1925.3,-440.4"/>
<text text-anchor="middle" x="1765.4" y="-423.7" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_5_error_off&#45;by&#45;one</text>
<text text-anchor="middle" x="1765.4" y="-387.7" font-family="Arial" font-size="10.00">ERROR (Step 5)</text>
<text text-anchor="middle" x="1765.4" y="-363.7" font-family="Arial" font-size="10.00">Not considering all possible substrings while</text>
<text text-anchor="middle" x="1765.4" y="-351.7" font-family="Arial" font-size="10.00">finding the longest palindromic substring</text>
<text text-anchor="middle" x="1765.4" y="-327.7" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1765.4" y="-315.7" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1765.4" y="-303.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1765.4" y="-291.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="1765.4" y="-279.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="1765.4" y="-267.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = &quot;&quot;, 0</text>
<text text-anchor="middle" x="1765.4" y="-255.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="1765.4" y="-243.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="1765.4" y="-231.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="1765.4" y="-219.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i], 1</text>
<text text-anchor="middle" x="1765.4" y="-207.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="1765.4" y="-195.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; 1)[::&#45;1]:</text>
<text text-anchor="middle" x="1765.4" y="-183.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[i + 1]:</text>
<text text-anchor="middle" x="1765.4" y="-171.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i + 1] = True</text>
<text text-anchor="middle" x="1765.4" y="-159.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i:i + 2], 2</text>
<text text-anchor="middle" x="1765.4" y="-147.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="1765.4" y="-135.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for length in range(3, n):</text>
<text text-anchor="middle" x="1765.4" y="-123.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; length + 1)[::&#45;1]:</text>
<text text-anchor="middle" x="1765.4" y="-111.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;j = i + length &#45; 1</text>
<text text-anchor="middle" x="1765.4" y="-99.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[j] and dp[i + 1][j &#45; 1]:</text>
<text text-anchor="middle" x="1765.4" y="-87.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][j] = True</text>
<text text-anchor="middle" x="1765.4" y="-75.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i:j + 1], length</text>
<text text-anchor="middle" x="1765.4" y="-63.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="1765.4" y="-51.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_4&#45;&gt;longestPalindrome_dynamic_programming_step_5_error_off&#45;by&#45;one -->
<g id="edge16" class="edge">
<title>longestPalindrome_dynamic_programming_step_4&#45;&gt;longestPalindrome_dynamic_programming_step_5_error_off&#45;by&#45;one</title>
<path fill="none" stroke="black" d="M1734.12,-596.01C1738.04,-551.65 1742.52,-501.04 1746.83,-452.25"/>
<polygon fill="black" stroke="black" points="1750.31,-452.66 1747.7,-442.39 1743.33,-452.05 1750.31,-452.66"/>
</g>
</g>
</svg>
