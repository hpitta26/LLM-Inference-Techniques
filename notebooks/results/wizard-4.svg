<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 12.2.1 (20241206.2353)
 -->
<!-- Pages: 1 -->
<svg width="5099pt" height="2847pt"
 viewBox="0.00 0.00 5099.18 2847.20" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 2843.2)">
<polygon fill="white" stroke="none" points="-4,4 -4,-2843.2 5095.18,-2843.2 5095.18,4 -4,4"/>
<!-- longestPalindrome_root -->
<g id="node1" class="node">
<title>longestPalindrome_root</title>
<polygon fill="lightblue" stroke="black" points="3547.05,-2839.2 3345.75,-2839.2 3345.75,-2716.8 3547.05,-2716.8 3547.05,-2839.2"/>
<text text-anchor="middle" x="3446.4" y="-2822.5" font-family="Arial" font-size="10.00">longestPalindrome_root</text>
<text text-anchor="middle" x="3446.4" y="-2786.5" font-family="Arial" font-size="10.00">ROOT</text>
<text text-anchor="middle" x="3446.4" y="-2762.5" font-family="Arial" font-size="10.00">Problem analysis for longestPalindrome</text>
<text text-anchor="middle" x="3446.4" y="-2738.5" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="3446.4" y="-2726.5" font-family="Arial" font-size="10.00"># Starting to solve longestPalindrome</text>
</g>
<!-- longestPalindrome_expand_around_center_step_1 -->
<g id="node2" class="node">
<title>longestPalindrome_expand_around_center_step_1</title>
<polygon fill="moccasin" stroke="black" points="1701.43,-2680.8 1289.38,-2680.8 1289.38,-2474.4 1701.43,-2474.4 1701.43,-2680.8"/>
<text text-anchor="middle" x="1495.4" y="-2664.1" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_1</text>
<text text-anchor="middle" x="1495.4" y="-2628.1" font-family="Arial" font-size="10.00">HEAD &#45; Step 1 (Expand Around Center)</text>
<text text-anchor="middle" x="1495.4" y="-2604.1" font-family="Arial" font-size="10.00">Initialize two pointers, left and right, to the</text>
<text text-anchor="middle" x="1495.4" y="-2592.1" font-family="Arial" font-size="10.00">center of the palindrome.</text>
<text text-anchor="middle" x="1495.4" y="-2568.1" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1495.4" y="-2556.1" font-family="Arial" font-size="10.00">```</text>
<text text-anchor="middle" x="1495.4" y="-2544.1" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1495.4" y="-2532.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1495.4" y="-2520.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="1495.4" y="-2508.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left = left &#160;# Initialize two pointers, left and right, to the center of the palindrome.</text>
<text text-anchor="middle" x="1495.4" y="-2496.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right = right</text>
<text text-anchor="middle" x="1495.4" y="-2484.1" font-family="Arial" font-size="10.00">```</text>
</g>
<!-- longestPalindrome_root&#45;&gt;longestPalindrome_expand_around_center_step_1 -->
<g id="edge14" class="edge">
<title>longestPalindrome_root&#45;&gt;longestPalindrome_expand_around_center_step_1</title>
<path fill="none" stroke="black" d="M3345.39,-2767.81C3163.67,-2751.17 2769.58,-2714.65 2437.4,-2680.8 2188.89,-2655.47 1903.76,-2624.23 1712.89,-2603.01"/>
<polygon fill="black" stroke="black" points="1713.42,-2599.55 1703.1,-2601.92 1712.65,-2606.5 1713.42,-2599.55"/>
</g>
<!-- longestPalindrome_two_pointers_step_1 -->
<g id="node16" class="node">
<title>longestPalindrome_two_pointers_step_1</title>
<polygon fill="lightyellow" stroke="black" points="2663.93,-2662.8 2446.88,-2662.8 2446.88,-2492.4 2663.93,-2492.4 2663.93,-2662.8"/>
<text text-anchor="middle" x="2555.4" y="-2646.1" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_1</text>
<text text-anchor="middle" x="2555.4" y="-2610.1" font-family="Arial" font-size="10.00">HEAD &#45; Step 1 (Two Pointers)</text>
<text text-anchor="middle" x="2555.4" y="-2586.1" font-family="Arial" font-size="10.00">Initialize two pointers, `left` and `right`, to</text>
<text text-anchor="middle" x="2555.4" y="-2574.1" font-family="Arial" font-size="10.00">the middle of the string `s`.</text>
<text text-anchor="middle" x="2555.4" y="-2550.1" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2555.4" y="-2538.1" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2555.4" y="-2526.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2555.4" y="-2514.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;l = len(s) // 2</text>
<text text-anchor="middle" x="2555.4" y="-2502.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;r = l</text>
</g>
<!-- longestPalindrome_root&#45;&gt;longestPalindrome_two_pointers_step_1 -->
<g id="edge26" class="edge">
<title>longestPalindrome_root&#45;&gt;longestPalindrome_two_pointers_step_1</title>
<path fill="none" stroke="black" d="M3345.49,-2754.53C3180.23,-2717.73 2852.59,-2644.78 2675.58,-2605.36"/>
<polygon fill="black" stroke="black" points="2676.4,-2601.96 2665.88,-2603.2 2674.88,-2608.79 2676.4,-2601.96"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_1 -->
<g id="node28" class="node">
<title>longestPalindrome_dynamic_programming_step_1</title>
<polygon fill="lightyellow" stroke="black" points="3569.93,-2662.8 3322.88,-2662.8 3322.88,-2492.4 3569.93,-2492.4 3569.93,-2662.8"/>
<text text-anchor="middle" x="3446.4" y="-2646.1" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_1</text>
<text text-anchor="middle" x="3446.4" y="-2610.1" font-family="Arial" font-size="10.00">HEAD &#45; Step 1 (Dynamic Programming)</text>
<text text-anchor="middle" x="3446.4" y="-2586.1" font-family="Arial" font-size="10.00">Create a 2D table `dp` to store whether a</text>
<text text-anchor="middle" x="3446.4" y="-2574.1" font-family="Arial" font-size="10.00">substring is a palindrome or not.</text>
<text text-anchor="middle" x="3446.4" y="-2550.1" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="3446.4" y="-2538.1" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="3446.4" y="-2526.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="3446.4" y="-2514.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="3446.4" y="-2502.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
</g>
<!-- longestPalindrome_root&#45;&gt;longestPalindrome_dynamic_programming_step_1 -->
<g id="edge41" class="edge">
<title>longestPalindrome_root&#45;&gt;longestPalindrome_dynamic_programming_step_1</title>
<path fill="none" stroke="black" d="M3446.4,-2716.4C3446.4,-2703.09 3446.4,-2688.68 3446.4,-2674.37"/>
<polygon fill="black" stroke="black" points="3449.9,-2674.45 3446.4,-2664.45 3442.9,-2674.45 3449.9,-2674.45"/>
</g>
<!-- longestPalindrome_expand_around_center_step_1_error_logic_error -->
<g id="node43" class="node">
<title>longestPalindrome_expand_around_center_step_1_error_logic_error</title>
<polygon fill="salmon" stroke="black" points="3910.43,-2674.8 3588.38,-2674.8 3588.38,-2480.4 3910.43,-2480.4 3910.43,-2674.8"/>
<text text-anchor="middle" x="3749.4" y="-2658.1" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_1_error_logic_error</text>
<text text-anchor="middle" x="3749.4" y="-2622.1" font-family="Arial" font-size="10.00">HEAD &#45; Step 1 (Expand Around Center)</text>
<text text-anchor="middle" x="3749.4" y="-2598.1" font-family="Arial" font-size="10.00">Not considering even length palindromes</text>
<text text-anchor="middle" x="3749.4" y="-2574.1" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="3749.4" y="-2562.1" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="3749.4" y="-2550.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="3749.4" y="-2538.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="3749.4" y="-2526.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="3749.4" y="-2514.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1</text>
<text text-anchor="middle" x="3749.4" y="-2502.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="3749.4" y="-2490.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[left + 1:right]</text>
</g>
<!-- longestPalindrome_root&#45;&gt;longestPalindrome_expand_around_center_step_1_error_logic_error -->
<g id="edge42" class="edge">
<title>longestPalindrome_root&#45;&gt;longestPalindrome_expand_around_center_step_1_error_logic_error</title>
<path fill="none" stroke="black" d="M3538.96,-2716.4C3555.93,-2705.28 3574.06,-2693.41 3592.31,-2681.46"/>
<polygon fill="black" stroke="black" points="3594.14,-2684.44 3600.59,-2676.04 3590.31,-2678.59 3594.14,-2684.44"/>
</g>
<!-- longestPalindrome_expand_around_center_step_1_variation_1_step_1 -->
<g id="node44" class="node">
<title>longestPalindrome_expand_around_center_step_1_variation_1_step_1</title>
<polygon fill="lightyellow" stroke="black" points="4602.17,-2668.8 4236.62,-2668.8 4236.62,-2486.4 4602.17,-2486.4 4602.17,-2668.8"/>
<text text-anchor="middle" x="4419.4" y="-2652.1" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_1_variation_1_step_1</text>
<text text-anchor="middle" x="4419.4" y="-2616.1" font-family="Arial" font-size="10.00">HEAD &#45; Step 1 (Expand Around Center Step 1 Variation 1)</text>
<text text-anchor="middle" x="4419.4" y="-2592.1" font-family="Arial" font-size="10.00">Initialize two pointers, left and right, to the</text>
<text text-anchor="middle" x="4419.4" y="-2580.1" font-family="Arial" font-size="10.00">center of the palindrome.</text>
<text text-anchor="middle" x="4419.4" y="-2556.1" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="4419.4" y="-2544.1" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="4419.4" y="-2532.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="4419.4" y="-2520.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(left, right):</text>
<text text-anchor="middle" x="4419.4" y="-2508.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="4419.4" y="-2496.1" font-family="Arial" font-size="10.00"># Step 1: Initialize two pointers, left and right, to the center of the palindrome.</text>
</g>
<!-- longestPalindrome_root&#45;&gt;longestPalindrome_expand_around_center_step_1_variation_1_step_1 -->
<g id="edge47" class="edge">
<title>longestPalindrome_root&#45;&gt;longestPalindrome_expand_around_center_step_1_variation_1_step_1</title>
<path fill="none" stroke="black" d="M3547.44,-2756.48C3643.21,-2737.02 3791.1,-2706.96 3919.4,-2680.8 4020.24,-2660.24 4132.5,-2637.3 4225.07,-2618.37"/>
<polygon fill="black" stroke="black" points="4225.68,-2621.82 4234.77,-2616.38 4224.27,-2614.96 4225.68,-2621.82"/>
</g>
<!-- longestPalindrome_expand_around_center_step_2 -->
<g id="node3" class="node">
<title>longestPalindrome_expand_around_center_step_2</title>
<polygon fill="moccasin" stroke="black" points="984.8,-2432.4 176,-2432.4 176,-2202 984.8,-2202 984.8,-2432.4"/>
<text text-anchor="middle" x="580.4" y="-2415.7" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_2</text>
<text text-anchor="middle" x="580.4" y="-2379.7" font-family="Arial" font-size="10.00">Step 2</text>
<text text-anchor="middle" x="580.4" y="-2355.7" font-family="Arial" font-size="10.00">Expand the pointers outward, checking if the</text>
<text text-anchor="middle" x="580.4" y="-2343.7" font-family="Arial" font-size="10.00">characters at the pointers are the same and update</text>
<text text-anchor="middle" x="580.4" y="-2331.7" font-family="Arial" font-size="10.00">the maximum length and the longest palindromic</text>
<text text-anchor="middle" x="580.4" y="-2319.7" font-family="Arial" font-size="10.00">substring.</text>
<text text-anchor="middle" x="580.4" y="-2295.7" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="580.4" y="-2283.7" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="580.4" y="-2271.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="580.4" y="-2259.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="580.4" y="-2247.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = &quot;&quot; &#160;# Expand the pointers outward, checking if the characters at the pointers are the same and update the maximum length and the longest palindromic substring.</text>
<text text-anchor="middle" x="580.4" y="-2235.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="580.4" y="-2223.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = s[left:right]</text>
<text text-anchor="middle" x="580.4" y="-2211.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest</text>
</g>
<!-- longestPalindrome_expand_around_center_step_1&#45;&gt;longestPalindrome_expand_around_center_step_2 -->
<g id="edge8" class="edge">
<title>longestPalindrome_expand_around_center_step_1&#45;&gt;longestPalindrome_expand_around_center_step_2</title>
<path fill="none" stroke="black" d="M1289.13,-2520.54C1198.35,-2495.68 1090.49,-2465.89 993.4,-2438.4 990.57,-2437.6 987.73,-2436.79 984.88,-2435.99"/>
<polygon fill="black" stroke="black" points="985.88,-2432.63 975.3,-2433.26 983.96,-2439.36 985.88,-2432.63"/>
</g>
<!-- longestPalindrome_expand_around_center_step_2_error_logic_error -->
<g id="node11" class="node">
<title>longestPalindrome_expand_around_center_step_2_error_logic_error</title>
<polygon fill="salmon" stroke="black" points="1504.43,-2414.4 1002.38,-2414.4 1002.38,-2220 1504.43,-2220 1504.43,-2414.4"/>
<text text-anchor="middle" x="1253.4" y="-2397.7" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_2_error_logic_error</text>
<text text-anchor="middle" x="1253.4" y="-2361.7" font-family="Arial" font-size="10.00">ERROR (Step 2)</text>
<text text-anchor="middle" x="1253.4" y="-2337.7" font-family="Arial" font-size="10.00">Not updating the maximum length correctly</text>
<text text-anchor="middle" x="1253.4" y="-2313.7" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1253.4" y="-2301.7" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1253.4" y="-2289.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1253.4" y="-2277.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="1253.4" y="-2265.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = &quot;&quot; &#160;</text>
<text text-anchor="middle" x="1253.4" y="-2253.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="1253.4" y="-2241.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = s[left:right] &#160;# This line should update the longest palindrome found so far, but it doesn&#39;t.</text>
<text text-anchor="middle" x="1253.4" y="-2229.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest</text>
</g>
<!-- longestPalindrome_expand_around_center_step_1&#45;&gt;longestPalindrome_expand_around_center_step_2_error_logic_error -->
<g id="edge9" class="edge">
<title>longestPalindrome_expand_around_center_step_1&#45;&gt;longestPalindrome_expand_around_center_step_2_error_logic_error</title>
<path fill="none" stroke="black" d="M1399.41,-2474.1C1383.64,-2457.27 1367.29,-2439.81 1351.48,-2422.92"/>
<polygon fill="black" stroke="black" points="1354.19,-2420.7 1344.8,-2415.79 1349.08,-2425.48 1354.19,-2420.7"/>
</g>
<!-- longestPalindrome_expand_around_center_step_2_variation_1_step_2 -->
<g id="node12" class="node">
<title>longestPalindrome_expand_around_center_step_2_variation_1_step_2</title>
<polygon fill="lightyellow" stroke="black" points="1952.43,-2408.4 1522.38,-2408.4 1522.38,-2226 1952.43,-2226 1952.43,-2408.4"/>
<text text-anchor="middle" x="1737.4" y="-2391.7" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_2_variation_1_step_2</text>
<text text-anchor="middle" x="1737.4" y="-2355.7" font-family="Arial" font-size="10.00">Step 2</text>
<text text-anchor="middle" x="1737.4" y="-2331.7" font-family="Arial" font-size="10.00">Expand the palindrome while the characters at the</text>
<text text-anchor="middle" x="1737.4" y="-2319.7" font-family="Arial" font-size="10.00">left and right pointers are equal.</text>
<text text-anchor="middle" x="1737.4" y="-2295.7" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1737.4" y="-2283.7" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1737.4" y="-2271.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1737.4" y="-2259.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="1737.4" y="-2247.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="1737.4" y="-2235.7" font-family="Arial" font-size="10.00"># Step 1: Expand the palindrome while the characters at the left and right pointers are equal.</text>
</g>
<!-- longestPalindrome_expand_around_center_step_1&#45;&gt;longestPalindrome_expand_around_center_step_2_variation_1_step_2 -->
<g id="edge13" class="edge">
<title>longestPalindrome_expand_around_center_step_1&#45;&gt;longestPalindrome_expand_around_center_step_2_variation_1_step_2</title>
<path fill="none" stroke="black" d="M1591.39,-2474.1C1608.98,-2455.32 1627.3,-2435.76 1644.79,-2417.08"/>
<polygon fill="black" stroke="black" points="1647.18,-2419.66 1651.46,-2409.96 1642.07,-2414.87 1647.18,-2419.66"/>
</g>
<!-- longestPalindrome_expand_around_center_step_3 -->
<g id="node4" class="node">
<title>longestPalindrome_expand_around_center_step_3</title>
<polygon fill="lightyellow" stroke="black" points="808.8,-2136 0,-2136 0,-1893.6 808.8,-1893.6 808.8,-2136"/>
<text text-anchor="middle" x="404.4" y="-2119.3" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_3</text>
<text text-anchor="middle" x="404.4" y="-2083.3" font-family="Arial" font-size="10.00">Step 3</text>
<text text-anchor="middle" x="404.4" y="-2059.3" font-family="Arial" font-size="10.00">Repeat step 2 until the characters at the pointers</text>
<text text-anchor="middle" x="404.4" y="-2047.3" font-family="Arial" font-size="10.00">are not the same or the pointers are out of the</text>
<text text-anchor="middle" x="404.4" y="-2035.3" font-family="Arial" font-size="10.00">string bounds.</text>
<text text-anchor="middle" x="404.4" y="-2011.3" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="404.4" y="-1999.3" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="404.4" y="-1987.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="404.4" y="-1975.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="404.4" y="-1963.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = &quot;&quot; &#160;# Expand the pointers outward, checking if the characters at the pointers are the same and update the maximum length and the longest palindromic substring.</text>
<text text-anchor="middle" x="404.4" y="-1951.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="404.4" y="-1939.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = s[left+1:right] &#160;# Update the longest palindrome found so far.</text>
<text text-anchor="middle" x="404.4" y="-1927.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1 &#160;# Move the pointers outward.</text>
<text text-anchor="middle" x="404.4" y="-1915.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="404.4" y="-1903.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest</text>
</g>
<!-- longestPalindrome_expand_around_center_step_2&#45;&gt;longestPalindrome_expand_around_center_step_3 -->
<g id="edge6" class="edge">
<title>longestPalindrome_expand_around_center_step_2&#45;&gt;longestPalindrome_expand_around_center_step_3</title>
<path fill="none" stroke="black" d="M513.36,-2201.77C502.74,-2183.64 491.68,-2164.78 480.86,-2146.31"/>
<polygon fill="black" stroke="black" points="483.9,-2144.57 475.82,-2137.71 477.86,-2148.1 483.9,-2144.57"/>
</g>
<!-- longestPalindrome_expand_around_center_step_3_error_logic_error -->
<g id="node10" class="node">
<title>longestPalindrome_expand_around_center_step_3_error_logic_error</title>
<polygon fill="salmon" stroke="black" points="1148.43,-2130 826.38,-2130 826.38,-1899.6 1148.43,-1899.6 1148.43,-2130"/>
<text text-anchor="middle" x="987.4" y="-2113.3" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_3_error_logic_error</text>
<text text-anchor="middle" x="987.4" y="-2077.3" font-family="Arial" font-size="10.00">ERROR (Step 3)</text>
<text text-anchor="middle" x="987.4" y="-2053.3" font-family="Arial" font-size="10.00">Not iterating over all possible centers of</text>
<text text-anchor="middle" x="987.4" y="-2041.3" font-family="Arial" font-size="10.00">palindrome</text>
<text text-anchor="middle" x="987.4" y="-2017.3" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="987.4" y="-2005.3" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="987.4" y="-1993.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="987.4" y="-1981.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="987.4" y="-1969.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = &quot;&quot; &#160;</text>
<text text-anchor="middle" x="987.4" y="-1957.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0] and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="987.4" y="-1945.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = s[left+1:right] &#160;</text>
<text text-anchor="middle" x="987.4" y="-1933.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1 &#160;</text>
<text text-anchor="middle" x="987.4" y="-1921.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="987.4" y="-1909.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return expand_around_center(s, 0, 0)</text>
</g>
<!-- longestPalindrome_expand_around_center_step_2&#45;&gt;longestPalindrome_expand_around_center_step_3_error_logic_error -->
<g id="edge7" class="edge">
<title>longestPalindrome_expand_around_center_step_2&#45;&gt;longestPalindrome_expand_around_center_step_3_error_logic_error</title>
<path fill="none" stroke="black" d="M759.31,-2201.63C779.15,-2187.94 798.87,-2173.89 817.4,-2160 827,-2152.8 836.77,-2145.23 846.53,-2137.49"/>
<polygon fill="black" stroke="black" points="848.68,-2140.26 854.3,-2131.28 844.3,-2134.79 848.68,-2140.26"/>
</g>
<!-- longestPalindrome_expand_around_center_step_4 -->
<g id="node5" class="node">
<title>longestPalindrome_expand_around_center_step_4</title>
<polygon fill="palegreen" stroke="black" points="407.93,-1833.6 70.88,-1833.6 70.88,-1411.2 407.93,-1411.2 407.93,-1833.6"/>
<text text-anchor="middle" x="239.4" y="-1816.9" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_4</text>
<text text-anchor="middle" x="239.4" y="-1780.9" font-family="Arial" font-size="10.00">TERMINAL (Step 4)</text>
<text text-anchor="middle" x="239.4" y="-1756.9" font-family="Arial" font-size="10.00">Repeat steps 1&#45;3 for all possible centers of</text>
<text text-anchor="middle" x="239.4" y="-1744.9" font-family="Arial" font-size="10.00">palindrome in the string.</text>
<text text-anchor="middle" x="239.4" y="-1720.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="239.4" y="-1708.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="239.4" y="-1696.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="239.4" y="-1684.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="239.4" y="-1672.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="239.4" y="-1660.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1</text>
<text text-anchor="middle" x="239.4" y="-1648.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="239.4" y="-1636.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[left + 1:right]</text>
<text text-anchor="middle" x="239.4" y="-1624.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="239.4" y="-1612.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = &quot;&quot;</text>
<text text-anchor="middle" x="239.4" y="-1600.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(len(s)):</text>
<text text-anchor="middle" x="239.4" y="-1588.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;palindrome1 = expand_around_center(s, i, i) &#160;# odd length</text>
<text text-anchor="middle" x="239.4" y="-1576.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;palindrome2 = expand_around_center(s, i, i + 1) &#160;# even length</text>
<text text-anchor="middle" x="239.4" y="-1564.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(palindrome1) &gt; len(longest):</text>
<text text-anchor="middle" x="239.4" y="-1552.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = palindrome1</text>
<text text-anchor="middle" x="239.4" y="-1540.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(palindrome2) &gt; len(longest):</text>
<text text-anchor="middle" x="239.4" y="-1528.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = palindrome2</text>
<text text-anchor="middle" x="239.4" y="-1516.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest</text>
<text text-anchor="middle" x="239.4" y="-1492.9" font-family="Arial" font-size="10.00">Time: O(n)</text>
<text text-anchor="middle" x="239.4" y="-1480.9" font-family="Arial" font-size="10.00">Space: O(1)</text>
<text text-anchor="middle" x="239.4" y="-1468.9" font-family="Arial" font-size="10.00">Data structures: string</text>
<text text-anchor="middle" x="239.4" y="-1456.9" font-family="Arial" font-size="10.00">Concepts: iteration, loops, conditional logic,</text>
<text text-anchor="middle" x="239.4" y="-1444.9" font-family="Arial" font-size="10.00">helper functions, return values,</text>
<text text-anchor="middle" x="239.4" y="-1432.9" font-family="Arial" font-size="10.00">comparison, compound assignment,</text>
<text text-anchor="middle" x="239.4" y="-1420.9" font-family="Arial" font-size="10.00">slicing, object&#45;oriented programming</text>
</g>
<!-- longestPalindrome_expand_around_center_step_3&#45;&gt;longestPalindrome_expand_around_center_step_4 -->
<g id="edge1" class="edge">
<title>longestPalindrome_expand_around_center_step_3&#45;&gt;longestPalindrome_expand_around_center_step_4</title>
<path fill="none" stroke="black" d="M353.44,-1893.22C346.81,-1877.54 339.87,-1861.11 332.82,-1844.43"/>
<polygon fill="black" stroke="black" points="336.12,-1843.25 329,-1835.4 329.67,-1845.98 336.12,-1843.25"/>
</g>
<!-- longestPalindrome_expand_around_center_step_4_variation_1_step_4 -->
<g id="node6" class="node">
<title>longestPalindrome_expand_around_center_step_4_variation_1_step_4</title>
<polygon fill="lightyellow" stroke="black" points="1099.3,-1725.6 425.5,-1725.6 425.5,-1519.2 1099.3,-1519.2 1099.3,-1725.6"/>
<text text-anchor="middle" x="762.4" y="-1708.9" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_4_variation_1_step_4</text>
<text text-anchor="middle" x="762.4" y="-1672.9" font-family="Arial" font-size="10.00">Step 4</text>
<text text-anchor="middle" x="762.4" y="-1648.9" font-family="Arial" font-size="10.00">Initialize two variables, max_length and</text>
<text text-anchor="middle" x="762.4" y="-1636.9" font-family="Arial" font-size="10.00">max_palindrome, to store the maximum length and</text>
<text text-anchor="middle" x="762.4" y="-1624.9" font-family="Arial" font-size="10.00">the longest palindromic substring, respectively.</text>
<text text-anchor="middle" x="762.4" y="-1600.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="762.4" y="-1588.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="762.4" y="-1576.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="762.4" y="-1564.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="762.4" y="-1552.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = &quot;&quot;</text>
<text text-anchor="middle" x="762.4" y="-1540.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="762.4" y="-1528.9" font-family="Arial" font-size="10.00"># Step 1: Initialize two variables, max_length and max_palindrome, to store the maximum length and the longest palindromic substring, respectively.</text>
</g>
<!-- longestPalindrome_expand_around_center_step_3&#45;&gt;longestPalindrome_expand_around_center_step_4_variation_1_step_4 -->
<g id="edge5" class="edge">
<title>longestPalindrome_expand_around_center_step_3&#45;&gt;longestPalindrome_expand_around_center_step_4_variation_1_step_4</title>
<path fill="none" stroke="black" d="M514.98,-1893.22C561.48,-1842.5 615.23,-1783.89 660.73,-1734.27"/>
<polygon fill="black" stroke="black" points="663.05,-1736.92 667.23,-1727.18 657.89,-1732.19 663.05,-1736.92"/>
</g>
<!-- longestPalindrome_expand_around_center_step_4_variation_1_step_5 -->
<g id="node7" class="node">
<title>longestPalindrome_expand_around_center_step_4_variation_1_step_5</title>
<polygon fill="lightyellow" stroke="black" points="988.3,-1255.2 536.5,-1255.2 536.5,-1000.8 988.3,-1000.8 988.3,-1255.2"/>
<text text-anchor="middle" x="762.4" y="-1238.5" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_4_variation_1_step_5</text>
<text text-anchor="middle" x="762.4" y="-1202.5" font-family="Arial" font-size="10.00">Step 5</text>
<text text-anchor="middle" x="762.4" y="-1178.5" font-family="Arial" font-size="10.00">Iterate over the string, considering each</text>
<text text-anchor="middle" x="762.4" y="-1166.5" font-family="Arial" font-size="10.00">character as a potential center of a palindrome.</text>
<text text-anchor="middle" x="762.4" y="-1142.5" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="762.4" y="-1130.5" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="762.4" y="-1118.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="762.4" y="-1106.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="762.4" y="-1094.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = &quot;&quot;</text>
<text text-anchor="middle" x="762.4" y="-1082.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="762.4" y="-1070.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = s[left:right+1]</text>
<text text-anchor="middle" x="762.4" y="-1058.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1</text>
<text text-anchor="middle" x="762.4" y="-1046.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="762.4" y="-1034.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest</text>
<text text-anchor="middle" x="762.4" y="-1022.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;max_length = 0</text>
<text text-anchor="middle" x="762.4" y="-1010.5" font-family="Arial" font-size="10.00"># Step 2: Iterate over the string, considering each character as a potential center of a palindrome.</text>
</g>
<!-- longestPalindrome_expand_around_center_step_4_variation_1_step_4&#45;&gt;longestPalindrome_expand_around_center_step_4_variation_1_step_5 -->
<g id="edge4" class="edge">
<title>longestPalindrome_expand_around_center_step_4_variation_1_step_4&#45;&gt;longestPalindrome_expand_around_center_step_4_variation_1_step_5</title>
<path fill="none" stroke="black" d="M762.4,-1518.78C762.4,-1445.69 762.4,-1346.66 762.4,-1266.71"/>
<polygon fill="black" stroke="black" points="765.9,-1267.07 762.4,-1257.07 758.9,-1267.07 765.9,-1267.07"/>
</g>
<!-- longestPalindrome_expand_around_center_step_4_variation_1_step_6 -->
<g id="node8" class="node">
<title>longestPalindrome_expand_around_center_step_4_variation_1_step_6</title>
<polygon fill="lightyellow" stroke="black" points="1181.05,-844.8 343.75,-844.8 343.75,-506.4 1181.05,-506.4 1181.05,-844.8"/>
<text text-anchor="middle" x="762.4" y="-828.1" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_4_variation_1_step_6</text>
<text text-anchor="middle" x="762.4" y="-792.1" font-family="Arial" font-size="10.00">Step 6</text>
<text text-anchor="middle" x="762.4" y="-768.1" font-family="Arial" font-size="10.00">For each character, call the expand_around_center</text>
<text text-anchor="middle" x="762.4" y="-756.1" font-family="Arial" font-size="10.00">function with the current character as the center</text>
<text text-anchor="middle" x="762.4" y="-744.1" font-family="Arial" font-size="10.00">and update max_length and max_palindrome if a</text>
<text text-anchor="middle" x="762.4" y="-732.1" font-family="Arial" font-size="10.00">longer palindrome is found.</text>
<text text-anchor="middle" x="762.4" y="-708.1" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="762.4" y="-696.1" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="762.4" y="-684.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="762.4" y="-672.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="762.4" y="-660.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = &quot;&quot;</text>
<text text-anchor="middle" x="762.4" y="-648.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="762.4" y="-636.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = s[left:right+1]</text>
<text text-anchor="middle" x="762.4" y="-624.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1</text>
<text text-anchor="middle" x="762.4" y="-612.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="762.4" y="-600.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest</text>
<text text-anchor="middle" x="762.4" y="-588.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;max_length = 0</text>
<text text-anchor="middle" x="762.4" y="-576.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;max_palindrome = &quot;&quot;</text>
<text text-anchor="middle" x="762.4" y="-564.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(len(s)):</text>
<text text-anchor="middle" x="762.4" y="-552.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;palindrome1 = expand_around_center(s, i, i)</text>
<text text-anchor="middle" x="762.4" y="-540.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;palindrome2 = expand_around_center(s, i, i+1)</text>
<text text-anchor="middle" x="762.4" y="-528.1" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(palindrome1) &gt; max_length:</text>
<text text-anchor="middle" x="762.4" y="-516.1" font-family="Arial" font-size="10.00"># Step 3: For each character, call the expand_around_center function with the current character as the center and update max_length and max_palindrome if a longer palindrome is found.</text>
</g>
<!-- longestPalindrome_expand_around_center_step_4_variation_1_step_5&#45;&gt;longestPalindrome_expand_around_center_step_4_variation_1_step_6 -->
<g id="edge3" class="edge">
<title>longestPalindrome_expand_around_center_step_4_variation_1_step_5&#45;&gt;longestPalindrome_expand_around_center_step_4_variation_1_step_6</title>
<path fill="none" stroke="black" d="M762.4,-1000.34C762.4,-955.78 762.4,-904.8 762.4,-856.69"/>
<polygon fill="black" stroke="black" points="765.9,-856.69 762.4,-846.69 758.9,-856.69 765.9,-856.69"/>
</g>
<!-- longestPalindrome_expand_around_center_step_4_variation_1_step_7 -->
<g id="node9" class="node">
<title>longestPalindrome_expand_around_center_step_4_variation_1_step_7</title>
<polygon fill="palegreen" stroke="black" points="929.43,-470.4 595.38,-470.4 595.38,0 929.43,0 929.43,-470.4"/>
<text text-anchor="middle" x="762.4" y="-453.7" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_4_variation_1_step_7</text>
<text text-anchor="middle" x="762.4" y="-417.7" font-family="Arial" font-size="10.00">TERMINAL (Step 7)</text>
<text text-anchor="middle" x="762.4" y="-393.7" font-family="Arial" font-size="10.00">Return max_palindrome as the longest palindromic</text>
<text text-anchor="middle" x="762.4" y="-381.7" font-family="Arial" font-size="10.00">substring.</text>
<text text-anchor="middle" x="762.4" y="-357.7" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="762.4" y="-345.7" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="762.4" y="-333.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="762.4" y="-321.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="762.4" y="-309.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = &quot;&quot;</text>
<text text-anchor="middle" x="762.4" y="-297.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="762.4" y="-285.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest = s[left:right+1]</text>
<text text-anchor="middle" x="762.4" y="-273.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1</text>
<text text-anchor="middle" x="762.4" y="-261.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="762.4" y="-249.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest</text>
<text text-anchor="middle" x="762.4" y="-237.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;max_length = 0</text>
<text text-anchor="middle" x="762.4" y="-225.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;max_palindrome = &quot;&quot;</text>
<text text-anchor="middle" x="762.4" y="-213.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(len(s)):</text>
<text text-anchor="middle" x="762.4" y="-201.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;palindrome1 = expand_around_center(s, i, i)</text>
<text text-anchor="middle" x="762.4" y="-189.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;palindrome2 = expand_around_center(s, i, i+1)</text>
<text text-anchor="middle" x="762.4" y="-177.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(palindrome1) &gt; max_length:</text>
<text text-anchor="middle" x="762.4" y="-165.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_length = len(palindrome1)</text>
<text text-anchor="middle" x="762.4" y="-153.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_palindrome = palindrome1</text>
<text text-anchor="middle" x="762.4" y="-141.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(palindrome2) &gt; max_length:</text>
<text text-anchor="middle" x="762.4" y="-129.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_length = len(palindrome2)</text>
<text text-anchor="middle" x="762.4" y="-117.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_palindrome = palindrome2</text>
<text text-anchor="middle" x="762.4" y="-105.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return max_palindrome</text>
<text text-anchor="middle" x="762.4" y="-81.7" font-family="Arial" font-size="10.00">Time: O(n)</text>
<text text-anchor="middle" x="762.4" y="-69.7" font-family="Arial" font-size="10.00">Space: O(1)</text>
<text text-anchor="middle" x="762.4" y="-57.7" font-family="Arial" font-size="10.00">Data structures: string</text>
<text text-anchor="middle" x="762.4" y="-45.7" font-family="Arial" font-size="10.00">Concepts: iteration, loops, conditional logic,</text>
<text text-anchor="middle" x="762.4" y="-33.7" font-family="Arial" font-size="10.00">helper functions, return values,</text>
<text text-anchor="middle" x="762.4" y="-21.7" font-family="Arial" font-size="10.00">comparison, compound assignment,</text>
<text text-anchor="middle" x="762.4" y="-9.7" font-family="Arial" font-size="10.00">slicing, object&#45;oriented programming</text>
</g>
<!-- longestPalindrome_expand_around_center_step_4_variation_1_step_6&#45;&gt;longestPalindrome_expand_around_center_step_4_variation_1_step_7 -->
<g id="edge2" class="edge">
<title>longestPalindrome_expand_around_center_step_4_variation_1_step_6&#45;&gt;longestPalindrome_expand_around_center_step_4_variation_1_step_7</title>
<path fill="none" stroke="black" d="M762.4,-506.04C762.4,-498.17 762.4,-490.2 762.4,-482.19"/>
<polygon fill="black" stroke="black" points="765.9,-482.34 762.4,-472.34 758.9,-482.34 765.9,-482.34"/>
</g>
<!-- longestPalindrome_expand_around_center_step_2_variation_1_step_3 -->
<g id="node13" class="node">
<title>longestPalindrome_expand_around_center_step_2_variation_1_step_3</title>
<polygon fill="lightyellow" stroke="black" points="1726.43,-2130 1326.38,-2130 1326.38,-1899.6 1726.43,-1899.6 1726.43,-2130"/>
<text text-anchor="middle" x="1526.4" y="-2113.3" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_2_variation_1_step_3</text>
<text text-anchor="middle" x="1526.4" y="-2077.3" font-family="Arial" font-size="10.00">Step 3</text>
<text text-anchor="middle" x="1526.4" y="-2053.3" font-family="Arial" font-size="10.00">Update the longest palindromic substring if the</text>
<text text-anchor="middle" x="1526.4" y="-2041.3" font-family="Arial" font-size="10.00">current palindrome is longer.</text>
<text text-anchor="middle" x="1526.4" y="-2017.3" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1526.4" y="-2005.3" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1526.4" y="-1993.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1526.4" y="-1981.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="1526.4" y="-1969.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="1526.4" y="-1957.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1</text>
<text text-anchor="middle" x="1526.4" y="-1945.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="1526.4" y="-1933.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[left + 1:right]</text>
<text text-anchor="middle" x="1526.4" y="-1921.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="1526.4" y="-1909.3" font-family="Arial" font-size="10.00"># Step 2: Update the longest palindromic substring if the current palindrome is longer.</text>
</g>
<!-- longestPalindrome_expand_around_center_step_2_variation_1_step_2&#45;&gt;longestPalindrome_expand_around_center_step_2_variation_1_step_3 -->
<g id="edge12" class="edge">
<title>longestPalindrome_expand_around_center_step_2_variation_1_step_2&#45;&gt;longestPalindrome_expand_around_center_step_2_variation_1_step_3</title>
<path fill="none" stroke="black" d="M1673.81,-2225.66C1654.81,-2198.62 1633.65,-2168.49 1613.42,-2139.69"/>
<polygon fill="black" stroke="black" points="1616.37,-2137.81 1607.76,-2131.63 1610.65,-2141.83 1616.37,-2137.81"/>
</g>
<!-- longestPalindrome_expand_around_center_step_2_variation_1_step_4 -->
<g id="node14" class="node">
<title>longestPalindrome_expand_around_center_step_2_variation_1_step_4</title>
<polygon fill="lightyellow" stroke="black" points="1725.43,-1761.6 1319.38,-1761.6 1319.38,-1483.2 1725.43,-1483.2 1725.43,-1761.6"/>
<text text-anchor="middle" x="1522.4" y="-1744.9" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_2_variation_1_step_4</text>
<text text-anchor="middle" x="1522.4" y="-1708.9" font-family="Arial" font-size="10.00">Step 4</text>
<text text-anchor="middle" x="1522.4" y="-1684.9" font-family="Arial" font-size="10.00">Iterate through the string to consider every</text>
<text text-anchor="middle" x="1522.4" y="-1672.9" font-family="Arial" font-size="10.00">possible center of the palindrome.</text>
<text text-anchor="middle" x="1522.4" y="-1648.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1522.4" y="-1636.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1522.4" y="-1624.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1522.4" y="-1612.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="1522.4" y="-1600.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="1522.4" y="-1588.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1</text>
<text text-anchor="middle" x="1522.4" y="-1576.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="1522.4" y="-1564.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[left + 1:right]</text>
<text text-anchor="middle" x="1522.4" y="-1552.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="1522.4" y="-1540.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest_palindrome = &quot;&quot;</text>
<text text-anchor="middle" x="1522.4" y="-1528.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(len(s)):</text>
<text text-anchor="middle" x="1522.4" y="-1516.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;palindrome1 = expand_around_center(s, i, i)</text>
<text text-anchor="middle" x="1522.4" y="-1504.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;palindrome2 = expand_around_center(s, i, i + 1)</text>
<text text-anchor="middle" x="1522.4" y="-1492.9" font-family="Arial" font-size="10.00"># Step 3: Iterate through the string to consider every possible center of the palindrome.</text>
</g>
<!-- longestPalindrome_expand_around_center_step_2_variation_1_step_3&#45;&gt;longestPalindrome_expand_around_center_step_2_variation_1_step_4 -->
<g id="edge11" class="edge">
<title>longestPalindrome_expand_around_center_step_2_variation_1_step_3&#45;&gt;longestPalindrome_expand_around_center_step_2_variation_1_step_4</title>
<path fill="none" stroke="black" d="M1525.23,-1899.3C1524.82,-1859.94 1524.37,-1815.26 1523.94,-1773.5"/>
<polygon fill="black" stroke="black" points="1527.44,-1773.57 1523.84,-1763.6 1520.44,-1773.64 1527.44,-1773.57"/>
</g>
<!-- longestPalindrome_expand_around_center_step_2_variation_1_step_5 -->
<g id="node15" class="node">
<title>longestPalindrome_expand_around_center_step_2_variation_1_step_5</title>
<polygon fill="palegreen" stroke="black" points="1689.43,-1339.2 1355.38,-1339.2 1355.38,-916.8 1689.43,-916.8 1689.43,-1339.2"/>
<text text-anchor="middle" x="1522.4" y="-1322.5" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_2_variation_1_step_5</text>
<text text-anchor="middle" x="1522.4" y="-1286.5" font-family="Arial" font-size="10.00">TERMINAL (Step 5)</text>
<text text-anchor="middle" x="1522.4" y="-1262.5" font-family="Arial" font-size="10.00">Return the longest palindromic substring found,</text>
<text text-anchor="middle" x="1522.4" y="-1250.5" font-family="Arial" font-size="10.00">return the longest one.</text>
<text text-anchor="middle" x="1522.4" y="-1226.5" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1522.4" y="-1214.5" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1522.4" y="-1202.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1522.4" y="-1190.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(s, left, right):</text>
<text text-anchor="middle" x="1522.4" y="-1178.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="1522.4" y="-1166.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1</text>
<text text-anchor="middle" x="1522.4" y="-1154.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="1522.4" y="-1142.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[left + 1:right]</text>
<text text-anchor="middle" x="1522.4" y="-1130.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="1522.4" y="-1118.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest_palindrome = &quot;&quot;</text>
<text text-anchor="middle" x="1522.4" y="-1106.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(len(s)):</text>
<text text-anchor="middle" x="1522.4" y="-1094.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;palindrome1 = expand_around_center(s, i, i)</text>
<text text-anchor="middle" x="1522.4" y="-1082.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;palindrome2 = expand_around_center(s, i, i + 1)</text>
<text text-anchor="middle" x="1522.4" y="-1070.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(palindrome1) &gt; len(longest_palindrome):</text>
<text text-anchor="middle" x="1522.4" y="-1058.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest_palindrome = palindrome1</text>
<text text-anchor="middle" x="1522.4" y="-1046.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(palindrome2) &gt; len(longest_palindrome):</text>
<text text-anchor="middle" x="1522.4" y="-1034.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest_palindrome = palindrome2</text>
<text text-anchor="middle" x="1522.4" y="-1022.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest_palindrome</text>
<text text-anchor="middle" x="1522.4" y="-998.5" font-family="Arial" font-size="10.00">Time: O(n)</text>
<text text-anchor="middle" x="1522.4" y="-986.5" font-family="Arial" font-size="10.00">Space: O(1)</text>
<text text-anchor="middle" x="1522.4" y="-974.5" font-family="Arial" font-size="10.00">Data structures: string</text>
<text text-anchor="middle" x="1522.4" y="-962.5" font-family="Arial" font-size="10.00">Concepts: iteration, loops, conditional logic,</text>
<text text-anchor="middle" x="1522.4" y="-950.5" font-family="Arial" font-size="10.00">helper functions, return values,</text>
<text text-anchor="middle" x="1522.4" y="-938.5" font-family="Arial" font-size="10.00">comparison, compound assignment,</text>
<text text-anchor="middle" x="1522.4" y="-926.5" font-family="Arial" font-size="10.00">slicing, object&#45;oriented programming</text>
</g>
<!-- longestPalindrome_expand_around_center_step_2_variation_1_step_4&#45;&gt;longestPalindrome_expand_around_center_step_2_variation_1_step_5 -->
<g id="edge10" class="edge">
<title>longestPalindrome_expand_around_center_step_2_variation_1_step_4&#45;&gt;longestPalindrome_expand_around_center_step_2_variation_1_step_5</title>
<path fill="none" stroke="black" d="M1522.4,-1482.93C1522.4,-1441.89 1522.4,-1395.88 1522.4,-1350.95"/>
<polygon fill="black" stroke="black" points="1525.9,-1351.07 1522.4,-1341.07 1518.9,-1351.07 1525.9,-1351.07"/>
</g>
<!-- longestPalindrome_two_pointers_step_2 -->
<g id="node17" class="node">
<title>longestPalindrome_two_pointers_step_2</title>
<polygon fill="moccasin" stroke="black" points="2231.68,-2426.4 1989.12,-2426.4 1989.12,-2208 2231.68,-2208 2231.68,-2426.4"/>
<text text-anchor="middle" x="2110.4" y="-2409.7" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_2</text>
<text text-anchor="middle" x="2110.4" y="-2373.7" font-family="Arial" font-size="10.00">Step 2</text>
<text text-anchor="middle" x="2110.4" y="-2349.7" font-family="Arial" font-size="10.00">Expand the `left` and `right` pointers outwards to</text>
<text text-anchor="middle" x="2110.4" y="-2337.7" font-family="Arial" font-size="10.00">find the longest palindromic substring centered at</text>
<text text-anchor="middle" x="2110.4" y="-2325.7" font-family="Arial" font-size="10.00">the current position.</text>
<text text-anchor="middle" x="2110.4" y="-2301.7" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2110.4" y="-2289.7" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2110.4" y="-2277.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2110.4" y="-2265.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;l = len(s) // 2</text>
<text text-anchor="middle" x="2110.4" y="-2253.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;r = l</text>
<text text-anchor="middle" x="2110.4" y="-2241.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:</text>
<text text-anchor="middle" x="2110.4" y="-2229.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l &#45;= 1</text>
<text text-anchor="middle" x="2110.4" y="-2217.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r += 1</text>
</g>
<!-- longestPalindrome_two_pointers_step_1&#45;&gt;longestPalindrome_two_pointers_step_2 -->
<g id="edge20" class="edge">
<title>longestPalindrome_two_pointers_step_1&#45;&gt;longestPalindrome_two_pointers_step_2</title>
<path fill="none" stroke="black" d="M2446.59,-2539.19C2383.71,-2515.1 2304.6,-2480.45 2240.4,-2438.4 2237.98,-2436.82 2235.56,-2435.19 2233.15,-2433.52"/>
<polygon fill="black" stroke="black" points="2235.29,-2430.74 2225.12,-2427.76 2231.21,-2436.43 2235.29,-2430.74"/>
</g>
<!-- longestPalindrome_two_pointers_step_2_error_logic_error -->
<g id="node23" class="node">
<title>longestPalindrome_two_pointers_step_2_error_logic_error</title>
<polygon fill="salmon" stroke="black" points="2529.05,-2432.4 2249.75,-2432.4 2249.75,-2202 2529.05,-2202 2529.05,-2432.4"/>
<text text-anchor="middle" x="2389.4" y="-2415.7" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_2_error_logic_error</text>
<text text-anchor="middle" x="2389.4" y="-2379.7" font-family="Arial" font-size="10.00">ERROR (Step 2)</text>
<text text-anchor="middle" x="2389.4" y="-2355.7" font-family="Arial" font-size="10.00">Failing to check for even length</text>
<text text-anchor="middle" x="2389.4" y="-2343.7" font-family="Arial" font-size="10.00">palindromes</text>
<text text-anchor="middle" x="2389.4" y="-2331.7" font-family="Arial" font-size="10.00">(e.g., &#39;abba&#39;) by only considering</text>
<text text-anchor="middle" x="2389.4" y="-2319.7" font-family="Arial" font-size="10.00">odd length palindromes.</text>
<text text-anchor="middle" x="2389.4" y="-2295.7" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2389.4" y="-2283.7" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2389.4" y="-2271.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2389.4" y="-2259.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;l = len(s) // 2</text>
<text text-anchor="middle" x="2389.4" y="-2247.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;r = l + 1</text>
<text text-anchor="middle" x="2389.4" y="-2235.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:</text>
<text text-anchor="middle" x="2389.4" y="-2223.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l &#45;= 1</text>
<text text-anchor="middle" x="2389.4" y="-2211.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r += 1</text>
</g>
<!-- longestPalindrome_two_pointers_step_1&#45;&gt;longestPalindrome_two_pointers_step_2_error_logic_error -->
<g id="edge21" class="edge">
<title>longestPalindrome_two_pointers_step_1&#45;&gt;longestPalindrome_two_pointers_step_2_error_logic_error</title>
<path fill="none" stroke="black" d="M2501.05,-2491.99C2490.75,-2475.97 2479.79,-2458.91 2468.91,-2441.97"/>
<polygon fill="black" stroke="black" points="2472.05,-2440.37 2463.7,-2433.85 2466.16,-2444.16 2472.05,-2440.37"/>
</g>
<!-- longestPalindrome_two_pointers_step_2_variation_1_step_2 -->
<g id="node24" class="node">
<title>longestPalindrome_two_pointers_step_2_variation_1_step_2</title>
<polygon fill="lightyellow" stroke="black" points="2895.93,-2408.4 2546.88,-2408.4 2546.88,-2226 2895.93,-2226 2895.93,-2408.4"/>
<text text-anchor="middle" x="2721.4" y="-2391.7" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_2_variation_1_step_2</text>
<text text-anchor="middle" x="2721.4" y="-2355.7" font-family="Arial" font-size="10.00">Step 2</text>
<text text-anchor="middle" x="2721.4" y="-2331.7" font-family="Arial" font-size="10.00">Expand around the center with the two pointers</text>
<text text-anchor="middle" x="2721.4" y="-2319.7" font-family="Arial" font-size="10.00">`left` and `right`.</text>
<text text-anchor="middle" x="2721.4" y="-2295.7" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2721.4" y="-2283.7" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2721.4" y="-2271.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2721.4" y="-2259.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;l = len(s) // 2</text>
<text text-anchor="middle" x="2721.4" y="-2247.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;r = l</text>
<text text-anchor="middle" x="2721.4" y="-2235.7" font-family="Arial" font-size="10.00"># Step 1: Expand around the center with the two pointers `left` and `right`.</text>
</g>
<!-- longestPalindrome_two_pointers_step_1&#45;&gt;longestPalindrome_two_pointers_step_2_variation_1_step_2 -->
<g id="edge25" class="edge">
<title>longestPalindrome_two_pointers_step_1&#45;&gt;longestPalindrome_two_pointers_step_2_variation_1_step_2</title>
<path fill="none" stroke="black" d="M2609.75,-2491.99C2624.86,-2468.47 2641.42,-2442.71 2657.04,-2418.39"/>
<polygon fill="black" stroke="black" points="2659.93,-2420.36 2662.39,-2410.06 2654.04,-2416.58 2659.93,-2420.36"/>
</g>
<!-- longestPalindrome_two_pointers_step_3 -->
<g id="node18" class="node">
<title>longestPalindrome_two_pointers_step_3</title>
<polygon fill="moccasin" stroke="black" points="1986.8,-2136 1748,-2136 1748,-1893.6 1986.8,-1893.6 1986.8,-2136"/>
<text text-anchor="middle" x="1867.4" y="-2119.3" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_3</text>
<text text-anchor="middle" x="1867.4" y="-2083.3" font-family="Arial" font-size="10.00">Step 3</text>
<text text-anchor="middle" x="1867.4" y="-2059.3" font-family="Arial" font-size="10.00">Store the longest palindromic substring found so</text>
<text text-anchor="middle" x="1867.4" y="-2047.3" font-family="Arial" font-size="10.00">far in the `res` variable.</text>
<text text-anchor="middle" x="1867.4" y="-2023.3" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1867.4" y="-2011.3" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1867.4" y="-1999.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1867.4" y="-1987.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = &quot;&quot;</text>
<text text-anchor="middle" x="1867.4" y="-1975.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;l = len(s) // 2</text>
<text text-anchor="middle" x="1867.4" y="-1963.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;r = l</text>
<text text-anchor="middle" x="1867.4" y="-1951.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:</text>
<text text-anchor="middle" x="1867.4" y="-1939.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l &#45;= 1</text>
<text text-anchor="middle" x="1867.4" y="-1927.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r += 1</text>
<text text-anchor="middle" x="1867.4" y="-1915.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = s[l+1:r]</text>
<text text-anchor="middle" x="1867.4" y="-1903.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return res</text>
</g>
<!-- longestPalindrome_two_pointers_step_2&#45;&gt;longestPalindrome_two_pointers_step_3 -->
<g id="edge18" class="edge">
<title>longestPalindrome_two_pointers_step_2&#45;&gt;longestPalindrome_two_pointers_step_3</title>
<path fill="none" stroke="black" d="M2022.67,-2207.75C2006.26,-2187.46 1988.95,-2166.06 1972.08,-2145.21"/>
<polygon fill="black" stroke="black" points="1974.84,-2143.06 1965.83,-2137.48 1969.4,-2147.46 1974.84,-2143.06"/>
</g>
<!-- longestPalindrome_two_pointers_step_3_error_update_error -->
<g id="node22" class="node">
<title>longestPalindrome_two_pointers_step_3_error_update_error</title>
<polygon fill="salmon" stroke="black" points="2293.55,-2142 2005.25,-2142 2005.25,-1887.6 2293.55,-1887.6 2293.55,-2142"/>
<text text-anchor="middle" x="2149.4" y="-2125.3" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_3_error_update_error</text>
<text text-anchor="middle" x="2149.4" y="-2089.3" font-family="Arial" font-size="10.00">ERROR (Step 3)</text>
<text text-anchor="middle" x="2149.4" y="-2065.3" font-family="Arial" font-size="10.00">Not updating the &#39;res&#39; variable correctly</text>
<text text-anchor="middle" x="2149.4" y="-2053.3" font-family="Arial" font-size="10.00">when a</text>
<text text-anchor="middle" x="2149.4" y="-2041.3" font-family="Arial" font-size="10.00">longer palindromic substring is found.</text>
<text text-anchor="middle" x="2149.4" y="-2017.3" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2149.4" y="-2005.3" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2149.4" y="-1993.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2149.4" y="-1981.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = &quot;&quot;</text>
<text text-anchor="middle" x="2149.4" y="-1969.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;l = len(s) // 2</text>
<text text-anchor="middle" x="2149.4" y="-1957.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;r = l</text>
<text text-anchor="middle" x="2149.4" y="-1945.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:</text>
<text text-anchor="middle" x="2149.4" y="-1933.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l &#45;= 1</text>
<text text-anchor="middle" x="2149.4" y="-1921.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r += 1</text>
<text text-anchor="middle" x="2149.4" y="-1909.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = &quot;&quot; &#160;# error: not updating res correctly</text>
<text text-anchor="middle" x="2149.4" y="-1897.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[l+1:r]</text>
</g>
<!-- longestPalindrome_two_pointers_step_2&#45;&gt;longestPalindrome_two_pointers_step_3_error_update_error -->
<g id="edge19" class="edge">
<title>longestPalindrome_two_pointers_step_2&#45;&gt;longestPalindrome_two_pointers_step_3_error_update_error</title>
<path fill="none" stroke="black" d="M2124.48,-2207.75C2126.76,-2190.21 2129.14,-2171.85 2131.49,-2153.73"/>
<polygon fill="black" stroke="black" points="2134.94,-2154.36 2132.76,-2143.99 2128,-2153.46 2134.94,-2154.36"/>
</g>
<!-- longestPalindrome_two_pointers_step_4 -->
<g id="node19" class="node">
<title>longestPalindrome_two_pointers_step_4</title>
<polygon fill="moccasin" stroke="black" points="1990.93,-1755.6 1743.88,-1755.6 1743.88,-1489.2 1990.93,-1489.2 1990.93,-1755.6"/>
<text text-anchor="middle" x="1867.4" y="-1738.9" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_4</text>
<text text-anchor="middle" x="1867.4" y="-1702.9" font-family="Arial" font-size="10.00">Step 4</text>
<text text-anchor="middle" x="1867.4" y="-1678.9" font-family="Arial" font-size="10.00">Move the `left` and `right` pointers to the next</text>
<text text-anchor="middle" x="1867.4" y="-1666.9" font-family="Arial" font-size="10.00">position in the string `s`.</text>
<text text-anchor="middle" x="1867.4" y="-1642.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1867.4" y="-1630.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1867.4" y="-1618.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1867.4" y="-1606.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = &quot;&quot;</text>
<text text-anchor="middle" x="1867.4" y="-1594.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(len(s)):</text>
<text text-anchor="middle" x="1867.4" y="-1582.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l = i</text>
<text text-anchor="middle" x="1867.4" y="-1570.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r = i</text>
<text text-anchor="middle" x="1867.4" y="-1558.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:</text>
<text text-anchor="middle" x="1867.4" y="-1546.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l &#45;= 1</text>
<text text-anchor="middle" x="1867.4" y="-1534.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r += 1</text>
<text text-anchor="middle" x="1867.4" y="-1522.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tmp = s[l+1:r]</text>
<text text-anchor="middle" x="1867.4" y="-1510.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(tmp) &gt; len(res):</text>
<text text-anchor="middle" x="1867.4" y="-1498.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res = tmp</text>
</g>
<!-- longestPalindrome_two_pointers_step_3&#45;&gt;longestPalindrome_two_pointers_step_4 -->
<g id="edge16" class="edge">
<title>longestPalindrome_two_pointers_step_3&#45;&gt;longestPalindrome_two_pointers_step_4</title>
<path fill="none" stroke="black" d="M1867.4,-1893.22C1867.4,-1853.41 1867.4,-1808.73 1867.4,-1767.36"/>
<polygon fill="black" stroke="black" points="1870.9,-1767.58 1867.4,-1757.58 1863.9,-1767.58 1870.9,-1767.58"/>
</g>
<!-- longestPalindrome_two_pointers_step_4_error_loop_error -->
<g id="node21" class="node">
<title>longestPalindrome_two_pointers_step_4_error_loop_error</title>
<polygon fill="salmon" stroke="black" points="2285.93,-1767.6 2008.88,-1767.6 2008.88,-1477.2 2285.93,-1477.2 2285.93,-1767.6"/>
<text text-anchor="middle" x="2147.4" y="-1750.9" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_4_error_loop_error</text>
<text text-anchor="middle" x="2147.4" y="-1714.9" font-family="Arial" font-size="10.00">ERROR (Step 4)</text>
<text text-anchor="middle" x="2147.4" y="-1690.9" font-family="Arial" font-size="10.00">Not incrementing the &#39;i&#39; variable</text>
<text text-anchor="middle" x="2147.4" y="-1678.9" font-family="Arial" font-size="10.00">correctly</text>
<text text-anchor="middle" x="2147.4" y="-1666.9" font-family="Arial" font-size="10.00">causing an infinite loop.</text>
<text text-anchor="middle" x="2147.4" y="-1642.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2147.4" y="-1630.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2147.4" y="-1618.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2147.4" y="-1606.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = &quot;&quot;</text>
<text text-anchor="middle" x="2147.4" y="-1594.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;i = 0</text>
<text text-anchor="middle" x="2147.4" y="-1582.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;while i &lt; len(s):</text>
<text text-anchor="middle" x="2147.4" y="-1570.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l = i</text>
<text text-anchor="middle" x="2147.4" y="-1558.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r = i</text>
<text text-anchor="middle" x="2147.4" y="-1546.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:</text>
<text text-anchor="middle" x="2147.4" y="-1534.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l &#45;= 1</text>
<text text-anchor="middle" x="2147.4" y="-1522.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r += 1</text>
<text text-anchor="middle" x="2147.4" y="-1510.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tmp = s[l+1:r]</text>
<text text-anchor="middle" x="2147.4" y="-1498.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(tmp) &gt; len(res):</text>
<text text-anchor="middle" x="2147.4" y="-1486.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res = tmp</text>
</g>
<!-- longestPalindrome_two_pointers_step_3&#45;&gt;longestPalindrome_two_pointers_step_4_error_loop_error -->
<g id="edge17" class="edge">
<title>longestPalindrome_two_pointers_step_3&#45;&gt;longestPalindrome_two_pointers_step_4_error_loop_error</title>
<path fill="none" stroke="black" d="M1956.9,-1893.43C1971.52,-1873.51 1986.45,-1853.02 2000.4,-1833.6 2013.46,-1815.42 2027.07,-1796.27 2040.49,-1777.24"/>
<polygon fill="black" stroke="black" points="2043.29,-1779.34 2046.19,-1769.15 2037.57,-1775.31 2043.29,-1779.34"/>
</g>
<!-- longestPalindrome_two_pointers_step_5 -->
<g id="node20" class="node">
<title>longestPalindrome_two_pointers_step_5</title>
<polygon fill="palegreen" stroke="black" points="2000.68,-1339.2 1734.12,-1339.2 1734.12,-916.8 2000.68,-916.8 2000.68,-1339.2"/>
<text text-anchor="middle" x="1867.4" y="-1322.5" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_5</text>
<text text-anchor="middle" x="1867.4" y="-1286.5" font-family="Arial" font-size="10.00">TERMINAL (Step 5)</text>
<text text-anchor="middle" x="1867.4" y="-1262.5" font-family="Arial" font-size="10.00">Repeat steps 2&#45;4 until the entire string `s` has</text>
<text text-anchor="middle" x="1867.4" y="-1250.5" font-family="Arial" font-size="10.00">been processed.</text>
<text text-anchor="middle" x="1867.4" y="-1226.5" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="1867.4" y="-1214.5" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="1867.4" y="-1202.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="1867.4" y="-1190.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = &quot;&quot;</text>
<text text-anchor="middle" x="1867.4" y="-1178.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(len(s)):</text>
<text text-anchor="middle" x="1867.4" y="-1166.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tmp = self.helper(s, i, i)</text>
<text text-anchor="middle" x="1867.4" y="-1154.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(tmp) &gt; len(res):</text>
<text text-anchor="middle" x="1867.4" y="-1142.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res = tmp</text>
<text text-anchor="middle" x="1867.4" y="-1130.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tmp = self.helper(s, i, i+1)</text>
<text text-anchor="middle" x="1867.4" y="-1118.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(tmp) &gt; len(res):</text>
<text text-anchor="middle" x="1867.4" y="-1106.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res = tmp</text>
<text text-anchor="middle" x="1867.4" y="-1094.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return res</text>
<text text-anchor="middle" x="1867.4" y="-1070.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def helper(self, s, l, right):</text>
<text text-anchor="middle" x="1867.4" y="-1058.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;while l &gt;= 0 and right &lt; len(s) and s[l] == s[right]:</text>
<text text-anchor="middle" x="1867.4" y="-1046.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l &#45;= 1</text>
<text text-anchor="middle" x="1867.4" y="-1034.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="1867.4" y="-1022.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[l+1:right]</text>
<text text-anchor="middle" x="1867.4" y="-998.5" font-family="Arial" font-size="10.00">Time: O(n)</text>
<text text-anchor="middle" x="1867.4" y="-986.5" font-family="Arial" font-size="10.00">Space: O(1)</text>
<text text-anchor="middle" x="1867.4" y="-974.5" font-family="Arial" font-size="10.00">Data structures: string</text>
<text text-anchor="middle" x="1867.4" y="-962.5" font-family="Arial" font-size="10.00">Concepts: iteration, loops, conditional logic,</text>
<text text-anchor="middle" x="1867.4" y="-950.5" font-family="Arial" font-size="10.00">helper functions, return values,</text>
<text text-anchor="middle" x="1867.4" y="-938.5" font-family="Arial" font-size="10.00">comparison, compound assignment,</text>
<text text-anchor="middle" x="1867.4" y="-926.5" font-family="Arial" font-size="10.00">slicing, object&#45;oriented programming</text>
</g>
<!-- longestPalindrome_two_pointers_step_4&#45;&gt;longestPalindrome_two_pointers_step_5 -->
<g id="edge15" class="edge">
<title>longestPalindrome_two_pointers_step_4&#45;&gt;longestPalindrome_two_pointers_step_5</title>
<path fill="none" stroke="black" d="M1867.4,-1488.8C1867.4,-1446.21 1867.4,-1397.81 1867.4,-1350.63"/>
<polygon fill="black" stroke="black" points="1870.9,-1350.82 1867.4,-1340.82 1863.9,-1350.82 1870.9,-1350.82"/>
</g>
<!-- longestPalindrome_two_pointers_step_2_variation_1_step_3 -->
<g id="node25" class="node">
<title>longestPalindrome_two_pointers_step_2_variation_1_step_3</title>
<polygon fill="lightyellow" stroke="black" points="2843.05,-2142 2311.75,-2142 2311.75,-1887.6 2843.05,-1887.6 2843.05,-2142"/>
<text text-anchor="middle" x="2577.4" y="-2125.3" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_2_variation_1_step_3</text>
<text text-anchor="middle" x="2577.4" y="-2089.3" font-family="Arial" font-size="10.00">Step 3</text>
<text text-anchor="middle" x="2577.4" y="-2065.3" font-family="Arial" font-size="10.00">Check if the substring from `left` to `right` is a</text>
<text text-anchor="middle" x="2577.4" y="-2053.3" font-family="Arial" font-size="10.00">palindrome and update the longest palindrome if</text>
<text text-anchor="middle" x="2577.4" y="-2041.3" font-family="Arial" font-size="10.00">necessary.</text>
<text text-anchor="middle" x="2577.4" y="-2017.3" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2577.4" y="-2005.3" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2577.4" y="-1993.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2577.4" y="-1981.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;l = len(s) // 2</text>
<text text-anchor="middle" x="2577.4" y="-1969.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;r = l</text>
<text text-anchor="middle" x="2577.4" y="-1957.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest_palindrome = &quot;&quot;</text>
<text text-anchor="middle" x="2577.4" y="-1933.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(left, right):</text>
<text text-anchor="middle" x="2577.4" y="-1921.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nonlocal longest_palindrome</text>
<text text-anchor="middle" x="2577.4" y="-1909.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="2577.4" y="-1897.3" font-family="Arial" font-size="10.00"># Step 2: Check if the substring from `left` to `right` is a palindrome and update the longest palindrome if necessary.</text>
</g>
<!-- longestPalindrome_two_pointers_step_2_variation_1_step_2&#45;&gt;longestPalindrome_two_pointers_step_2_variation_1_step_3 -->
<g id="edge24" class="edge">
<title>longestPalindrome_two_pointers_step_2_variation_1_step_2&#45;&gt;longestPalindrome_two_pointers_step_2_variation_1_step_3</title>
<path fill="none" stroke="black" d="M2678,-2225.66C2666.97,-2202.66 2654.88,-2177.43 2643.02,-2152.68"/>
<polygon fill="black" stroke="black" points="2646.26,-2151.36 2638.78,-2143.85 2639.95,-2154.38 2646.26,-2151.36"/>
</g>
<!-- longestPalindrome_two_pointers_step_2_variation_1_step_5 -->
<g id="node26" class="node">
<title>longestPalindrome_two_pointers_step_2_variation_1_step_5</title>
<polygon fill="lightyellow" stroke="black" points="2793.18,-1773.6 2361.62,-1773.6 2361.62,-1471.2 2793.18,-1471.2 2793.18,-1773.6"/>
<text text-anchor="middle" x="2577.4" y="-1756.9" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_2_variation_1_step_5</text>
<text text-anchor="middle" x="2577.4" y="-1720.9" font-family="Arial" font-size="10.00">Step 5</text>
<text text-anchor="middle" x="2577.4" y="-1696.9" font-family="Arial" font-size="10.00">Check for even&#45;length palindromes by setting</text>
<text text-anchor="middle" x="2577.4" y="-1684.9" font-family="Arial" font-size="10.00">`right` to `l + 1` and repeat steps 2&#45;4.</text>
<text text-anchor="middle" x="2577.4" y="-1660.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2577.4" y="-1648.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2577.4" y="-1636.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2577.4" y="-1624.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;l = len(s) // 2</text>
<text text-anchor="middle" x="2577.4" y="-1612.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;r = l</text>
<text text-anchor="middle" x="2577.4" y="-1600.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest_palindrome = &quot;&quot;</text>
<text text-anchor="middle" x="2577.4" y="-1576.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(left, right):</text>
<text text-anchor="middle" x="2577.4" y="-1564.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nonlocal longest_palindrome</text>
<text text-anchor="middle" x="2577.4" y="-1552.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="2577.4" y="-1540.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if right &#45; left + 1 &gt; len(longest_palindrome):</text>
<text text-anchor="middle" x="2577.4" y="-1528.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest_palindrome = s[left:right + 1]</text>
<text text-anchor="middle" x="2577.4" y="-1516.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1</text>
<text text-anchor="middle" x="2577.4" y="-1504.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="2577.4" y="-1480.9" font-family="Arial" font-size="10.00"># Step 3: Check for even&#45;length palindromes by setting `right` to `l + 1` and repeat steps 2&#45;4.</text>
</g>
<!-- longestPalindrome_two_pointers_step_2_variation_1_step_3&#45;&gt;longestPalindrome_two_pointers_step_2_variation_1_step_5 -->
<g id="edge23" class="edge">
<title>longestPalindrome_two_pointers_step_2_variation_1_step_3&#45;&gt;longestPalindrome_two_pointers_step_2_variation_1_step_5</title>
<path fill="none" stroke="black" d="M2577.4,-1887.32C2577.4,-1854.8 2577.4,-1819.37 2577.4,-1785.33"/>
<polygon fill="black" stroke="black" points="2580.9,-1785.36 2577.4,-1775.36 2573.9,-1785.36 2580.9,-1785.36"/>
</g>
<!-- longestPalindrome_two_pointers_step_2_variation_1_step_6 -->
<g id="node27" class="node">
<title>longestPalindrome_two_pointers_step_2_variation_1_step_6</title>
<polygon fill="palegreen" stroke="black" points="2727.93,-1345.2 2426.88,-1345.2 2426.88,-910.8 2727.93,-910.8 2727.93,-1345.2"/>
<text text-anchor="middle" x="2577.4" y="-1328.5" font-family="Arial" font-size="10.00">longestPalindrome_two_pointers_step_2_variation_1_step_6</text>
<text text-anchor="middle" x="2577.4" y="-1292.5" font-family="Arial" font-size="10.00">TERMINAL (Step 6)</text>
<text text-anchor="middle" x="2577.4" y="-1268.5" font-family="Arial" font-size="10.00">Return the longest palindromic substring found.</text>
<text text-anchor="middle" x="2577.4" y="-1244.5" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2577.4" y="-1232.5" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2577.4" y="-1220.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2577.4" y="-1208.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;l = len(s) // 2</text>
<text text-anchor="middle" x="2577.4" y="-1196.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;r = l</text>
<text text-anchor="middle" x="2577.4" y="-1184.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest_palindrome = &quot;&quot;</text>
<text text-anchor="middle" x="2577.4" y="-1160.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(left, right):</text>
<text text-anchor="middle" x="2577.4" y="-1148.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nonlocal longest_palindrome</text>
<text text-anchor="middle" x="2577.4" y="-1136.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="2577.4" y="-1124.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if right &#45; left + 1 &gt; len(longest_palindrome):</text>
<text text-anchor="middle" x="2577.4" y="-1112.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest_palindrome = s[left:right + 1]</text>
<text text-anchor="middle" x="2577.4" y="-1100.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1</text>
<text text-anchor="middle" x="2577.4" y="-1088.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="2577.4" y="-1064.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(len(s)):</text>
<text text-anchor="middle" x="2577.4" y="-1052.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expand_around_center(i, i)</text>
<text text-anchor="middle" x="2577.4" y="-1040.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expand_around_center(i, i + 1)</text>
<text text-anchor="middle" x="2577.4" y="-1016.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest_palindrome</text>
<text text-anchor="middle" x="2577.4" y="-992.5" font-family="Arial" font-size="10.00">Time: O(n)</text>
<text text-anchor="middle" x="2577.4" y="-980.5" font-family="Arial" font-size="10.00">Space: O(1)</text>
<text text-anchor="middle" x="2577.4" y="-968.5" font-family="Arial" font-size="10.00">Data structures: string</text>
<text text-anchor="middle" x="2577.4" y="-956.5" font-family="Arial" font-size="10.00">Concepts: iteration, loops, conditional logic,</text>
<text text-anchor="middle" x="2577.4" y="-944.5" font-family="Arial" font-size="10.00">helper functions, return values,</text>
<text text-anchor="middle" x="2577.4" y="-932.5" font-family="Arial" font-size="10.00">comparison, compound assignment,</text>
<text text-anchor="middle" x="2577.4" y="-920.5" font-family="Arial" font-size="10.00">slicing, object&#45;oriented programming</text>
</g>
<!-- longestPalindrome_two_pointers_step_2_variation_1_step_5&#45;&gt;longestPalindrome_two_pointers_step_2_variation_1_step_6 -->
<g id="edge22" class="edge">
<title>longestPalindrome_two_pointers_step_2_variation_1_step_5&#45;&gt;longestPalindrome_two_pointers_step_2_variation_1_step_6</title>
<path fill="none" stroke="black" d="M2577.4,-1470.99C2577.4,-1434.95 2577.4,-1395.67 2577.4,-1356.99"/>
<polygon fill="black" stroke="black" points="2580.9,-1357.07 2577.4,-1347.07 2573.9,-1357.07 2580.9,-1357.07"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_2 -->
<g id="node29" class="node">
<title>longestPalindrome_dynamic_programming_step_2</title>
<polygon fill="moccasin" stroke="black" points="3410.93,-2420.4 3163.88,-2420.4 3163.88,-2214 3410.93,-2214 3410.93,-2420.4"/>
<text text-anchor="middle" x="3287.4" y="-2403.7" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_2</text>
<text text-anchor="middle" x="3287.4" y="-2367.7" font-family="Arial" font-size="10.00">Step 2</text>
<text text-anchor="middle" x="3287.4" y="-2343.7" font-family="Arial" font-size="10.00">Initialize the table `dp` with False, and set the</text>
<text text-anchor="middle" x="3287.4" y="-2331.7" font-family="Arial" font-size="10.00">diagonal elements to True since a single character</text>
<text text-anchor="middle" x="3287.4" y="-2319.7" font-family="Arial" font-size="10.00">is a palindrome.</text>
<text text-anchor="middle" x="3287.4" y="-2295.7" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="3287.4" y="-2283.7" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="3287.4" y="-2271.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="3287.4" y="-2259.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="3287.4" y="-2247.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="3287.4" y="-2235.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="3287.4" y="-2223.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_1&#45;&gt;longestPalindrome_dynamic_programming_step_2 -->
<g id="edge36" class="edge">
<title>longestPalindrome_dynamic_programming_step_1&#45;&gt;longestPalindrome_dynamic_programming_step_2</title>
<path fill="none" stroke="black" d="M3394.34,-2491.99C3382.22,-2472.3 3369.13,-2451.02 3356.41,-2430.35"/>
<polygon fill="black" stroke="black" points="3359.41,-2428.55 3351.19,-2421.86 3353.45,-2432.22 3359.41,-2428.55"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_2_error_initialization_error -->
<g id="node39" class="node">
<title>longestPalindrome_dynamic_programming_step_2_error_initialization_error</title>
<polygon fill="salmon" stroke="black" points="3781.8,-2408.4 3429,-2408.4 3429,-2226 3781.8,-2226 3781.8,-2408.4"/>
<text text-anchor="middle" x="3605.4" y="-2391.7" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_2_error_initialization_error</text>
<text text-anchor="middle" x="3605.4" y="-2355.7" font-family="Arial" font-size="10.00">ERROR (Step 2)</text>
<text text-anchor="middle" x="3605.4" y="-2331.7" font-family="Arial" font-size="10.00">Initializing the diagonal elements with False</text>
<text text-anchor="middle" x="3605.4" y="-2307.7" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="3605.4" y="-2295.7" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="3605.4" y="-2283.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="3605.4" y="-2271.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="3605.4" y="-2259.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="3605.4" y="-2247.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="3605.4" y="-2235.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = False</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_1&#45;&gt;longestPalindrome_dynamic_programming_step_2_error_initialization_error -->
<g id="edge37" class="edge">
<title>longestPalindrome_dynamic_programming_step_1&#45;&gt;longestPalindrome_dynamic_programming_step_2_error_initialization_error</title>
<path fill="none" stroke="black" d="M3498.46,-2491.99C3512.93,-2468.47 3528.79,-2442.71 3543.75,-2418.39"/>
<polygon fill="black" stroke="black" points="3546.61,-2420.43 3548.87,-2410.07 3540.65,-2416.76 3546.61,-2420.43"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_2_variation_1_step_2 -->
<g id="node40" class="node">
<title>longestPalindrome_dynamic_programming_step_2_variation_1_step_2</title>
<polygon fill="lightyellow" stroke="black" points="4289.55,-2414.4 3839.25,-2414.4 3839.25,-2220 4289.55,-2220 4289.55,-2414.4"/>
<text text-anchor="middle" x="4064.4" y="-2397.7" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_2_variation_1_step_2</text>
<text text-anchor="middle" x="4064.4" y="-2361.7" font-family="Arial" font-size="10.00">Step 2</text>
<text text-anchor="middle" x="4064.4" y="-2337.7" font-family="Arial" font-size="10.00">Initialize the maximum length of the palindrome</text>
<text text-anchor="middle" x="4064.4" y="-2325.7" font-family="Arial" font-size="10.00">and the start of the longest palindrome.</text>
<text text-anchor="middle" x="4064.4" y="-2301.7" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="4064.4" y="-2289.7" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="4064.4" y="-2277.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="4064.4" y="-2265.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="4064.4" y="-2253.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="4064.4" y="-2241.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;max_len = 1</text>
<text text-anchor="middle" x="4064.4" y="-2229.7" font-family="Arial" font-size="10.00"># Step 1: Initialize the maximum length of the palindrome and the start of the longest palindrome.</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_1&#45;&gt;longestPalindrome_dynamic_programming_step_2_variation_1_step_2 -->
<g id="edge40" class="edge">
<title>longestPalindrome_dynamic_programming_step_1&#45;&gt;longestPalindrome_dynamic_programming_step_2_variation_1_step_2</title>
<path fill="none" stroke="black" d="M3546.34,-2492.02C3557.08,-2485.34 3568.19,-2479.3 3579.4,-2474.4 3666.57,-2436.3 3699.27,-2465.71 3790.4,-2438.4 3809.29,-2432.74 3828.61,-2426.11 3847.81,-2418.93"/>
<polygon fill="black" stroke="black" points="3848.93,-2422.25 3857.04,-2415.42 3846.45,-2415.7 3848.93,-2422.25"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_3 -->
<g id="node30" class="node">
<title>longestPalindrome_dynamic_programming_step_3</title>
<polygon fill="moccasin" stroke="black" points="3107.93,-2148 2860.88,-2148 2860.88,-1881.6 3107.93,-1881.6 3107.93,-2148"/>
<text text-anchor="middle" x="2984.4" y="-2131.3" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_3</text>
<text text-anchor="middle" x="2984.4" y="-2095.3" font-family="Arial" font-size="10.00">Step 3</text>
<text text-anchor="middle" x="2984.4" y="-2071.3" font-family="Arial" font-size="10.00">Fill the table `dp` in a bottom&#45;up manner,</text>
<text text-anchor="middle" x="2984.4" y="-2059.3" font-family="Arial" font-size="10.00">checking for substrings of length 2 and then 3,</text>
<text text-anchor="middle" x="2984.4" y="-2047.3" font-family="Arial" font-size="10.00">and so on.</text>
<text text-anchor="middle" x="2984.4" y="-2023.3" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2984.4" y="-2011.3" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2984.4" y="-1999.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2984.4" y="-1987.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="2984.4" y="-1975.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="2984.4" y="-1963.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = &quot;&quot;, 1</text>
<text text-anchor="middle" x="2984.4" y="-1951.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="2984.4" y="-1939.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="2984.4" y="-1927.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i], 1</text>
<text text-anchor="middle" x="2984.4" y="-1915.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; 1)[::&#45;1]:</text>
<text text-anchor="middle" x="2984.4" y="-1903.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[i + 1]:</text>
<text text-anchor="middle" x="2984.4" y="-1891.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i + 1] = True</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_2&#45;&gt;longestPalindrome_dynamic_programming_step_3 -->
<g id="edge31" class="edge">
<title>longestPalindrome_dynamic_programming_step_2&#45;&gt;longestPalindrome_dynamic_programming_step_3</title>
<path fill="none" stroke="black" d="M3173.24,-2213.72C3154.34,-2196.06 3135.13,-2177.7 3117.4,-2160 3116.19,-2158.8 3114.99,-2157.59 3113.77,-2156.37"/>
<polygon fill="black" stroke="black" points="3116.32,-2153.96 3106.8,-2149.31 3111.34,-2158.88 3116.32,-2153.96"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_3_error_logic_error -->
<g id="node35" class="node">
<title>longestPalindrome_dynamic_programming_step_3_error_logic_error</title>
<polygon fill="salmon" stroke="black" points="3448.43,-2136 3126.38,-2136 3126.38,-1893.6 3448.43,-1893.6 3448.43,-2136"/>
<text text-anchor="middle" x="3287.4" y="-2119.3" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_3_error_logic_error</text>
<text text-anchor="middle" x="3287.4" y="-2083.3" font-family="Arial" font-size="10.00">ERROR (Step 3)</text>
<text text-anchor="middle" x="3287.4" y="-2059.3" font-family="Arial" font-size="10.00">Not checking the case when length equals 2</text>
<text text-anchor="middle" x="3287.4" y="-2035.3" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="3287.4" y="-2023.3" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="3287.4" y="-2011.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="3287.4" y="-1999.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="3287.4" y="-1987.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="3287.4" y="-1975.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = &quot;&quot;, 1</text>
<text text-anchor="middle" x="3287.4" y="-1963.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="3287.4" y="-1951.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="3287.4" y="-1939.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i], 1</text>
<text text-anchor="middle" x="3287.4" y="-1927.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; 2)[::&#45;1]:</text>
<text text-anchor="middle" x="3287.4" y="-1915.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[i + 1]:</text>
<text text-anchor="middle" x="3287.4" y="-1903.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i + 1] = True</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_2&#45;&gt;longestPalindrome_dynamic_programming_step_3_error_logic_error -->
<g id="edge32" class="edge">
<title>longestPalindrome_dynamic_programming_step_2&#45;&gt;longestPalindrome_dynamic_programming_step_3_error_logic_error</title>
<path fill="none" stroke="black" d="M3287.4,-2213.66C3287.4,-2192.46 3287.4,-2169.84 3287.4,-2147.75"/>
<polygon fill="black" stroke="black" points="3290.9,-2147.78 3287.4,-2137.78 3283.9,-2147.78 3290.9,-2147.78"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_3_variation_1_step_3 -->
<g id="node36" class="node">
<title>longestPalindrome_dynamic_programming_step_3_variation_1_step_3</title>
<polygon fill="lightyellow" stroke="black" points="3800.43,-2130 3466.38,-2130 3466.38,-1899.6 3800.43,-1899.6 3800.43,-2130"/>
<text text-anchor="middle" x="3633.4" y="-2113.3" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_3_variation_1_step_3</text>
<text text-anchor="middle" x="3633.4" y="-2077.3" font-family="Arial" font-size="10.00">Step 3</text>
<text text-anchor="middle" x="3633.4" y="-2053.3" font-family="Arial" font-size="10.00">Fill the `dp` table with the palindromic</text>
<text text-anchor="middle" x="3633.4" y="-2041.3" font-family="Arial" font-size="10.00">substrings of length 2.</text>
<text text-anchor="middle" x="3633.4" y="-2017.3" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="3633.4" y="-2005.3" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="3633.4" y="-1993.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="3633.4" y="-1981.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="3633.4" y="-1969.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="3633.4" y="-1957.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="3633.4" y="-1945.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="3633.4" y="-1933.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="3633.4" y="-1921.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;max_length = 1</text>
<text text-anchor="middle" x="3633.4" y="-1909.3" font-family="Arial" font-size="10.00"># Step 1: Fill the `dp` table with the palindromic substrings of length 2.</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_2&#45;&gt;longestPalindrome_dynamic_programming_step_3_variation_1_step_3 -->
<g id="edge35" class="edge">
<title>longestPalindrome_dynamic_programming_step_2&#45;&gt;longestPalindrome_dynamic_programming_step_3_variation_1_step_3</title>
<path fill="none" stroke="black" d="M3400.36,-2213.65C3407.12,-2207.66 3413.84,-2201.74 3420.4,-2196 3442.06,-2177.06 3465.14,-2157.2 3487.81,-2137.88"/>
<polygon fill="black" stroke="black" points="3489.98,-2140.63 3495.33,-2131.48 3485.44,-2135.3 3489.98,-2140.63"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_4 -->
<g id="node31" class="node">
<title>longestPalindrome_dynamic_programming_step_4</title>
<polygon fill="moccasin" stroke="black" points="3069.93,-1755.6 2822.88,-1755.6 2822.88,-1489.2 3069.93,-1489.2 3069.93,-1755.6"/>
<text text-anchor="middle" x="2946.4" y="-1738.9" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_4</text>
<text text-anchor="middle" x="2946.4" y="-1702.9" font-family="Arial" font-size="10.00">Step 4</text>
<text text-anchor="middle" x="2946.4" y="-1678.9" font-family="Arial" font-size="10.00">For each substring, check if it&#39;s equal to its</text>
<text text-anchor="middle" x="2946.4" y="-1666.9" font-family="Arial" font-size="10.00">reverse, and update the table `dp` accordingly.</text>
<text text-anchor="middle" x="2946.4" y="-1642.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2946.4" y="-1630.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2946.4" y="-1618.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2946.4" y="-1606.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="2946.4" y="-1594.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="2946.4" y="-1582.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = &quot;&quot;, 1</text>
<text text-anchor="middle" x="2946.4" y="-1570.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="2946.4" y="-1558.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="2946.4" y="-1546.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i], 1</text>
<text text-anchor="middle" x="2946.4" y="-1534.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; 1)[::&#45;1]:</text>
<text text-anchor="middle" x="2946.4" y="-1522.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[i + 1]:</text>
<text text-anchor="middle" x="2946.4" y="-1510.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i + 1] = True</text>
<text text-anchor="middle" x="2946.4" y="-1498.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i:i + 2], 2</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_3&#45;&gt;longestPalindrome_dynamic_programming_step_4 -->
<g id="edge29" class="edge">
<title>longestPalindrome_dynamic_programming_step_3&#45;&gt;longestPalindrome_dynamic_programming_step_4</title>
<path fill="none" stroke="black" d="M2971.51,-1881.36C2967.92,-1844.53 2964.01,-1804.36 2960.37,-1766.92"/>
<polygon fill="black" stroke="black" points="2963.9,-1767.04 2959.45,-1757.43 2956.93,-1767.72 2963.9,-1767.04"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_4_error_logic_error -->
<g id="node34" class="node">
<title>longestPalindrome_dynamic_programming_step_4_error_logic_error</title>
<polygon fill="salmon" stroke="black" points="3410.43,-1773.6 3088.38,-1773.6 3088.38,-1471.2 3410.43,-1471.2 3410.43,-1773.6"/>
<text text-anchor="middle" x="3249.4" y="-1756.9" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_4_error_logic_error</text>
<text text-anchor="middle" x="3249.4" y="-1720.9" font-family="Arial" font-size="10.00">ERROR (Step 4)</text>
<text text-anchor="middle" x="3249.4" y="-1696.9" font-family="Arial" font-size="10.00">Updating longest and l variables only when</text>
<text text-anchor="middle" x="3249.4" y="-1684.9" font-family="Arial" font-size="10.00">dp[i][j] is True</text>
<text text-anchor="middle" x="3249.4" y="-1660.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="3249.4" y="-1648.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="3249.4" y="-1636.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="3249.4" y="-1624.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="3249.4" y="-1612.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="3249.4" y="-1600.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = &quot;&quot;, 1</text>
<text text-anchor="middle" x="3249.4" y="-1588.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="3249.4" y="-1576.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="3249.4" y="-1564.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="3249.4" y="-1552.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if dp[i][i]:</text>
<text text-anchor="middle" x="3249.4" y="-1540.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i], 1</text>
<text text-anchor="middle" x="3249.4" y="-1528.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; 1)[::&#45;1]:</text>
<text text-anchor="middle" x="3249.4" y="-1516.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[i + 1]:</text>
<text text-anchor="middle" x="3249.4" y="-1504.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i + 1] = True</text>
<text text-anchor="middle" x="3249.4" y="-1492.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if dp[i][i + 1]:</text>
<text text-anchor="middle" x="3249.4" y="-1480.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i:i + 2], 2</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_3&#45;&gt;longestPalindrome_dynamic_programming_step_4_error_logic_error -->
<g id="edge30" class="edge">
<title>longestPalindrome_dynamic_programming_step_3&#45;&gt;longestPalindrome_dynamic_programming_step_4_error_logic_error</title>
<path fill="none" stroke="black" d="M3074.3,-1881.36C3095.71,-1849.82 3118.77,-1815.85 3140.91,-1783.23"/>
<polygon fill="black" stroke="black" points="3143.55,-1785.57 3146.27,-1775.33 3137.76,-1781.64 3143.55,-1785.57"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_5 -->
<g id="node32" class="node">
<title>longestPalindrome_dynamic_programming_step_5</title>
<polygon fill="palegreen" stroke="black" points="3025.93,-1369.2 2778.88,-1369.2 2778.88,-886.8 3025.93,-886.8 3025.93,-1369.2"/>
<text text-anchor="middle" x="2902.4" y="-1352.5" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_5</text>
<text text-anchor="middle" x="2902.4" y="-1316.5" font-family="Arial" font-size="10.00">TERMINAL (Step 5)</text>
<text text-anchor="middle" x="2902.4" y="-1292.5" font-family="Arial" font-size="10.00">Use the table `dp` to find the longest palindromic</text>
<text text-anchor="middle" x="2902.4" y="-1280.5" font-family="Arial" font-size="10.00">substring.</text>
<text text-anchor="middle" x="2902.4" y="-1256.5" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="2902.4" y="-1244.5" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="2902.4" y="-1232.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="2902.4" y="-1220.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="2902.4" y="-1208.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="2902.4" y="-1196.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = &quot;&quot;, 0</text>
<text text-anchor="middle" x="2902.4" y="-1184.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="2902.4" y="-1172.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="2902.4" y="-1160.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="2902.4" y="-1148.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i], 1</text>
<text text-anchor="middle" x="2902.4" y="-1136.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="2902.4" y="-1124.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; 1)[::&#45;1]:</text>
<text text-anchor="middle" x="2902.4" y="-1112.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[i + 1]:</text>
<text text-anchor="middle" x="2902.4" y="-1100.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i + 1] = True</text>
<text text-anchor="middle" x="2902.4" y="-1088.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i:i + 2], 2</text>
<text text-anchor="middle" x="2902.4" y="-1076.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="2902.4" y="-1064.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for length in range(3, n + 1):</text>
<text text-anchor="middle" x="2902.4" y="-1052.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; length + 1)[::&#45;1]:</text>
<text text-anchor="middle" x="2902.4" y="-1040.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;j = i + length &#45; 1</text>
<text text-anchor="middle" x="2902.4" y="-1028.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[j] and dp[i + 1][j &#45; 1]:</text>
<text text-anchor="middle" x="2902.4" y="-1016.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][j] = True</text>
<text text-anchor="middle" x="2902.4" y="-1004.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i:j + 1], length</text>
<text text-anchor="middle" x="2902.4" y="-992.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="2902.4" y="-980.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest</text>
<text text-anchor="middle" x="2902.4" y="-956.5" font-family="Arial" font-size="10.00">Time: O(n²)</text>
<text text-anchor="middle" x="2902.4" y="-944.5" font-family="Arial" font-size="10.00">Space: O(1)</text>
<text text-anchor="middle" x="2902.4" y="-932.5" font-family="Arial" font-size="10.00">Data structures: string</text>
<text text-anchor="middle" x="2902.4" y="-920.5" font-family="Arial" font-size="10.00">Concepts: iteration, conditional logic, return</text>
<text text-anchor="middle" x="2902.4" y="-908.5" font-family="Arial" font-size="10.00">values, comparison, slicing, object&#45;</text>
<text text-anchor="middle" x="2902.4" y="-896.5" font-family="Arial" font-size="10.00">oriented programming</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_4&#45;&gt;longestPalindrome_dynamic_programming_step_5 -->
<g id="edge27" class="edge">
<title>longestPalindrome_dynamic_programming_step_4&#45;&gt;longestPalindrome_dynamic_programming_step_5</title>
<path fill="none" stroke="black" d="M2934.55,-1488.8C2931.55,-1455.22 2928.23,-1418.04 2924.89,-1380.69"/>
<polygon fill="black" stroke="black" points="2928.41,-1380.78 2924.04,-1371.13 2921.44,-1381.41 2928.41,-1380.78"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_5_error_off&#45;by&#45;one -->
<g id="node33" class="node">
<title>longestPalindrome_dynamic_programming_step_5_error_off&#45;by&#45;one</title>
<polygon fill="salmon" stroke="black" points="3363.3,-1327.2 3043.5,-1327.2 3043.5,-928.8 3363.3,-928.8 3363.3,-1327.2"/>
<text text-anchor="middle" x="3203.4" y="-1310.5" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_5_error_off&#45;by&#45;one</text>
<text text-anchor="middle" x="3203.4" y="-1274.5" font-family="Arial" font-size="10.00">ERROR (Step 5)</text>
<text text-anchor="middle" x="3203.4" y="-1250.5" font-family="Arial" font-size="10.00">Not considering all possible substrings while</text>
<text text-anchor="middle" x="3203.4" y="-1238.5" font-family="Arial" font-size="10.00">finding the longest palindromic substring</text>
<text text-anchor="middle" x="3203.4" y="-1214.5" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="3203.4" y="-1202.5" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="3203.4" y="-1190.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="3203.4" y="-1178.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="3203.4" y="-1166.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="3203.4" y="-1154.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = &quot;&quot;, 0</text>
<text text-anchor="middle" x="3203.4" y="-1142.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="3203.4" y="-1130.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="3203.4" y="-1118.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="3203.4" y="-1106.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i], 1</text>
<text text-anchor="middle" x="3203.4" y="-1094.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="3203.4" y="-1082.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; 1)[::&#45;1]:</text>
<text text-anchor="middle" x="3203.4" y="-1070.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[i + 1]:</text>
<text text-anchor="middle" x="3203.4" y="-1058.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i + 1] = True</text>
<text text-anchor="middle" x="3203.4" y="-1046.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i:i + 2], 2</text>
<text text-anchor="middle" x="3203.4" y="-1034.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="3203.4" y="-1022.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for length in range(3, n):</text>
<text text-anchor="middle" x="3203.4" y="-1010.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; length + 1)[::&#45;1]:</text>
<text text-anchor="middle" x="3203.4" y="-998.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;j = i + length &#45; 1</text>
<text text-anchor="middle" x="3203.4" y="-986.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[j] and dp[i + 1][j &#45; 1]:</text>
<text text-anchor="middle" x="3203.4" y="-974.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][j] = True</text>
<text text-anchor="middle" x="3203.4" y="-962.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest, l = s[i:j + 1], length</text>
<text text-anchor="middle" x="3203.4" y="-950.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="3203.4" y="-938.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_4&#45;&gt;longestPalindrome_dynamic_programming_step_5_error_off&#45;by&#45;one -->
<g id="edge28" class="edge">
<title>longestPalindrome_dynamic_programming_step_4&#45;&gt;longestPalindrome_dynamic_programming_step_5_error_off&#45;by&#45;one</title>
<path fill="none" stroke="black" d="M3015.61,-1488.8C3039.86,-1442.33 3067.72,-1388.95 3094.43,-1337.78"/>
<polygon fill="black" stroke="black" points="3097.53,-1339.41 3099.05,-1328.92 3091.32,-1336.17 3097.53,-1339.41"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_3_variation_1_step_4 -->
<g id="node37" class="node">
<title>longestPalindrome_dynamic_programming_step_3_variation_1_step_4</title>
<polygon fill="lightyellow" stroke="black" points="3827.8,-1785.6 3439,-1785.6 3439,-1459.2 3827.8,-1459.2 3827.8,-1785.6"/>
<text text-anchor="middle" x="3633.4" y="-1768.9" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_3_variation_1_step_4</text>
<text text-anchor="middle" x="3633.4" y="-1732.9" font-family="Arial" font-size="10.00">Step 4</text>
<text text-anchor="middle" x="3633.4" y="-1708.9" font-family="Arial" font-size="10.00">Fill the `dp` table with the palindromic</text>
<text text-anchor="middle" x="3633.4" y="-1696.9" font-family="Arial" font-size="10.00">substrings of length greater than 2.</text>
<text text-anchor="middle" x="3633.4" y="-1672.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="3633.4" y="-1660.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="3633.4" y="-1648.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="3633.4" y="-1636.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="3633.4" y="-1624.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="3633.4" y="-1612.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="3633.4" y="-1600.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="3633.4" y="-1588.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="3633.4" y="-1576.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;max_length = 1</text>
<text text-anchor="middle" x="3633.4" y="-1564.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;start = 0</text>
<text text-anchor="middle" x="3633.4" y="-1552.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; 1):</text>
<text text-anchor="middle" x="3633.4" y="-1540.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[i + 1]:</text>
<text text-anchor="middle" x="3633.4" y="-1528.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i + 1] = True</text>
<text text-anchor="middle" x="3633.4" y="-1516.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;start = i</text>
<text text-anchor="middle" x="3633.4" y="-1504.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_length = 2</text>
<text text-anchor="middle" x="3633.4" y="-1492.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="3633.4" y="-1480.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for length in range(3, n + 1):</text>
<text text-anchor="middle" x="3633.4" y="-1468.9" font-family="Arial" font-size="10.00"># Step 2: Fill the `dp` table with the palindromic substrings of length greater than 2.</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_3_variation_1_step_3&#45;&gt;longestPalindrome_dynamic_programming_step_3_variation_1_step_4 -->
<g id="edge34" class="edge">
<title>longestPalindrome_dynamic_programming_step_3_variation_1_step_3&#45;&gt;longestPalindrome_dynamic_programming_step_3_variation_1_step_4</title>
<path fill="none" stroke="black" d="M3633.4,-1899.3C3633.4,-1867.33 3633.4,-1831.85 3633.4,-1797.27"/>
<polygon fill="black" stroke="black" points="3636.9,-1797.59 3633.4,-1787.59 3629.9,-1797.59 3636.9,-1797.59"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_3_variation_1_step_5 -->
<g id="node38" class="node">
<title>longestPalindrome_dynamic_programming_step_3_variation_1_step_5</title>
<polygon fill="palegreen" stroke="black" points="3800.43,-1375.2 3466.38,-1375.2 3466.38,-880.8 3800.43,-880.8 3800.43,-1375.2"/>
<text text-anchor="middle" x="3633.4" y="-1358.5" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_3_variation_1_step_5</text>
<text text-anchor="middle" x="3633.4" y="-1322.5" font-family="Arial" font-size="10.00">TERMINAL (Step 5)</text>
<text text-anchor="middle" x="3633.4" y="-1298.5" font-family="Arial" font-size="10.00">Find the longest palindromic substring.</text>
<text text-anchor="middle" x="3633.4" y="-1274.5" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="3633.4" y="-1262.5" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="3633.4" y="-1250.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="3633.4" y="-1238.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="3633.4" y="-1226.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="3633.4" y="-1214.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n):</text>
<text text-anchor="middle" x="3633.4" y="-1202.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i] = True</text>
<text text-anchor="middle" x="3633.4" y="-1190.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="3633.4" y="-1178.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;max_length = 1</text>
<text text-anchor="middle" x="3633.4" y="-1166.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;start = 0</text>
<text text-anchor="middle" x="3633.4" y="-1154.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; 1):</text>
<text text-anchor="middle" x="3633.4" y="-1142.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[i + 1]:</text>
<text text-anchor="middle" x="3633.4" y="-1130.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][i + 1] = True</text>
<text text-anchor="middle" x="3633.4" y="-1118.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;start = i</text>
<text text-anchor="middle" x="3633.4" y="-1106.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_length = 2</text>
<text text-anchor="middle" x="3633.4" y="-1094.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="3633.4" y="-1082.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for length in range(3, n + 1):</text>
<text text-anchor="middle" x="3633.4" y="-1070.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n &#45; length + 1):</text>
<text text-anchor="middle" x="3633.4" y="-1058.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;j = i + length &#45; 1</text>
<text text-anchor="middle" x="3633.4" y="-1046.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[j] and dp[i + 1][j &#45; 1]:</text>
<text text-anchor="middle" x="3633.4" y="-1034.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][j] = True</text>
<text text-anchor="middle" x="3633.4" y="-1022.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if length &gt; max_length:</text>
<text text-anchor="middle" x="3633.4" y="-1010.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;start = i</text>
<text text-anchor="middle" x="3633.4" y="-998.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_length = length</text>
<text text-anchor="middle" x="3633.4" y="-986.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="3633.4" y="-974.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[start:start + max_length]</text>
<text text-anchor="middle" x="3633.4" y="-950.5" font-family="Arial" font-size="10.00">Time: O(n²)</text>
<text text-anchor="middle" x="3633.4" y="-938.5" font-family="Arial" font-size="10.00">Space: O(1)</text>
<text text-anchor="middle" x="3633.4" y="-926.5" font-family="Arial" font-size="10.00">Data structures: string</text>
<text text-anchor="middle" x="3633.4" y="-914.5" font-family="Arial" font-size="10.00">Concepts: iteration, conditional logic, return</text>
<text text-anchor="middle" x="3633.4" y="-902.5" font-family="Arial" font-size="10.00">values, comparison, slicing, object&#45;</text>
<text text-anchor="middle" x="3633.4" y="-890.5" font-family="Arial" font-size="10.00">oriented programming</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_3_variation_1_step_4&#45;&gt;longestPalindrome_dynamic_programming_step_3_variation_1_step_5 -->
<g id="edge33" class="edge">
<title>longestPalindrome_dynamic_programming_step_3_variation_1_step_4&#45;&gt;longestPalindrome_dynamic_programming_step_3_variation_1_step_5</title>
<path fill="none" stroke="black" d="M3633.4,-1458.81C3633.4,-1435.61 3633.4,-1411.28 3633.4,-1386.81"/>
<polygon fill="black" stroke="black" points="3636.9,-1387.07 3633.4,-1377.07 3629.9,-1387.07 3636.9,-1387.07"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_2_variation_1_step_3 -->
<g id="node41" class="node">
<title>longestPalindrome_dynamic_programming_step_2_variation_1_step_3</title>
<polygon fill="lightyellow" stroke="black" points="4389.92,-2148 3818.87,-2148 3818.87,-1881.6 4389.92,-1881.6 4389.92,-2148"/>
<text text-anchor="middle" x="4104.4" y="-2131.3" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_2_variation_1_step_3</text>
<text text-anchor="middle" x="4104.4" y="-2095.3" font-family="Arial" font-size="10.00">Step 3</text>
<text text-anchor="middle" x="4104.4" y="-2071.3" font-family="Arial" font-size="10.00">Fill the 2D table dp in a bottom&#45;up manner, where</text>
<text text-anchor="middle" x="4104.4" y="-2059.3" font-family="Arial" font-size="10.00">dp[i][j] is set to True if the string from index i</text>
<text text-anchor="middle" x="4104.4" y="-2047.3" font-family="Arial" font-size="10.00">to j is a palindrome.</text>
<text text-anchor="middle" x="4104.4" y="-2023.3" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="4104.4" y="-2011.3" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="4104.4" y="-1999.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="4104.4" y="-1987.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="4104.4" y="-1975.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="4104.4" y="-1963.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;max_len = 1</text>
<text text-anchor="middle" x="4104.4" y="-1951.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;start = 0</text>
<text text-anchor="middle" x="4104.4" y="-1939.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="4104.4" y="-1927.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n&#45;1, &#45;1, &#45;1):</text>
<text text-anchor="middle" x="4104.4" y="-1915.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for j in range(i, n):</text>
<text text-anchor="middle" x="4104.4" y="-1903.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[j] and (j &#45; i &lt; 2 or dp[i+1][j&#45;1]):</text>
<text text-anchor="middle" x="4104.4" y="-1891.3" font-family="Arial" font-size="10.00"># Step 2: Fill the 2D table dp in a bottom&#45;up manner, where dp[i][j] is set to True if the string from index i to j is a palindrome.</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_2_variation_1_step_2&#45;&gt;longestPalindrome_dynamic_programming_step_2_variation_1_step_3 -->
<g id="edge39" class="edge">
<title>longestPalindrome_dynamic_programming_step_2_variation_1_step_2&#45;&gt;longestPalindrome_dynamic_programming_step_2_variation_1_step_3</title>
<path fill="none" stroke="black" d="M4077.22,-2219.91C4079.79,-2200.65 4082.53,-2180.03 4085.26,-2159.57"/>
<polygon fill="black" stroke="black" points="4088.72,-2160.1 4086.57,-2149.73 4081.78,-2159.18 4088.72,-2160.1"/>
</g>
<!-- longestPalindrome_dynamic_programming_step_2_variation_1_step_4 -->
<g id="node42" class="node">
<title>longestPalindrome_dynamic_programming_step_2_variation_1_step_4</title>
<polygon fill="palegreen" stroke="black" points="4271.42,-1821.6 3937.37,-1821.6 3937.37,-1423.2 4271.42,-1423.2 4271.42,-1821.6"/>
<text text-anchor="middle" x="4104.4" y="-1804.9" font-family="Arial" font-size="10.00">longestPalindrome_dynamic_programming_step_2_variation_1_step_4</text>
<text text-anchor="middle" x="4104.4" y="-1768.9" font-family="Arial" font-size="10.00">TERMINAL (Step 4)</text>
<text text-anchor="middle" x="4104.4" y="-1744.9" font-family="Arial" font-size="10.00">Update the maximum length and start of the longest</text>
<text text-anchor="middle" x="4104.4" y="-1732.9" font-family="Arial" font-size="10.00">palindrome whenever a longer palindrome is found.</text>
<text text-anchor="middle" x="4104.4" y="-1708.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="4104.4" y="-1696.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="4104.4" y="-1684.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="4104.4" y="-1672.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = len(s)</text>
<text text-anchor="middle" x="4104.4" y="-1660.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;dp = [[False] * n for _ in range(n)]</text>
<text text-anchor="middle" x="4104.4" y="-1648.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;max_len = 1</text>
<text text-anchor="middle" x="4104.4" y="-1636.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;start = 0</text>
<text text-anchor="middle" x="4104.4" y="-1624.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="4104.4" y="-1612.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(n&#45;1, &#45;1, &#45;1):</text>
<text text-anchor="middle" x="4104.4" y="-1600.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for j in range(i, n):</text>
<text text-anchor="middle" x="4104.4" y="-1588.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if s[i] == s[j] and (j &#45; i &lt; 2 or dp[i+1][j&#45;1]):</text>
<text text-anchor="middle" x="4104.4" y="-1576.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dp[i][j] = True</text>
<text text-anchor="middle" x="4104.4" y="-1564.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if j &#45; i + 1 &gt; max_len:</text>
<text text-anchor="middle" x="4104.4" y="-1552.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_len = j &#45; i + 1</text>
<text text-anchor="middle" x="4104.4" y="-1540.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;start = i</text>
<text text-anchor="middle" x="4104.4" y="-1528.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="4104.4" y="-1516.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[start:start + max_len]</text>
<text text-anchor="middle" x="4104.4" y="-1492.9" font-family="Arial" font-size="10.00">Time: O(n²)</text>
<text text-anchor="middle" x="4104.4" y="-1480.9" font-family="Arial" font-size="10.00">Space: O(1)</text>
<text text-anchor="middle" x="4104.4" y="-1468.9" font-family="Arial" font-size="10.00">Data structures: string</text>
<text text-anchor="middle" x="4104.4" y="-1456.9" font-family="Arial" font-size="10.00">Concepts: iteration, conditional logic, return</text>
<text text-anchor="middle" x="4104.4" y="-1444.9" font-family="Arial" font-size="10.00">values, comparison, slicing, object&#45;</text>
<text text-anchor="middle" x="4104.4" y="-1432.9" font-family="Arial" font-size="10.00">oriented programming</text>
</g>
<!-- longestPalindrome_dynamic_programming_step_2_variation_1_step_3&#45;&gt;longestPalindrome_dynamic_programming_step_2_variation_1_step_4 -->
<g id="edge38" class="edge">
<title>longestPalindrome_dynamic_programming_step_2_variation_1_step_3&#45;&gt;longestPalindrome_dynamic_programming_step_2_variation_1_step_4</title>
<path fill="none" stroke="black" d="M4104.4,-1881.36C4104.4,-1865.73 4104.4,-1849.49 4104.4,-1833.12"/>
<polygon fill="black" stroke="black" points="4107.9,-1833.29 4104.4,-1823.29 4100.9,-1833.29 4107.9,-1833.29"/>
</g>
<!-- longestPalindrome_expand_around_center_step_1_variation_1_step_2 -->
<g id="node45" class="node">
<title>longestPalindrome_expand_around_center_step_1_variation_1_step_2</title>
<polygon fill="lightyellow" stroke="black" points="4977.8,-2438.4 4379,-2438.4 4379,-2196 4977.8,-2196 4977.8,-2438.4"/>
<text text-anchor="middle" x="4678.4" y="-2421.7" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_1_variation_1_step_2</text>
<text text-anchor="middle" x="4678.4" y="-2385.7" font-family="Arial" font-size="10.00">Step 2</text>
<text text-anchor="middle" x="4678.4" y="-2361.7" font-family="Arial" font-size="10.00">While the characters at the left and right</text>
<text text-anchor="middle" x="4678.4" y="-2349.7" font-family="Arial" font-size="10.00">pointers are the same, increment the left pointer</text>
<text text-anchor="middle" x="4678.4" y="-2337.7" font-family="Arial" font-size="10.00">and decrement the right pointer.</text>
<text text-anchor="middle" x="4678.4" y="-2313.7" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="4678.4" y="-2301.7" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="4678.4" y="-2289.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="4678.4" y="-2277.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(left, right):</text>
<text text-anchor="middle" x="4678.4" y="-2265.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="4678.4" y="-2253.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1</text>
<text text-anchor="middle" x="4678.4" y="-2241.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="4678.4" y="-2229.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[left + 1:right]</text>
<text text-anchor="middle" x="4678.4" y="-2217.7" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="4678.4" y="-2205.7" font-family="Arial" font-size="10.00"># Step 2: While the characters at the left and right pointers are the same, increment the left pointer and decrement the right pointer.</text>
</g>
<!-- longestPalindrome_expand_around_center_step_1_variation_1_step_1&#45;&gt;longestPalindrome_expand_around_center_step_1_variation_1_step_2 -->
<g id="edge46" class="edge">
<title>longestPalindrome_expand_around_center_step_1_variation_1_step_1&#45;&gt;longestPalindrome_expand_around_center_step_1_variation_1_step_2</title>
<path fill="none" stroke="black" d="M4509.99,-2486.22C4522.91,-2473.33 4536.41,-2459.86 4549.89,-2446.41"/>
<polygon fill="black" stroke="black" points="4552.14,-2449.11 4556.75,-2439.57 4547.2,-2444.15 4552.14,-2449.11"/>
</g>
<!-- longestPalindrome_expand_around_center_step_1_variation_1_step_3 -->
<g id="node46" class="node">
<title>longestPalindrome_expand_around_center_step_1_variation_1_step_3</title>
<polygon fill="lightyellow" stroke="black" points="5091.17,-2160 4407.62,-2160 4407.62,-1869.6 5091.17,-1869.6 5091.17,-2160"/>
<text text-anchor="middle" x="4749.4" y="-2143.3" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_1_variation_1_step_3</text>
<text text-anchor="middle" x="4749.4" y="-2107.3" font-family="Arial" font-size="10.00">Step 3</text>
<text text-anchor="middle" x="4749.4" y="-2083.3" font-family="Arial" font-size="10.00">Update the maximum palindrome length and the</text>
<text text-anchor="middle" x="4749.4" y="-2071.3" font-family="Arial" font-size="10.00">corresponding substring if the current palindrome</text>
<text text-anchor="middle" x="4749.4" y="-2059.3" font-family="Arial" font-size="10.00">length is greater than the maximum length.</text>
<text text-anchor="middle" x="4749.4" y="-2035.3" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="4749.4" y="-2023.3" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="4749.4" y="-2011.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="4749.4" y="-1999.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(left, right):</text>
<text text-anchor="middle" x="4749.4" y="-1987.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="4749.4" y="-1975.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1</text>
<text text-anchor="middle" x="4749.4" y="-1963.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="4749.4" y="-1951.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[left + 1:right]</text>
<text text-anchor="middle" x="4749.4" y="-1939.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="4749.4" y="-1927.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;max_len = 0</text>
<text text-anchor="middle" x="4749.4" y="-1915.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;max_palindrome = &quot;&quot;</text>
<text text-anchor="middle" x="4749.4" y="-1903.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest_palindrome = &quot;&quot;</text>
<text text-anchor="middle" x="4749.4" y="-1891.3" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(len(s)):</text>
<text text-anchor="middle" x="4749.4" y="-1879.3" font-family="Arial" font-size="10.00"># Step 3: Update the maximum palindrome length and the corresponding substring if the current palindrome length is greater than the maximum length.</text>
</g>
<!-- longestPalindrome_expand_around_center_step_1_variation_1_step_2&#45;&gt;longestPalindrome_expand_around_center_step_1_variation_1_step_3 -->
<g id="edge45" class="edge">
<title>longestPalindrome_expand_around_center_step_1_variation_1_step_2&#45;&gt;longestPalindrome_expand_around_center_step_1_variation_1_step_3</title>
<path fill="none" stroke="black" d="M4706.87,-2195.75C4708.8,-2187.58 4710.76,-2179.28 4712.73,-2170.97"/>
<polygon fill="black" stroke="black" points="4716.07,-2172.04 4714.96,-2161.51 4709.26,-2170.43 4716.07,-2172.04"/>
</g>
<!-- longestPalindrome_expand_around_center_step_1_variation_1_step_4 -->
<g id="node47" class="node">
<title>longestPalindrome_expand_around_center_step_1_variation_1_step_4</title>
<polygon fill="lightyellow" stroke="black" points="4977.55,-1785.6 4521.25,-1785.6 4521.25,-1459.2 4977.55,-1459.2 4977.55,-1785.6"/>
<text text-anchor="middle" x="4749.4" y="-1768.9" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_1_variation_1_step_4</text>
<text text-anchor="middle" x="4749.4" y="-1732.9" font-family="Arial" font-size="10.00">Step 4</text>
<text text-anchor="middle" x="4749.4" y="-1708.9" font-family="Arial" font-size="10.00">Iterate through the string, treating each</text>
<text text-anchor="middle" x="4749.4" y="-1696.9" font-family="Arial" font-size="10.00">character as the center of a potential palindrome.</text>
<text text-anchor="middle" x="4749.4" y="-1672.9" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="4749.4" y="-1660.9" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="4749.4" y="-1648.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="4749.4" y="-1636.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(left, right):</text>
<text text-anchor="middle" x="4749.4" y="-1624.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="4749.4" y="-1612.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1</text>
<text text-anchor="middle" x="4749.4" y="-1600.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="4749.4" y="-1588.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[left + 1:right]</text>
<text text-anchor="middle" x="4749.4" y="-1576.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="4749.4" y="-1564.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;max_len = 0</text>
<text text-anchor="middle" x="4749.4" y="-1552.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;max_palindrome = &quot;&quot;</text>
<text text-anchor="middle" x="4749.4" y="-1540.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest_palindrome = &quot;&quot;</text>
<text text-anchor="middle" x="4749.4" y="-1528.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(len(s)):</text>
<text text-anchor="middle" x="4749.4" y="-1516.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;palindrome = expand_around_center(i, i)</text>
<text text-anchor="middle" x="4749.4" y="-1504.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(palindrome) &gt; max_len:</text>
<text text-anchor="middle" x="4749.4" y="-1492.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_len = len(palindrome)</text>
<text text-anchor="middle" x="4749.4" y="-1480.9" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest_palindrome = palindrome</text>
<text text-anchor="middle" x="4749.4" y="-1468.9" font-family="Arial" font-size="10.00"># Step 4: Iterate through the string, treating each character as the center of a potential palindrome.</text>
</g>
<!-- longestPalindrome_expand_around_center_step_1_variation_1_step_3&#45;&gt;longestPalindrome_expand_around_center_step_1_variation_1_step_4 -->
<g id="edge44" class="edge">
<title>longestPalindrome_expand_around_center_step_1_variation_1_step_3&#45;&gt;longestPalindrome_expand_around_center_step_1_variation_1_step_4</title>
<path fill="none" stroke="black" d="M4749.4,-1869.26C4749.4,-1845.83 4749.4,-1821.36 4749.4,-1797.32"/>
<polygon fill="black" stroke="black" points="4752.9,-1797.45 4749.4,-1787.45 4745.9,-1797.45 4752.9,-1797.45"/>
</g>
<!-- longestPalindrome_expand_around_center_step_1_variation_1_step_5 -->
<g id="node48" class="node">
<title>longestPalindrome_expand_around_center_step_1_variation_1_step_5</title>
<polygon fill="palegreen" stroke="black" points="4916.42,-1369.2 4582.38,-1369.2 4582.38,-886.8 4916.42,-886.8 4916.42,-1369.2"/>
<text text-anchor="middle" x="4749.4" y="-1352.5" font-family="Arial" font-size="10.00">longestPalindrome_expand_around_center_step_1_variation_1_step_5</text>
<text text-anchor="middle" x="4749.4" y="-1316.5" font-family="Arial" font-size="10.00">TERMINAL (Step 5)</text>
<text text-anchor="middle" x="4749.4" y="-1292.5" font-family="Arial" font-size="10.00">If the maximum palindrome length is 1, return the</text>
<text text-anchor="middle" x="4749.4" y="-1280.5" font-family="Arial" font-size="10.00">first character of the string; otherwise, return</text>
<text text-anchor="middle" x="4749.4" y="-1268.5" font-family="Arial" font-size="10.00">the longest palindromic substring.</text>
<text text-anchor="middle" x="4749.4" y="-1244.5" font-family="Arial" font-size="10.00">CODE:</text>
<text text-anchor="middle" x="4749.4" y="-1232.5" font-family="Arial" font-size="10.00">class Solution:</text>
<text text-anchor="middle" x="4749.4" y="-1220.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;def longestPalindrome(self, s: str) &#45;&gt; str:</text>
<text text-anchor="middle" x="4749.4" y="-1208.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;def expand_around_center(left, right):</text>
<text text-anchor="middle" x="4749.4" y="-1196.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:</text>
<text text-anchor="middle" x="4749.4" y="-1184.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;left &#45;= 1</text>
<text text-anchor="middle" x="4749.4" y="-1172.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right += 1</text>
<text text-anchor="middle" x="4749.4" y="-1160.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return s[left + 1:right]</text>
<text text-anchor="middle" x="4749.4" y="-1148.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;</text>
<text text-anchor="middle" x="4749.4" y="-1136.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;max_len = 0</text>
<text text-anchor="middle" x="4749.4" y="-1124.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;max_palindrome = &quot;&quot;</text>
<text text-anchor="middle" x="4749.4" y="-1112.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;longest_palindrome = &quot;&quot;</text>
<text text-anchor="middle" x="4749.4" y="-1100.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(len(s)):</text>
<text text-anchor="middle" x="4749.4" y="-1088.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;palindrome = expand_around_center(i, i)</text>
<text text-anchor="middle" x="4749.4" y="-1076.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(palindrome) &gt; max_len:</text>
<text text-anchor="middle" x="4749.4" y="-1064.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_len = len(palindrome)</text>
<text text-anchor="middle" x="4749.4" y="-1052.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest_palindrome = palindrome</text>
<text text-anchor="middle" x="4749.4" y="-1040.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;palindrome = expand_around_center(i, i + 1)</text>
<text text-anchor="middle" x="4749.4" y="-1028.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(palindrome) &gt; max_len:</text>
<text text-anchor="middle" x="4749.4" y="-1016.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_len = len(palindrome)</text>
<text text-anchor="middle" x="4749.4" y="-1004.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;longest_palindrome = palindrome</text>
<text text-anchor="middle" x="4749.4" y="-992.5" font-family="Arial" font-size="10.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return longest_palindrome</text>
<text text-anchor="middle" x="4749.4" y="-968.5" font-family="Arial" font-size="10.00">Time: O(n)</text>
<text text-anchor="middle" x="4749.4" y="-956.5" font-family="Arial" font-size="10.00">Space: O(1)</text>
<text text-anchor="middle" x="4749.4" y="-944.5" font-family="Arial" font-size="10.00">Data structures: string</text>
<text text-anchor="middle" x="4749.4" y="-932.5" font-family="Arial" font-size="10.00">Concepts: iteration, loops, conditional logic,</text>
<text text-anchor="middle" x="4749.4" y="-920.5" font-family="Arial" font-size="10.00">helper functions, return values,</text>
<text text-anchor="middle" x="4749.4" y="-908.5" font-family="Arial" font-size="10.00">comparison, compound assignment,</text>
<text text-anchor="middle" x="4749.4" y="-896.5" font-family="Arial" font-size="10.00">slicing, object&#45;oriented programming</text>
</g>
<!-- longestPalindrome_expand_around_center_step_1_variation_1_step_4&#45;&gt;longestPalindrome_expand_around_center_step_1_variation_1_step_5 -->
<g id="edge43" class="edge">
<title>longestPalindrome_expand_around_center_step_1_variation_1_step_4&#45;&gt;longestPalindrome_expand_around_center_step_1_variation_1_step_5</title>
<path fill="none" stroke="black" d="M4749.4,-1458.81C4749.4,-1433.68 4749.4,-1407.24 4749.4,-1380.71"/>
<polygon fill="black" stroke="black" points="4752.9,-1380.85 4749.4,-1370.85 4745.9,-1380.86 4752.9,-1380.85"/>
</g>
</g>
</svg>
